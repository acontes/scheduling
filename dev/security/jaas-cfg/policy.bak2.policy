// keystore
//keystore ".keystore";

grant codeBase "file:${{java.ext.dirs}}/*" {
	permission java.security.AllPermission;
};

// "standard" properies that can be read by anyone
grant {
	permission java.util.PropertyPermission "java.version", "read";
	permission java.util.PropertyPermission "java.vendor", "read";
	permission java.util.PropertyPermission "java.vendor.url", "read";
	permission java.util.PropertyPermission "java.class.version", "read";
	permission java.util.PropertyPermission "os.name", "read";
	permission java.util.PropertyPermission "os.version", "read";
	permission java.util.PropertyPermission "os.arch", "read";
	permission java.util.PropertyPermission "file.separator", "read";
	permission java.util.PropertyPermission "path.separator", "read";
	permission java.util.PropertyPermission "line.separator", "read";

	permission java.util.PropertyPermission "java.specification.version", "read";
	permission java.util.PropertyPermission "java.specification.vendor", "read";
	permission java.util.PropertyPermission "java.specification.name", "read";

	permission java.util.PropertyPermission "java.vm.specification.version", "read";
	permission java.util.PropertyPermission "java.vm.specification.vendor", "read";
	permission java.util.PropertyPermission "java.vm.specification.name", "read";
	permission java.util.PropertyPermission "java.vm.version", "read";
	permission java.util.PropertyPermission "java.vm.vendor", "read";
	permission java.util.PropertyPermission "java.vm.name", "read";
	
	permission java.io.FilePermission "${user.home}/-", "read";
	permission java.util.PropertyPermission "user.dir", "read";
	permission java.util.PropertyPermission "java.home", "read";
	permission java.util.PropertyPermission "user.name", "read";
};

// Permission for the blind login module
grant codebase "file:classes/Tests/*" {
    permission javax.security.auth.AuthPermission "modifyPrincipals";
};

// Permissions for the Launcher
grant codebase "file:classes/Tests/*" {
   permission javax.security.auth.AuthPermission "createLoginContext.BlindLoginMethod";
   permission javax.security.auth.AuthPermission "doAsPrivileged";
};

// ProActive initialization permissions (log4j.jar)
grant codebase "file:-", principal functionalTests.security.jaas.GroupPrincipal "OASIS-sop" {
	permission java.util.PropertyPermission "log4j.*", "read";
	permission java.io.FilePermission "lib/globus/cog-jglobus-1.2.jar", "read";
};

// ProActive initialization permissions continued (user code ?)
grant codebase "file:classes/Tests/*", principal functionalTests.security.jaas.GroupPrincipal "OASIS-sop"  {
	permission java.io.FilePermission "classes/Core/org/objectweb/proactive/core/config/ProActiveConfiguration.xml", "read";
};

// ProActive initialization permissions continued (xercesImpl.jar)
grant codebase "file:lib/xercesImpl.jar", principal functionalTests.security.jaas.GroupPrincipal "OASIS-sop"  {
	permission java.util.PropertyPermission "org.apache.xerces.xni.parser.XMLParserConfiguration", "read";
	permission java.io.FilePermission "${java.home}/lib/xerces.properties", "read";
	permission java.io.FilePermission "classes/Core/org/objectweb/proactive/core/config/ProActiveConfiguration.xml", "read";
};

// ProActive initialization permissions continued (?)
grant codebase "file:classes/-", principal functionalTests.security.jaas.GroupPrincipal "OASIS-sop"  {
	permission java.util.PropertyPermission "proactive.*", "read, write";
	permission java.util.PropertyPermission "user.home", "read";
	
	permission java.util.PropertyPermission "RemoteHostname", "read, write";
	permission java.util.PropertyPermission "byteCodeManipulator", "read, write";
	permission java.util.PropertyPermission "components.creation.timeout", "read, write";
	permission java.util.PropertyPermission "fractal.provider", "read, write";
	
	permission java.util.PropertyPermission "ibis.*", "read, write";
	
	permission java.util.PropertyPermission "java.protocol.handler.pkgs", "read, write";
	permission java.util.PropertyPermission "name_server", "read, write";
	permission java.util.PropertyPermission "name_server_pool", "read, write";
	permission java.util.PropertyPermission "pool_host_number", "read, write";
	
	permission java.util.PropertyPermission "schema.validation", "read, write";
};

/* Descriptor reading permissions (bouncycastle.jar") */
grant codebase "file:-", principal functionalTests.security.jaas.GroupPrincipal "OASIS-sop"  {
	permission java.security.SecurityPermission "putProviderProperty.BC";
	permission java.security.SecurityPermission "insertProvider.BC";
	permission javax.management.MBeanServerPermission "createMBeanServer";
	permission javax.management.MBeanTrustPermission "register";
	permission java.util.PropertyPermission "java.rmi.server.codebase", "read, write";
	permission java.lang.RuntimePermission "accessClassInPackage.sun.rmi.server";
	permission java.net.SocketPermission "localhost:1024-", "listen";
};

/* Descriptor reading permissions (bouncycastle.jar") */
grant principal functionalTests.security.jaas.GroupPrincipal "OASIS-sop" {
	permission java.lang.RuntimePermission "accessDeclaredMembers";
	permission java.lang.RuntimePermission "createClassLoader";
	permission java.lang.reflect.ReflectPermission "suppressAccessChecks";
	permission java.lang.RuntimePermission "getProtectionDomain";
};

/* Name resolution permissions */
grant principal functionalTests.security.jaas.GroupPrincipal "OASIS-sop" {
	permission java.net.SocketPermission "www-sop.inria.fr:80", "connect, resolve";
	permission java.util.PropertyPermission "dtm.debug", "read";
	permission java.util.PropertyPermission "java.class.path", "read";
	permission java.util.PropertyPermission "java.security.policy", "read";
	permission java.util.PropertyPermission "java.system.class.loader", "read";
};

// Virtual node activation permissions
grant principal functionalTests.security.jaas.GroupPrincipal "OASIS-sop" {
	permission java.io.FilePermission "${java.home}/bin/java", "execute";
};

// temp
/*grant principal functionalTests.security.jaas.UsernamePrincipal "nhouillo" {
	permission java.net.SocketPermission "naruto", "accept, connect, resolve";
	//permission javax.management.MBeanPermission "org.objectweb.proactive.core.runtime.ProActiveRuntimeImpl#-[org.objectweb.proactive.runtime:type=//naruto.inria.fr/PA_JVM*_naruto.inria.fr]", "registerMBean";
};*/

grant codebase "file:classes/-", principal functionalTests.security.jaas.GroupPrincipal "OASIS-sop"  {
   permission javax.security.auth.AuthPermission "doAsPrivileged";
};

grant principal functionalTests.security.jaas.GroupPrincipal "OASIS-sop" {
	permission java.net.SocketPermission "naruto", "accept, connect, resolve";
	permission javax.management.MBeanPermission "org.objectweb.proactive.core.runtime.ProActiveRuntimeImpl#-[org.objectweb.proactive.runtime:type=//naruto.inria.fr/PA_JVM*_naruto.inria.fr]", "registerMBean";
	permission java.net.SocketPermission "localhost:1099", "connect, resolve";
};