<!-- Converted by db4-upgrade version 1.0 -->

<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="LoadBalancing"><info><title>Load Balancing</title></info>
  

  <section><info><title>Overview</title></info>
    

    <indexterm significance="preferred">
      <primary>LoadBalancing</primary>
    </indexterm>

    <para>Load balancing is the process of distributing load among a set of
    processors in a smart way for exploiting the parallelism and minimize the
    response time. There are two main approaches to distributed load
    balancing: <emphasis>work sharing</emphasis>, in which processors try to
    equalize the load among them, and <emphasis>work stealing</emphasis>, in
    which idle processor request extra work.</para>

    <para>The load balancing uses the migration to move objects from a node to
    an other : PAMobileAgent.migrateTo(object,node,false). (see <xref linkend="Migration"/> for more details).</para>
  </section>

  <section><info><title>Metrics</title></info>
    

    <para>The load balancing need metrics to evaluate each node and so to take
    a decision. You can define your own Metrics (CPU Load, number of active
    objects, communication between active objects ...).</para>

    <section><info><title>MetricFactory and Metric classes</title></info>
      

      <para>You must implement two classes : MetricFactory and Metric (package
      org.objectweb.proactive.loadbalancing.metrics).</para>

      <section><info><title>MetricFactory</title></info>
        

        <para>You have to implements the method <emphasis>public Metric
        getNewMetric( ) </emphasis>which returns a new Metric.</para>
      </section>

      <section><info><title>Metric</title></info>
        

        <para>There are two concepts : the <emphasis>rank</emphasis> and the
        <emphasis>load</emphasis>. The rank is used to compare two nodes
        without considering the load (ex: CPU mHz). The load can evoluate in
        time </para>

        <para>Three methods have to be implemented : </para>

        <itemizedlist>
          <listitem>
            <para>public void takeDecision(LoadBalancer lb) : this method has
            to call <emphasis>lb.startBalancing( )</emphasis> (overload) or
            <emphasis>lb.stealWork( )</emphasis> (underload)</para>
          </listitem>
        </itemizedlist>

        <itemizedlist>
          <listitem>
            <para>public double getRanking() : this method returns the rank of
            the node.</para>
          </listitem>
        </itemizedlist>

        <itemizedlist>
          <listitem>
            <para>public double getLoad() : this method returns the load of
            the node.</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>
  </section>

  <section><info><title>Using Load Balancing</title></info>
    

    <para>There is two ways for using load balancing : manually in the
    application code or as a technical service.(see <xref linkend="technicalService"/> for more details).</para>

    <section><info><title>In the application code</title></info>
      

      <para>In order to ease the use of the load balancing, we provide static
      methods on the <literal>LoadBalancing</literal> class. First of all, you
      need to <emphasis>initialize</emphasis> the load balancing with the
      MetricFactory as described in the previous paragraph. You can specify a
      list of nodes at the initialization or later.</para>

      <para><programlisting xml:lang="java">  Node[] nodes;
  Node node;
  //...  initialisation of nodes
  LoadBalancing.activateOn(nodes, new MyMetricFactory()); // or  LoadBalancing.activate(new MyMetricFactory()); 

  // to add a node
  LoadBalancing.addNode(node);</programlisting></para>
    </section>

    <section><info><title>Technical Service</title></info>
      

      <para>In your deployment descriptor, you have to define the load
      balancing technical service as following : <programlisting xml:lang="xml">&lt;technical-service id="LoadBalancingService" class="org.objectweb.proactive.loadbalancing.LoadBalancingTS"&gt;
  &lt;arg name="MetricFactory" value="myPackage.myMetricFactory" /&gt;
&lt;/technical-service&gt;</programlisting>This service has to be applied on a
      Virtual Node : <programlisting xml:lang="xml">&lt;virtualNode name="Workers" property="multiple" technicalServiceId="LoadBalancingService"/&gt;</programlisting></para>
    </section>
  </section>

  <section><info><title>Non Migratable Objects</title></info>
    

    <para>Sometimes, active objects can't migrate : non-serializable
    attributes ...; in that case, you have to specify that these objects have
    to be ignored by the load balancing mechanism. </para>

    <para>So, these objects have to implement the interface
    org.objectweb.proactive.loadbalancing.NotLoadBalanceableObject</para>
  </section>
</chapter>
