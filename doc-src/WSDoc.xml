<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/css" href="viewDocbook.css"?>
<chapter id="WSDoc">
  <title>Exporting Active Objects and components as Web Services</title>

  <sect1 id="WS_Overwiew">
    <title>Overview</title>

    <para>This feature allows the call and monitoring of active objects and
    ProActive components from any client written in any foreign
    language.</para>

    <para>Indeed, applications written in C#, for example, cannot communicate
    with ProActive applications. We choose the web services technology that
    enable interoperability because they are based on XML and HTTP. Thus, any
    active object or component can be accessible from any enabled web service
    language.</para>
  </sect1>

  <sect1>
    <title>Principles</title>

    <para>A <emphasis role="bold">web service</emphasis> is a software entity,
    providing one or several functionnalities, that can be exposed, discovered
    and accessed over the network. Moreover, web services technology allows
    heterogenous applications to communicate and exchange data in a remotely
    way. In our case, the usefull elements, of web services are:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis role="bold">The SOAP Message</emphasis></para>

        <indexterm>
          <primary>SOAP</primary>
        </indexterm>

        <para>The SOAP message is used to exchange XML based data over the
        internet. It can be sent via HTTP and provides a serialization format
        for communicating over a network.</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">The HTTP Server</emphasis></para>

        <para>HTTP is the standard web protocol generally used over the 80
        port. In order to receive SOAP messages you need to install an HTTP
        server that will be responsible of the data transfer. This server is
        not sufficient to treat a SOAP request.</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">The SOAP Engine</emphasis></para>

        <para>A SOAP Engine is the mechanism responsible of making transparent
        the unmarshalling of the request and the marshalling of the response.
        Thus, the service developer doesn't have to worry with SOAP. In our
        case, we use Apache SOAP which is installed on a Jakarta Tomcat web
        server. Moreover, Apache SOAP contains a web based administration tool
        that permit to list, deploy and undeploy services.</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">The client</emphasis></para>

        <para>Client's role is to consume a web service. It is the producer of
        the SOAP message. The client developer doesn't have to worry about how
        the service is implemented.</para>
      </listitem>
    </itemizedlist>

    <para><figure>
        <title>This figure shows the steps when a active object is called via
        SOAP.</title>

        <mediaobject>
          <imageobject>
            <imagedata contentwidth="100"
                       fileref="webservices/provider_en.png" format="PNG"
                       width="6in" />
          </imageobject>
        </mediaobject>
      </figure></para>
  </sect1>

  <sect1>
    <title>Pre-requisite: Installing the Web Server and the SOAP
    engine</title>

    <para>First of all, you need to install the Jakarta Tomcat web server here
    and install it. You can find some documentation about it <ulink
    url="http://tomcat.apache.org/">here</ulink> .</para>

    <para>You don't really have to do a lot of installation. Just uncompress
    the archive.</para>

    <para>To start and stop the server, launch the start and the shutdown
    scripts in the bin directory.</para>
    <!--  
    <para>We also use a SOAP engine which is the Apache SOAP engine, available
    <ulink url="http://www.apache.org/dyn/closer.cgi/ws/soap/">here</ulink> .
    This SOAP engine will be responsible of locating and calling the
    service.</para>

    <para>To install Apache SOAP refer to <ulink
    url="http://ws.apache.org/soap/faq/faq_chawke.html">the server-side
    instructions.</ulink></para>

    <para>The SOAP Engine is now installed ! You can verify, after starting
    the server that you access to the welcome page of Apache SOAP at: <ulink
    url="http://localhost:8080/proactive/index.html"></ulink>.</para>

    <para>Now we have to install ProActive into this SOAP engine. For that,
    follow these steps:</para>

    <itemizedlist>
      <listitem>
        <para>Copy the ProActive.jar file into the
        $APACHE-SOAP/WEB-INF/lib/</para>
      </listitem>

      <listitem>
        <para>Replace the $TOMCAT/webapps/soap/WEB-INF/web.xml by the one
        found in <xref linkend="miscFileSrc.webservices.web.xml" />.</para>
      </listitem>
    </itemizedlist>
  
-->
</sect1>

	<para>The last part consists in generating the web archive file using the ant target called 'proActiveWar'
	and copying it under the TOMCAT/webapps directory. Tomcat will automatically uncompress and install the web application. 
	</para>

  <sect1>
    <title>Steps to expose an active object or a component as a web
    services</title>

    <para>The steps for exporting and using an active object as a web service
    are the following:</para>

    <itemizedlist>
      <listitem>
        <para>Write your active object or your component in a classic way; for
        example:</para>

        <programlisting lang="java"> A a = (A)ProActive.newActive("A", new Object [] {}); </programlisting>
      </listitem>

      <listitem>
        <para>Once the element is created and activated, deploy it onto a web
        server by using:</para>

        <itemizedlist>
          <listitem>
            <para>For an active object:</para>

            <programlisting lang="java"> <emphasis role="bold">ProActive.exposeAsWebService(Object o, String url, String urn, String [] methods); </emphasis></programlisting>

            <para>where:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="bold">o</emphasis> is the active
                object</para>
              </listitem>

              <listitem>
                <para><emphasis role="bold">url</emphasis> is the url of the
                web server; typically http://localhost:8080.</para>
              </listitem>

              <listitem>
                <para><emphasis role="bold">urn</emphasis> is the service name
                which identify the active object on the server.</para>
              </listitem>

              <listitem>
                <para><emphasis role="bold">methods</emphasis> a String array
                containing the methods name you want to make accessible. If
                this parameter is null, all the public methods will be
                exposed.</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>For a component:</para>

            <programlisting lang="java"><emphasis role="bold">Proactive.exposeComponentAsWebService(Component component, String url, String componentName);  </emphasis></programlisting>

            <para>where:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="bold">component</emphasis> is the
                component whose interfaces will be exposed as web
                services</para>
              </listitem>

              <listitem>
                <para><emphasis role="bold">url</emphasis> is the url of the
                web server; typically http://localhost:8080.</para>
              </listitem>

              <listitem>
                <para><emphasis role="bold">componentName</emphasis> is the
                name of the component. Each service available in this way will
                get a name composed by the component name followed by the
                interface name:
                <emphasis>componentName_interfaceName</emphasis></para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1>
    <title>Undeploy the services</title>

    <para>To undeploy an active object as a service, use the ProActive static
    method:</para>

    <programlisting lang="java"><emphasis role="bold">ProActive.unExposeAsWebService ( String urn, String url );  </emphasis></programlisting>

    <para>where:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis role="bold">urn</emphasis> is the service name</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">url</emphasis> the url of the server where
        the service is deployed</para>
      </listitem>
    </itemizedlist>

    <para>To undeploy a component you have to specify the component name and
    the component( needed to know the interfaces to undeploy):</para>

    <programlisting lang="java"><emphasis role="bold">ProActive.unExposeAsWebService ( String componentName , String url,  Component component);</emphasis></programlisting>
  </sect1>

  <sect1>
    <title>Accessing the services</title>

    <para>Once the active object or the interfaces component are deployed, you
    can access it via any web service enabled client (such as C#).</para>

    <para>First of all, the client will get the WSDL file matching this active
    object. This WSDL file is the 'identity card' of the service. It contains
    the web service public interfaces and its location. Generally, WSDL files
    are used to generate a proxy to the service. For example, for a given
    service, say 'compute', you can get the WSDL document at <ulink
    url="http://localhost:8080/servlet/wsdl?id=compute"></ulink>.</para>

    <para>Now that this client knows what and where to call the service, it
    will send a SOAP message to the web server, the web server looks into the
    message and perform the right call then returns the reply into another
    SOAP message to the client.</para>
  </sect1>

  <sect1>
    <title>Limitations</title>

    <para>Apache Soap supports all defined types in the SOAP 1.1
    specification. All Java primitive types are supported but it is not always
    the case for complex types. For Java Bean Objects, ProActive register them
    in the Apache SOAP mapping registry, in order to use a specific
    (de)serializer when such objects are exchanged. All is done automatically,
    you don't have to matter about the registering of the type mapping.
    However, if the methods attributes types or return types are Java Beans,
    you have to copy the beans classes you wrote into the
    <literal>$APACHE_SOAP_HOME/WEB_INF/classes</literal>.</para>
  </sect1>

  <sect1>
    <title>A simple example: Hello World</title>

    <sect2>
      <title>Hello World web service code</title>

      <para>Let's start with a simple example, an Hello world active object
      exposed as a web service:</para>

      <programlisting lang="java">public class HelloWorld implements Serializable {
   public HelloWorld () {}
   public String helloWorld (String name) {
      return "Hello world !";
   }
   public static void main (String [] args) {

    try {
        HelloWorld hw = (HelloWorld)ProActive.newActive("HelloWorld", new Object []{});
        ProActive.exposeAsWebService(hw,
        "helloWorld","http://localhost:8080", new String [] { "helloWorld" }); 

    } catch (ActiveObjectCreationException e) {
            e.printStackTrace();
    } catch (NodeException e) {
            e.printStackTrace();
    }
   }
}</programlisting>

      <para>The active object <literal>hw</literal> has been deployed as a web
      service on the web server located at
      <literal>"http://localhost:8080"</literal> . The accessible service
      method is <literal>helloWorld</literal>.</para>

      <para>Now that the server-side Web service is deployed, we can create a
      new client application in Visual Studio .NET.</para>
    </sect2>

    <sect2>
      <title>Access with Visual Studio</title>

      <para></para>

      <para>In your new Visual Studio Project:</para>

      <itemizedlist>
        <listitem>
          <para>In the Solution Explorer window, right-click References and
          click Add Web Reference.</para>
        </listitem>

        <listitem>
          <para>In the address box enter the WSDL service address, for
          example: <ulink
          url="http://localhost:8080/proactive/servlet/wsdl?id=helloWorld"></ulink>
          .When clicking the 'add reference' button, this will get the
          service's WSDL and creates the specific proxy to the service.</para>
        </listitem>

        <listitem>
          <para>Once the web reference is added, you can use the helloWorld
          service as an object and perform calls on it:</para>

          <programlisting lang="java">...
localhost.helloWorld hw = new localhost.helloWorld();
string s = hw.helloWorld ();
...</programlisting>
        </listitem>
      </itemizedlist>
    </sect2>
  </sect1>

  <sect1>
    <title>C# interoperability: an example with C3D</title>

    <sect2>
      <title>Overview</title>

      <para><ulink
      url="http://www-sop.inria.fr/oasis/ProActive/apps/c3d.html">C3D</ulink>
      is a Java benchmark application that measures the performance of a 3D
      raytracer renderer distributed over several Java virtual machines using
      ProActive. C3D is composed of several parts: the distributed engine
      (renderers) and the dispatcher that is an active objet. This dispactcher
      permits users to see the 3D scene and to collaborate. Users can send
      messages and render command to this dispatcher. This enhancement of C3D
      is to send commands to the dispatcher from any language. To perform such
      an enhancement, the Dispatcher object must be exposed as a web service
      in order to a C# client for example controls it. Only one instruction
      has been added in the main method:</para>

      <programlisting lang="java">ProActive.exposeAsWebService (dispatcher, "C3DDispatcher",
                    "http://localhost:8080",  new String [] {
                    "rotateRight", "getPicture", "rotateLeft", "rotateUp",
                    "rotateDown", "getPixels", "getPixelMax", "waitForImage",
                    "spinClock", "spinUnclock", "addRandomSphere", "resetScene",
                    "registerWSUser", "unregisterWSUser"
                });</programlisting>

      <para>Once the dispatcher is deployed as a web service, we have a WSDL
      url: <ulink
      url="http://localhost:8080/proactive/servlet/id=C3DDispactcher"></ulink>. It
      will be usefull to construct the dispatcher client.</para>
    </sect2>

    <sect2>
      <title>Access with a C# client</title>

      <para>First of all, we have to generate the service proxy following the
      steps described for the hello world access.</para>

      <para>All the SOAP calls will be managed by the generated proxy
      <literal>localhost.C3DDispatcher</literal>. <figure>
          <title>The dispatcher handling all calls</title>

          <mediaobject>
            <imageobject>
              <imagedata contentwidth="100"
                         fileref="webservices/dispatcher_en.png" format="PNG"
                         width="6in" />
            </imageobject>
          </mediaobject>
        </figure></para>
    </sect2>

    <sect2>
      <title>Dispatcher methods calls and callbacks</title>

      <para>C# client registers to the C3D dispatcher and then can send
      commands. C3D is a collaborative application. Indeed, when a client
      performs a call, all others users must be advised by the dispatcher.
      Although dispatcher can contact ProActive applications, it cannot
      communicate with other applications (it cannot initiate the
      communication). In other words, the dispacher must communicate remotely
      with an application witten in another language.</para>

      <para>The answer to this problem is to use .Net web service on the C#
      user machine. Such a web service is waiting for callback requests that
      come from dispatcher. When receiving a request, the service sends it to
      the client via a .Net Remoting shared objet. Thus, when the .Net web
      service receives a callback request, the C# client is updated thanks to
      propagated events.</para>

      <para>Here are screenshots of the user application: <figure>
          <title>The first screenshot is a classic ProActive
          application</title>

          <mediaobject>
            <imageobject>
              <imagedata contentwidth="100"
                         fileref="webservices/scc3djava.png" format="PNG"
                         width="6in" />
            </imageobject>
          </mediaobject>
        </figure> <figure>
          <title>C# application communicating via SOAP</title>

          <mediaobject>
            <imageobject>
              <imagedata contentwidth="100" fileref="webservices/scC3dcs.png"
                         format="PNG" width="6in" />
            </imageobject>

            <caption><para>The application is using the same dispatcher the
            ProActive user uses.</para></caption>
          </mediaobject>
        </figure></para>
    </sect2>

    <sect2>
      <title>Download the C# example</title>

      <para>You can find <ulink
      url="http://www-sop.inria.fr/oasis/proactive/C3DCSharp.zip">here</ulink>
      the whole C# Visual Studio .Net project. N.B: In order to run this
      project, you must install the Microsoft IIS server.</para>
    </sect2>
  </sect1>
</chapter>