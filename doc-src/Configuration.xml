<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/css" href="viewDocbook.css"?>
<chapter id="Configuration">
  <title>ProActive Basic Configuration</title>

  <sect1 >
    <title>Overview</title>

    <para>In order to get easier and more flexible configuration in ProActive,
    we introduced an xml file where all ProActive related configuration is
    located. It represents properties that will be added to the System when an
    application using ProActive is launched. Some well-known
    properties(explained after) will determine the behaviour of ProActive
    services inside a global application. That file can also contain <emphasis
    role="bold">user-defined</emphasis> properties to be used in their
    application.</para>
  </sect1>
  

  <sect1 >
    <title>How does it work?</title>

    <para>Using this file is very straightforward, since all lines must follow
    the model: &lt;prop <emphasis role="bold">key</emphasis>='somekey'
    <emphasis role="bold">value</emphasis>='somevalue'/&gt;</para>

    <para>Those properties will be set in the System using
    System.setProperty(key,value) <emphasis role="bold">if and only
    if</emphasis> this property is not already set in the System.</para>

    <para>If an application is using ProActive, that file is loaded once when
    a method is called through a ProActive 'entry point'. By 'entry point' we
    mean ProActive class, NodeFactory class, RuntimeFactory class (static
    block in all that classes).</para>

    <para>For instance calling <emphasis role="bold">ProActive.newActive or
    NodeFactory.getNode</emphasis> .... loads that file. This only occurs once
    inside a jvm.</para>

    <para>As said before this file can contain <emphasis
    role="bold">user-defined</emphasis> properties. It means that people used
    to run their application with:</para>

    <para>java .... -Dprop1=value1 -Dprop2=value2 .... -Dpropn=valuen can
    define all their properties in the ProActive configuration file
    with:</para>

    <para>&lt;prop <emphasis role="bold">key</emphasis>='prop1' <emphasis
    role="bold">value</emphasis>='value1'/&gt;</para>

    <para>&lt;prop <emphasis role="bold">key</emphasis>='prop2' <emphasis
    role="bold">value</emphasis>='value2'/&gt;</para>

    <para>...</para>

    <para>&lt;prop <emphasis role="bold">key</emphasis>='propn' <emphasis
    role="bold">value</emphasis>='valuen'/&gt;</para>
  </sect1>

  <sect1 >
    <title>Where to access this
    file?</title>

	<sect2> <title>ProActive Default Configuration file</title>
    <para>There is a default file with default ProActive options located under
    ProActive/src/org/objectweb/proactive/core/config/ProActiveConfiguration.xml.
    This file is automatically copied with the same package structure under
    the classes directory when compiling source files with the
    ProActive/compile/build facility. Hence it is included in the jar file of
    the distribution under
    org/objectweb/proactive/core/config/ProActiveConfiguration.xml (See below
    for default options).</para>
	</sect2>
	<sect2> <title>User-defined ProActive Configuration file</title>
	<para>
		It is possible for an user to override the default ProActive configuration file
		by setting properties in a file located at the following path :
	    <screen>
	     for unix users : $HOME/.proactive/ProActiveConfiguration.xml
	     for windows users : $HOME\.proactive\ProActiveConfiguration.xml  </screen>
	</para>
    </sect2>
    <sect2> <title>Alternate User Configuration file</title>

    <para>People can specify their own configuration file by running their
    application with proactive.configuration option, i.e</para>


    <para>java ... <emphasis
    role="bold">-Dproactive.configuration=pathToTheConfigFile</emphasis>. In
    that case, the given xml file is loaded. Some ProActive properties(defined
    below) are required for applications using ProActive to work, so even if
    not defined in user config file, they will be loaded programatically with
    default values. So people can just ignore the config file if they are
    happy with the default configuration or create their own file if they want
    to change ProActive properties values or add their own properties</para>

    <para>A specific tag: <emphasis
    role="bold">&lt;ProActiveUserPropertiesFile&gt;</emphasis> is provided in
     Deployment Descriptors (see <xref linkend="XML_Descriptors"/>) to notify
    remote jvms which configuration file to load once created:</para>

    <screen>&lt;jvmProcess class='org.objectweb.proactive.core.process.JVMNodeProcesss'&gt;
...
 &lt;ProActiveUserPropertiesFile&gt;
 &lt;absolutePath value='/net/home/rquilici/config.xml'/&gt;
 &lt;/ProActiveUserPropertiesFile&gt;
...
&lt;/jvmProcess&gt; </screen>
</sect2>
  </sect1>

  <sect1 >
    <title>ProActive properties</title>

    <sect2>
     <title>Required</title>

        <para><itemizedlist>
            <listitem>
              <para><emphasis
              role="bold">proactive.communication.protocol</emphasis>
              represents the communication protocol i.e the protocol, objects
              on remote JVMS are exported with. At this stage several
              protocols are supported: <emphasis role="bold">RMI(rmi),
              HTTP(http), IBIS/RMI(ibis), SSH tunneling for RMI/HTTP(rmissh),
              JINI(jini)</emphasis>. It means that once the JVM starts, Nodes,
              Active Objects that will be created on this JVM, will export
              themselves using the protocol specified in <emphasis
              role="bold">proactive.communication.protocol</emphasis>
              property. They will be reachable transparently through the given
              protocol.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">schema.validation</emphasis> . Two
              values are possible:<emphasis role="bold">true,
              false</emphasis>. If true, all xml files will be validated
              against provided schema. Default is <emphasis
              role="bold">true</emphasis></para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">proactive.future.ac</emphasis> . Two
              values are possible:<emphasis role="bold">true,
              false</emphasis> If 'true' is chosen, Automatic Continuations
              <indexterm><primary>Automatic Continuation</primary><secondary>proactive.future.ac</secondary></indexterm>
              are activated (see <xref linkend="AC"/>). Default is <emphasis
              role="bold">true</emphasis></para>
            </listitem>
          </itemizedlist></para>

        <para>Note that if not specified those properties are set
        programmatically with the default value.</para>
        
      </sect2>
      <sect2>
        <title>Fault-tolerance properties</title>

        <para>Note that those properties should not be altered if the
        programmer uses deployment descriptor files. See 
        <xref linkend="faultTolerance"/> and more specifically
        <xref linkend="faultTolerance_html_configuration"/>
        for more details.</para>

        <itemizedlist>
          <listitem>
            <para><emphasis role="bold">proactive.ft</emphasis> . Two values
            are possible: <emphasis role="bold">true, false</emphasis>. If
            true, the fault-tolerance is enable and a set of servers must be
            defined with the following properties. Default value is <emphasis
            role="bold">false</emphasis>.</para>
          </listitem>

          <listitem>
            <para><emphasis
            role="bold">proactive.ft.server.checkpoint</emphasis> is the URL
             of the checkpoint server.</para>
          </listitem>

          <listitem>
            <para><emphasis
            role="bold">proactive.ft.server.location</emphasis> is the URL of
             the location server.</para>
          </listitem>

          <listitem>
            <para><emphasis
            role="bold">proactive.ft.server.recovery</emphasis> is the URL of
             the recovery process .</para>
          </listitem>

          <listitem>
            <para><emphasis
            role="bold">proactive.ft.server.resource</emphasis> is the URL of
             the resource server.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">proactive.ft.server.global</emphasis>
             is the URL of the global server.
            If this property is set, all others <emphasis
            role="bold">proactive.fr.server.*</emphasis> are ignored.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">proactive.ft.ttc</emphasis> is the
             value of the Time To Checkpoint counter, in seconds. 
             The default value is 30 sec.</para>
          </listitem>
        </itemizedlist>
       </sect2>
       
       <sect2 id="Configuration_html_p2p_properties" >
        <title> Peer-to-Peer properties </title>

        <para><itemizedlist>
            <listitem>
              <para><emphasis role="bold">proactive.p2p.acq</emphasis> is the
              communication protocol that's used to communicate with this P2P
              Service. All ProActive communication protocols are supported:
              rmi, http, etc. Default is rmi.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">proactive.p2p.port</emphasis>
              represents the port number on which to start the P2P Service.
              Default is 2410. The port is used by the communication
              protocol.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">proactive.p2p.noa: Number Of
              Acquaintances (NOA)</emphasis> is the minimal number of peers
              one peer needs to know to keep up the infrastructure. By
              default, its value is 10 peers.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">proactive.p2p.ttu: Time To Update
              (TTU)</emphasis> each peer sends an heart beat to its
              acquaintances. By default, its value is 1 minutes.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">proactive.p2p.ttl: Time To Live
              (TTL)</emphasis> represents messages live time in hops of JVMs
              (node). By default, its value is 5 hops.</para>
            </listitem>

            <listitem>
              <para><emphasis
              role="bold">proactive.p2p.msg_capacity</emphasis> is the maximum
              memory size to stock message UUID. Default value is 1000
              messages UUID.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">proactive.p2p.expl_msg</emphasis> is
              the percentage of agree response when peer is looking for
              acquaintances. By default, its value is 66%.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">proactive.p2p.booking_max</emphasis>
              uses during booking a shared node. It's the maximum time in
              millisecond to create at less an active object in the shared
              node. After this time and if no active objects are created the
              shared node will leave and the peer which gets this shared node
              will be not enable to use it more. Default is 3 minutes.</para>
            </listitem>

            <listitem>
              <para><emphasis
              role="bold">proactive.p2p.nodes_acq_to</emphasis> uses with
              descriptor file. It is the timeout in milliseconds for nodes
              acquisition. The default value is 3 minutes.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">proactive.p2p.lookup_freq</emphasis>
              also uses with descriptor file. It is the lookup frequency in
              milliseconds for re-asking nodes. By default, it's value is 30
              seconds.</para>
            </listitem>

            <listitem>
              <para><emphasis
              role="bold">proactive.p2p.multi_proc_nodes</emphasis> if true
              deploying one shared nodes by CPU that means the p2p service
              which is running on a bi-pro will share 2 nodes, else only one
              node is shared independently of the number of CPU. By default,
              it's value is true, i.e. 1 shared node for 1 CPU.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">proactive.p2p.xml_path</emphasis> is
              the XML deployment descriptor file path for sharing nodes more
              than a single node.</para>
            </listitem>
          </itemizedlist></para>
      </sect2>

      <sect2>
        <title>rmi ssh properties</title>
    <para>The following properties are specific to the rmissh protocol 
     (see <xref linkend="SSHTunneling"/>).</para>

    <para><itemizedlist>
        <listitem>
          <para><emphasis role="bold">proactive.ssh.port</emphasis>: the port
          number on which all the ssh daemons to which this JVM must connect
          to are expected to listen. If this property is not set, the default
          is 22.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">proactive.ssh.username</emphasis>: the
          username which will be used during authentication with all the ssh
          daemons to which this JVM will need to connect to. If this property
          is not set, the default is the user.name java property.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">proactive.ssh.known_hosts</emphasis>: a
          filename which identifies the file which contains the traditional
          ssh known_hosts list. This list of hosts is used during
          authentication with each ssh daemon to which this JVM will need to
          connect to. If the host key does not match the one stored in this
          file, the authentication will fail. If this property is not set, the
          default is System.getProperty ('user.home') +
          '/.ssh/known_hosts'</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">proactive.ssh.key_directory</emphasis>:
          a directory which is expected to contain the pairs of public/private
          keys used during authentication. the private keys must not be
          encrypted. The public keys filenames must match '*.pub'. Private
          keys are ignored if their associated public key is not present. If
          this property is not set, the default is System.getProperty
          ('user.home') + '/.ssh/'</para>
        </listitem>

        <listitem>
          <para><emphasis
          role="bold">proactive.tunneling.try_normal_first</emphasis>: if this
          property is set to 'yes', the tunneling code always attempts to make
          a direct rmi connection to the remote object before tunneling. If
          this property is not set, the default is not to make these
          direct-connection attempts. This property is especially useful if
          you want to deploy a number of objects on a LAN where only one of
          the hosts needs to run with the rmissh protocol to allow hosts
          outside the LAN to connect to this frontend host. The other hosts
          located on the LAN can use the try_normal_first property to avoid
          using tunneling to make requests to the LAN frontend.</para>
        </listitem>

        <listitem>
          <para><emphasis
          role="bold">proactive.tunneling.connect_timeout</emphasis>: this
          property specifies how long the tunneling code will wait while
          trying to establish a connection to a remote host before declaring
          that the connection failed. If this property is not set, the default
          value is 2000ms.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">proactive.tunneling.use_gc</emphasis>:
          if this property is set to 'yes', the client JVM does not destroy
          the ssh tunnels are soon as they are not used anymore. They are
          queued into a list of unused tunnels which can be reused. If this
          property is not set or is set to another value, the tunnels are
          destroyed as soon as they are not needed anymore by the JVM.</para>
        </listitem>

        <listitem>
          <para><emphasis
          role="bold">proactive.tunneling.gc_period</emphasis>: this property
          specifies how long the tunnel garbage collector will wait before
          destroying a unused tunnel. If a tunnel is older than this value, it
          is automatically destroyed. If this property is not set, the default
          value is 10000ms.</para>
        </listitem>
      </itemizedlist></para>
    </sect2>
    
    <sect2>

    <title>Other properties</title>

        <para><itemizedlist>
            <listitem>
              <para><emphasis role="bold">proactive.rmi.port</emphasis>
              represents the port number on which to start the RMIRegistry.
              Default is 1099. If an RMIRegistry is already running on the
              given port, jms use the existing registry</para>
            </listitem>

            <listitem>
              
             <indexterm><primary>Http</primary><secondary>port</secondary></indexterm>

             <para><emphasis role="bold">proactive.http.port</emphasis>
              represents the port number on which to start the HTTP server.
              Default is 2010. If this port is occupied by another
              application, the http server starts on the first free port(given
              port is incremented transparently)</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">proactive.useIPaddress</emphasis> if
              set to <emphasis role="bold">true</emphasis>, IP adresses will
              be used instead of machines names. This property is particularly
              usefull to deal with sites that do not host a DNS</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">proactive.hostname</emphasis> when
              this property is set, the host name on which the jvm is started
              is given by the value of the property. This property is
              particularly usefull to deal with machines with two network
              interfaces</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">proactive.locationserver</emphasis>
              represents the location server class to instantiate when using
              Active Objects with Location Server</para>
            </listitem>

            <listitem>
              <para><emphasis
              role="bold">proactive.locationserver.rmi</emphasis> represents
              the url under which the Location Server is registered in the
              RMIRegistry</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">fractal.provider</emphasis> This
              property defines the bootstrap component for the Fractal
              component model</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">proactive.classloader</emphasis>
              runtimes created with this property enabled fetch missing
              classes using a special mechanism
              (see the 
              
              <!-- This url can only work in the html generated files: in pdf there's no ".." -->
              <ulink os="html" url="../api/org/objectweb/proactive/core/classloader/package-summary.html">
              classloader package javadoc</ulink>
              <phrase os="pdf">org.objectweb.proactive.core.classloader javadoc</phrase>). 
              This is an alternative to RMI dynamic class
              downloading, useful for instance when performing hierarchical
              deployment.</para>
            </listitem>

            <listitem>
              <para>Note that as mentionned above, user-defined properties can
              be added.</para>
            </listitem>
          </itemizedlist></para>
        </sect2>
  </sect1>

  <sect1 >
    <title>Configuration file example</title>

    <para>A configuration file could have following structure:</para>

    <example>
     <title>A configuration file example</title>
    <screen>&lt;ProActiveUserProperties&gt;
 &lt;properties&gt;
   &lt;prop <emphasis role="bold">key</emphasis>='schema.validation' <emphasis
        role="bold">value</emphasis>='disable'/&gt;
   &lt;prop <emphasis role="bold">key</emphasis>='proactive.future.ac' <emphasis
        role="bold">value</emphasis>='true'/&gt;
   &lt;prop <emphasis role="bold">key</emphasis>='proactive.communication.protocol' <emphasis
        role="bold">value</emphasis>='rmi'/&gt;
   &lt;prop <emphasis role="bold">key</emphasis>='proactive.rmi.port' <emphasis
        role="bold">value</emphasis>='2001-2005'/&gt;
   ....
   &lt;prop <emphasis role="bold">key</emphasis>='myprop' <emphasis role="bold">value</emphasis>='myvalue'/&gt;
 ....
 &lt;/properties&gt;
&lt;/ProActiveUserProperties&gt;</screen>
</example>

    <note><para>
      In order to have ProActive parse correctly the document, the following are mandatory:
      <itemizedlist>
				<listitem><para> the <emphasis role="bold">ProActiveUserProperties</emphasis> tag, </para></listitem>
				<listitem><para> the <emphasis role="bold">properties</emphasis> tag,  </para></listitem>
				<listitem><para> and the model: &lt;prop <emphasis role="bold">key</emphasis>='somekey' 
								<emphasis role="bold">value</emphasis>='somevalue'/&gt;  </para></listitem>
     </itemizedlist>
       
     </para></note>
  </sect1>
</chapter>
