<!-- Converted by db4-upgrade version 1.0 -->

<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="MOP"><info><title>MOP: Metaobject Protocol</title></info>
  

  <!--  File: /home/irosenbe/PA_new_doc/docbook-tuto/MOP.html  -->

  <section><info><title>Implementation: a Meta-Object
    Protocol</title></info>
    

    <para>ProActive is built on top of a metaobject protocol (MOP) that
    permits reification of method invocation and constructor call. As this MOP
    is not limited to the implementation of our transparent remote objects
    library, it also provides an open framework for implementing powerful
    libraries for the Java language.</para>

    <para>As for any other element of ProActive, this MOP is entirely written
    in Java and does not require any modification or extension to the Java
    Virtual Machine, as opposed to other metaobject protocols for Java
    {Kleinoeder96}. It makes extensive use of the Java Reflection API, thus
    requiring JDK 1.1 or higher. JDK 1.2 is required in order to suppress
    default Java language access control checks when executing reified
    non-public method or constructor calls.</para>
  </section>

  <section><info><title>Principles</title></info>
    

    <para>If the programmer wants to implement a new metabehavior using our
    metaobject protocol, he or she has to write both a concrete (as opposed to
    abstract) class and an interface. The concrete class provides an
    implementation for the metabehavior he or she wants to achieve while the
    interface contains its declarative part.</para>

    <para>The concrete class implements interface <emphasis role="bold">Proxy</emphasis> and provides an implementation for the given
    behavior through the method <emphasis role="bold">reify</emphasis>:</para>

    
      <para><programlisting xml:lang="java"> public Object reify (MethodCall c) throws Throwable; </programlisting></para>
    

    <para>This method takes a reified call as a parameter and returns the
    value returned by the execution of this reified call. Automatic wrapping
    and unwrapping of primitive types is provided. If the execution of the
    call completes abruptly by throwing an exception, it is propagated to the
    calling method, just as if the call had not been reified.</para>

    <para>The interface that holds the declarative part of the metabehavior
    has to be a subinterface of <literal>Reflect</literal> (the root interface
    for all metabehaviors implemented using ProActive). The purpose of this
    interface is to declare the name of the proxy class that implements the
    given behavior. Then, any instance of a class implementing this interface
    will be automatically created with a proxy that implements this behavior,
    provided that this instance is not created using the standard
    <literal>new</literal> keyword but through a special static method:
    <literal>MOP.newInstance</literal>. This is the only required modification
    to the application code. Another static method,
    <literal>MOP.newWrapper</literal>, adds a proxy to an already-existing
    object; the <literal>turnActive</literal> function of ProActive, for
    example, is implemented through this feature.</para>
  </section>

  <section><info><title>Example of a different
    metabehavior: EchoProxy</title></info>
    

    <para>Here's the implementation of a very simple yet useful metabehavior:
    for each reified call, the name of the invoked method is printed out on
    the standard output stream and the call is then executed. This may be a
    starting point for building debugging or profiling environments.</para>

    
      <para><programlisting xml:lang="java">class EchoProxy extends Object implements Proxy {
  // here are constructor and variables declaration
  // [...]
  public Object reify (MethodCall c) throws Throwable {
      System.out.println (c.getMethodName());
      return c.execute (targetObject);
  }
}
interface Echo extends Reflect {
  public String PROXY_CLASS= 'EchoProxy';
}</programlisting></para>
    

    <section><info><title>Instantiating with the metabehavior</title></info>
      

      <para>Instantiating an object of any class with this metabehavior can be
      done in three different ways: instantiation-based, class-based or
      object-based. Let's say we want to instantiate a
      <literal>Vector</literal> object with an <literal>Echo</literal>
      behavior.</para>

      <itemizedlist>
        <listitem>
          <para>Standard Java code would be:</para>

          <programlisting xml:lang="java"> Vector v = new Vector(3); </programlisting>
        </listitem>

        <listitem>
          <para>ProActive code, with instantiation-based declaration of the
          metabehavior (the last parameter is <literal>null</literal> because
          we do not have any additional parameter to pass to the
          proxy):</para>

          <programlisting xml:lang="java">  Object[] params = {new Integer (3)};
  Vector v = (Vector) MOP.newInstance('Vector', params, 'EchoProxy', null);</programlisting>
        </listitem>

        <listitem>
          <para>with class-based declaration:</para>

          <programlisting xml:lang="java">  public class MyVector extends Vector implements Echo {}
  Object[] params = {new Integer (3)} ;
  Vector v = (Vector) MOP.newInstance('Vector', params, null);</programlisting>
        </listitem>

        <listitem>
          <para>with object-based declaration:</para>

          <programlisting xml:lang="java">  Vector v = new Vector (3);
  v=(Vector) MOP.newWrapper('EchoProxy',v);</programlisting>

          <para>This is the only way to give a metabehavior to an object that
          is created in a place where we cannot edit source code. A typical
          example could be an object returned by a method that is part of an
          API distributed as a JAR file, without source code. Please note
          that, when using <literal>newWrapper</literal>, the invocation of
          the constructor of the class <literal>Vector</literal> is not
          reified.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section><info><title>The Reflect interface</title></info>
    

    <para>All the interfaces used for declaring
    <emphasis>metabehaviors</emphasis> inherit directly or indirectly from
    <literal>Reflect</literal>. This leads to a hierarchy of metabehaviors
    such as shown in the figure below.</para>

    <para><figure><info><title>Metabehavior hierarchy</title></info>
        

        <mediaobject>
          <imageobject>
            <imagedata scalefit="1" width="100%" contentdepth="100%"  fileref="images/reflectInterfaceDiagram.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure></para>

    <para><emphasis role="bold">Reflect Interface and sub-interfaces
    diagram</emphasis></para>

    <para>Note that <literal>ImplicitActive</literal> inherits from
    <literal>Active</literal> to highlight the fact that implicit
    synchronization somewhere always relies on some hidden explicit mechanism.
    Interfaces inheriting from <literal>Reflect</literal> can thus be
    logically grouped and assembled using multiple inheritance in order to
    build new metabehaviors out of existing ones.</para>
  </section>

  <section><info><title>Limitations</title></info>
    

    <para>Due to its commitment to be a 100% Java library, the MOP has a few
    limitations:</para>

    <itemizedlist>
      <listitem>
        <para>Calls sent to instances of final classes (which includes all
        arrays) cannot be reified.</para>
      </listitem>

      <listitem>
        <para>Primitive types cannot be reified because they are not instance
        of a standard class.</para>
      </listitem>

      <listitem>
        <para>Final classes (which includes all arrays) cannot be reified
        because they cannot be subclassed.</para>
      </listitem>
    </itemizedlist>
  </section>
</chapter>
