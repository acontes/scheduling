<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/css" href="../viewDocbook.css"?>
<chapter id="adl">
    <title>Architecture Description Language</title>
    <indexterm significance="preferred">
        <primary>ADL</primary>
        <secondary>definition</secondary>
    </indexterm>
    <para></para>
    <para>
        The Architecture Description Language (ADL) is used to configure
        and deploy component systems. The architecture of the system is
        described in a normalized XML file.
    </para>
    <para>
        <emphasis role="bold">The ADL has been updated</emphasis>
        and is now an extension of the standard Fractal ADL, allowing to
        reuse ProActive-specific features such as distributed deployment
        using deployment descriptors.
    </para>
    <para>
        The distributed deployment facilities offered by ProActive are
        reused, and the notion of virtual node is integrated in the
        component ADL. For this reason, the components ADL has to be
        associated with a deployment descriptor (this is done at parsing
        time: both files are given to the parser).
    </para>
    <para>
        One should refer to the
        <ulink
            url="http://fractal.objectweb.org/tutorials/adl/index.html">
            Fractal ADL tutorial
        </ulink>
        for more detailed information about the ADL. Here is a short
        overview, and a presentation of some added features.
    </para>
    <para>
        Note that because this ADL is based on the Fractal ADL, it
        requires the following libraries (included in the /lib directory
        of the ProActive distribution): fractal-adl.jar, dtdparser.jar,
        ow_deployment_scheduling.jar
    </para>
    <sect1>
        <title>Overview</title>
        <para>
            Components are defined in
            <emphasis role="bold">definition</emphasis>
            files, which are .fractal files. The syntax of the document
            is validated against a DTD retrieved from the classpath
        </para>
        <screen>
            classpath://org/objectweb/proactive/core/component/adl/xml/proactive.dtd
        </screen>
        <para>
            The
            <emphasis role="bold">definition</emphasis>
            element has a name (which must be the same name that the
            file's) and inheritance is supported through the attribute
            'extends':
        </para>
        <screen>
            definition
            name='org.objectweb.proactive.examples.components.helloworld.hell
            oworld-distributed-wrappers'
        </screen>
        <para>
            The exportedVirtualNodes elements is described later in this
            section
        </para>
        <para>
            Components can be specified and created in this definition,
            and these components can themselves be defined in other
            definition files:
        </para>
        <screen>
            component name='client-wrapper'
            definition='org.objectweb.proactive.examples.c
            omponents.helloworld.ClientType'
        </screen>
        <para>
            Nesting is allowed for composite components and is done by
            adding other 'component' elements.
        </para>
        <indexterm>
            <primary>Binding</primary>
            <secondary>adl</secondary>
        </indexterm>
        <para>
            The
            <emphasis role="bold">binding</emphasis>
            element specifies bindings between interfaces of components
            ', and specifying 'this' as the name of the component refers
            to the current enclosing component.
        </para>
        <screen>binding client='this.r' server='client.r'</screen>
        <para>
            The
            <emphasis role="bold">controller</emphasis>
            elements can have the following 'desc' values: 'composite',
            'parallel' or 'primitive'. A parallel component and the
            components it contains should be type-compatible
        </para>
        <para>
            Primitive components specify the
            <emphasis role="bold">content</emphasis>
            element, which indicates the implementation class containing
            the business logic for this component:
        </para>
        <screen>
            content
            class='org.objectweb.proactive.examples.components.helloworld.ClientImpl'
        </screen>
        <para>
            The
            <emphasis role="bold">virtual-node</emphasis>
            element offers distributed deployment information. It can be
            exported and composed in the exportedVirtualNodes element.
        </para>
        <para>
            The component will be instantiated on the virtual node it
            specified (or the one that it exported). For a composite or
            a parallel component, it means it will be instantiated on
            the (first if there are several nodes mapped) node of the
            virtual node. For a primitive component, if the virtual node
            defines several nodes (cardinality='multiple'), there will
            be as many instances of the primitive component as there are
            underlying nodes. Each of these instances will have a
            suffixed name looking like:
            <screen>primiveComponentName-cyclicInstanceNumber-n</screen>
            where primitiveComponentName is the name defined in the ADL.
            This automatic replication is used in the parallel
            components.
        </para>
        <screen>
            virtual-node name='client-node' cardinality='single'
        </screen>
        <para>
            The syntax is similar to the standard Fractal ADL, and the
            parsing engine has been extended. Features specific to
            ProActive are:
        </para>
        <itemizedlist>
            <listitem>
                <para>
                    Virtual nodes have a cardinality property: either
                    'single' or 'multiple'. When 'single', it means the
                    virtual node in the deployment descriptor should
                    contain 1 node ; when 'multiple', it means the
                    virtual node in the deployment descriptor should
                    contain more than 1 node.
                </para>
            </listitem>
            <listitem>
                <para>
                    Virtual nodes can be
                    <emphasis role="bold">exported</emphasis>
                    and
                    <emphasis role="bold">composed</emphasis>
                    .
                </para>
            </listitem>
            <listitem>
                <para>Template components are not handled.</para>
            </listitem>
            <listitem>
                <para>
                    The controller description includes 'parallel' as a
                    valid attribute.
                </para>
            </listitem>
            <listitem>
                <para>
                    The validating DTD has to be specified as:
                    classpath://org/objectweb/proactive/core/component/adl/xml/proactive.dtd
                </para>
            </listitem>
        </itemizedlist>
    </sect1>
    <sect1>
        <title>Example</title>
        <para>
            The easiest way to understand the ADL is to see an example (
            <xref linkend="HelloWorldADLFiles" />
            ). It corresponds to the helloworld example described later
            in this document.
        </para>
        <para></para>
    </sect1>
    <sect1>
        <title>Exportation and composition of virtual nodes</title>
        <para>
            Components are deployed on the virtual node that is
            specified in their definition ; it has to appear in the
            deployment descriptor
            <emphasis role="underline">unless</emphasis>
            this virtual node is exported. In this case, the name of the
            exported virtual node should appear in the deployment
            descriptor, unless this exported virtual node is itself
            exported.
        </para>
        <para>
            When exported, a virtual node can take part in the
            composition of other exported virtual nodes. The idea is to
            further extend reusability of existing (and packaged,
            packaging being a forthcoming feature of Fractal)
            components.
        </para>
        <para>
            In the example, the component defined in
            helloworld-distributed-wrappers.fractal exports the virtual
            nodes VN1 and VN2:
        </para>
        <screen><![CDATA[exportedVirtualNodes
 exportedVirtualNode name='VN1'
  composedFrom
   composingVirtualNode component='client' name='client-node'
  /composedFrom
 /exportedVirtualNode
 exportedVirtualNode name='VN2'
  composedFrom
   composingVirtualNode component='server' name='server-node'/
  /composedFrom
 /exportedVirtualNode
/exportedVirtualNodes]]></screen>
        <para>
            VN1 is composed of the exported virtual node 'client-node'
            from the component named client
        </para>
        <para>
            In the definition of the client component
            (ClientImpl.fractal), we can see that client-node is an
            exportation of a virtual node which is also name
            'client-node':
        </para>
        <screen><![CDATA[exportedVirtualNodes
 exportedVirtualNode name='client-node'
   composedFrom
     composingVirtualNode component='this' name='client-node'/
   /composedFrom
 /exportedVirtualNode
/exportedVirtualNodes
...
virtual-node name='client-node' cardinality='single'/]]></screen>
        <para>
            Although this is a simplistic example, one should foresee a
            situation where ClientImpl would be a prepackaged component,
            where its ADL could not be modified ; the exportation and
            composition of virtual nodes allow to adapt the deployment
            of the system depending on the existing infrastructure.
            Colocation can be specified in the enclosing component
            definition (helloworld-distributed-wrappers.fractal):
        </para>
        <screen><![CDATA[exportedVirtualNodes
 exportedVirtualNode name='VN1'
  composedFrom
   composingVirtualNode component='client' name='client-node'
   composingVirtualNode component='server' name='server-node'/
  /composedFrom
 /exportedVirtualNode
/exportedVirtualNodes]]></screen>
        <para>
            As a result, the client and server component will be
            colocated / deployed on the same virtual node. This can be
            profitable if there is a lot of communications between these
            two components.
        </para>
        <para>
            When specifying 'null' as the name of an exported virtual
            node, the components will be deployed on the current virtual
            machine. This can be useful for debugging purposes.
        </para>
    </sect1>
    <sect1 id="adl_html_usage">
        <title>Usage</title>
        <para>
            ADL definitions correspond to component factories. ADL
            definition can be used directly:
            <programlisting lang="java"><![CDATA[Factory factory = org.objectweb.proactive.core.component.adl.FactoryFactory.getFactory();
      Map context = new HashMap();
      Component c = (Component) factory.newComponent("myADLDefinition",context);]]></programlisting>
        </para>
        <para>
            It is also possible to use the launcher tool, which parses
            the ADL, creates a corresponding component factory, and
            instantiates and assembles the components as defined in the
            ADL, is started from the
            <literal>
                org.objectweb.proactive.core.component.adl.Launcher
            </literal>
            class:
        </para>
        <screen><![CDATA[Launcher [-java|-fractal] <definition> [ <itf> ] [deployment-descriptor])]]></screen>
        <para>
            where [-java|-fractal] comes from the Fractal ADL Launcher
            (put -fractal for ProActive components, this will be made
            optional for ProActive components in the next release),
            &lt;definition&gt; is the name of the component to be
            instantiated and started, &lt;itf&gt; is the name of its
            Runnable interface, if it has one, and
            &lt;deployment-descriptor&gt; the location of the ProActive
            deployment descriptor to use. It is also possible to use
            this class directly from its static main method.
        </para>
    </sect1>
</chapter>
