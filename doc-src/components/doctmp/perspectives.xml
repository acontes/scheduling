<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="perspectives"><info><title>Component perspectives: a support for advanced research</title></info>
  

  <para>The ProActive/Fractal framework is a functional and flexible
  implementation of the Fractal API and model. One can configure and deploy a
  system of distributed components, including Grids. The framework also
  proposes extensions for collective interactions (gathercast and multicast
  interfaces), allocation configuration through virtual nodes extensions, and
  some optimizations.</para>

  <para>It is now a mature framework for developing Grid applications, and as
  such it is a basis for experimenting new research paths.</para>

  <section><info><title>Dynamic reconfiguration</title></info>
    

    <para>One of the challenges of Grid computing is to handle changes in the
    execution environments, which are not predictable in systems composed of
    large number of distributed components on heterogeneous environments. For
    this reason, the system needs to be dynamically reconfigurable, and must
    exhibit autonomic properties.</para>

    <para><emphasis>Simple and deterministic</emphasis> dynamic
    reconfiguration is a real challenge in systems that contain hierarchical
    components that feature their own activities and that communicate
    asynchronously.</para>

    <para>The <emphasis>autonomic computing</emphasis> paradigm is related to
    this challenge because is consists of building applications out of
    self-managed components. Components which are self-managed are able to
    monitor their environment and adapt to it by automatically optimizing and
    reconfiguring themselves. The resulting systems are autonomous and
    automatically fulfill the needs of the users, but the complexity of
    adaptation is hidden to them. Autonomicity of components represents a key
    asset for large scale distributed computing. We are also</para>
  </section>

  <section><info><title>Model-checking</title></info>
    

    <para>Encapsulation properties, components with configurable activities,
    and system description in ADL files provide safe basis for model checking
    of component systems.</para>

    <para>For instance:</para>

    <orderedlist>
      <listitem>
        <para>Behavioral information on components can be specified in extended ADL files.</para>
      </listitem>

      <listitem>
        <para>Automatas can be generated from behavioral information and structural description.</para>
      </listitem>

      <listitem>
        <para>Model checking tools are used to verify the automatas.</para>
      </listitem>
    </orderedlist>

    <para>The <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www-sop.inria.fr/oasis/Vercors/">Vercors</link> platform
    investigates such kinds of scenarii.</para>
  </section>

  <section><info><title>Pattern-based deployment</title></info>
    

    <para>Distributed computational applications are designed by defining a
    functional or do- main decomposition, and these decompositions often
    present structural similarities (master-slave, 2D-Grid, pipeline
    etc.).</para>

    <para>In order to facilitate the design of complex systems with large
    number of entities and recurring similar configurations, we plan to
    propose a mechanism for defining parameterizable assembly patterns in the
    Fractal ADL, particularly for systems that contain parameterized numbers
    of identical components.</para>
  </section>

  <section><info><title>GIDE</title></info>
    
  </section>
</chapter>
