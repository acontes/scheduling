<!-- Converted by db4-upgrade version 1.0 -->

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
         xml:id="ScilabDoc">
    <info>
        <title>Interface with Matlab/Scilab</title>
    </info>


    <section xml:id="SciMat_Overwiew">
        <info>
            <title>Presentation</title>
        </info>
        <section xml:id="SciMat_Motivations">
            <info>
                <title>Motivations</title>
            </info>
            <para>
                <emphasis>Scilab</emphasis>
                is a scientific software for numerical computations.
                Developed since 1990 by researchers from INRIA and ENPC, it
                is now maintained and developed by Scilab Consortium since
                its creation in May 2003. Scilab includes hundreds of
                mathematical functions with the possibility to add
                interactively programs from various languages (C,
                Fortran...). It has sophisticated data structures (including
                lists, polynomials, rational functions, linear systems...),
                an interpreter and a high level programming language. Scilab
                works on most Unix systems (including GNU/Linux) and Windows
                (9X/2000/XP).
            </para>

            <para>
                <emphasis>Matlab</emphasis>
                is a numerical computing environment and programming
                language. Created by The MathWorks, Matlab allows easy
                matrix manipulation, plotting of functions and data,
                implementation of algorithms, creation of user interfaces,
                and interfacing with programs in other languages. Although
                it specializes in numerical computing, an optional toolbox
                interfaces with the Maple symbolic engine, allowing it to be
                part of a full computer algebra system.

                As of 2004, MATLAB was used by more than one million people
                in industry and academia.
            </para>

            <para>
                The goal of the ProActive Interface is to equip Scilab and
                Matlab with a generic interface to Grid computing. This
                extension allows the deployment of Scilab/Matlab instances
                on several nodes of the grid (and to use these instances
                like computing engines) and submitting of Scilab/Matlab
                tasks over the grid. These engines are monitored by a
                central ProActive API. A natural condition is to deploy an
                application (based on this interface) strictly on hosts
                where the Scilab or Matlab software is installed.
            </para>
        </section>
        <section xml:id="SciMat_Features">
            <info>
                <title>Features</title>
            </info>
            <para>
                The interface with Matlab and Scilab inside ProActive comes in three different ways:
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        For both Scilab and Matlab , a GUI that can launch remote Matlab or Scilab scripts and visualize
                        results (without dependencies between tasks or transfering results from one task to the other).
                        The usage of this application is explained in the following section :
                        <xref linkend="SciMat_GUI"/>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        For both Scilab and Matlab , the ability to write simple Matlab or Scilab tasks workflows and
                        submit these workflows to the ProActive Scheduler (with the possibility to define dependencies
                        between tasks and transfering results from one task to the other). The usage of this feature is
                        explained in chapters :
                        <xref linkend="ProActive_Scheduler_Matlab"/>
                        and
                        <xref linkend="ProActive_Scheduler_Scilab"/>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        For Matlab only, a parallelization facility directly integrated in the Matlab environment (such
                        as Mathworks Parallel Computing Toolbox). The usage of this feature is explained below in this
                        chapter :
                        <xref linkend="SciMat_Embedded"/>
                    </para>
                </listitem>
            </itemizedlist>
        </section>
    </section>


    <section xml:id="SciMat_GUI">
        <info>
            <title>
                Graphical User Interface (Matlab/Scilab Grid ToolBox)
            </title>
        </info>


        <para>
            This interface allows to launch remote Matlab/Scilab scripts (m or sci files), and visualize results
            textually. Before using it a couple of installation and configuration steps are required,for both Matlab and
            Scilab use.
        </para>

        <section xml:id="SciMat_Scilab_Installation">
            <info>
                <title>Installation for Scilab</title>
            </info>
            <para>
                This ProActive interface supports Scilab's release 4.1.2 and
                manipulates the following types: Double, String, Double
                Matrix, String Matrix, Complex, Complex Matrix.
            </para>

            <para>
                First, scilab needs to be installed or compiled, the instructions are in the file
                PROACTIVE/scripts/unix/scilab/README :
            </para>

            <para>
                <programlisting xml:lang="txt">
                    <textobject>
                        <textdata fileref="../scripts/unix/scilab/README"/>
                    </textobject>
                </programlisting>
            </para>
        </section>
        <section xml:id="SciMat_Matlab_Installation">
            <info>
                <title>Installation for Matlab</title>
            </info>

            <para>
                This ProActive interface supports many Matlab releases (from
                7.1 on) and manipulates the following types: Double
                Matrixes, String Matrixes, Complex Matrixes, Integer
                Matrixes, Cells and Structs.
            </para>

            <para>
                For Matlab use, Matlab's link to Java (from the
                <link xlink:href="http://ptolemy.eecs.berkeley.edu/ptolemyII/index.htm">ptolemy</link>
                project
                ) needs to be compiled, the instructions for compiling it
                are described in the file PROACTIVE/scripts/unix/matlab/README :
            </para>

            <programlisting xml:lang="txt">
                <textobject>
                    <textdata fileref="../scripts/unix/matlab/README"/>
                </textobject>
            </programlisting>
        </section>
        <section xml:id="SciMat_Configuration">
            <info>
                <title>Configuration of the GUI</title>
            </info>

            <para>
                For both Scilab and Matlab, a configuration step is required, this step is described
                in PROACTIVE/scripts/unix/scilab/README :
            </para>
            <programlisting xml:lang="txt">
                <textobject>
                    <textdata fileref="../scripts/unix/scilab/README_conf"/>
                </textobject>
            </programlisting>


        </section>

        <section>
            <info>
                <title>Launching Matlab/Scilab Grid ToolBox</title>
            </info>


            <para>
                To launch the application, you have to execute the
                script:
            </para>

            <para>On Unix:</para>

            <screen>cd scripts/unix scilab.sh</screen>

            <para>On Windows:</para>

            <screen>cd scripts\windows scilab.bat</screen>

            <para>
                if you use a local version of Matlab or Scilab, you must
                declare the environment variables in the file:
            </para>

            <screen>scripts/[unix|windows]/scilab_env.[sh|bat]</screen>

            <para>
                Once the application is started, the main frame is
                displayed. This frame is composed in three parts:
            </para>

            <itemizedlist>
                <listitem>
                    <para>The tree of Matlab/Scilab engines .</para>
                </listitem>

                <listitem>
                    <para>
                        The ltables of pending, running, and terminated
                        tasks.
                    </para>
                </listitem>

                <listitem>
                    <para>
                        The text area to display the log of user
                        operations.
                    </para>
                </listitem>
            </itemizedlist>

            <figure>
                <info>
                    <title>Main frame</title>
                </info>


                <mediaobject>
                    <imageobject>
                        <imagedata scalefit="1" width="100%" contentdepth="100%"
                                   fileref="scilab/pics/ScilabToolBox.png"/>
                    </imageobject>
                </mediaobject>
            </figure>
        </section>

        <section>
            <info>
                <title>Deployment of the application</title>
            </info>


            <para>
                The first step is to deploy the topology of the
                application. A dialog enables to choice the descriptor
                and to select the virtual node. The button
                <emphasis>deploy</emphasis>
                launches the deployment of Matlab/Scilab engines over
                the nodes.
            </para>

            <figure>
                <info>
                    <title>Deployment of the application</title>
                </info>


                <mediaobject>
                    <imageobject>
                        <imagedata scalefit="1" width="100%" contentdepth="100%"
                                   fileref="scilab/pics/ScilabToolBox1.png"/>
                    </imageobject>
                </mediaobject>
            </figure>
        </section>

        <section>
            <info>
                <title>Task launching</title>
            </info>


            <para>
                The next step is the task launching. A dialog enables to
                select the script and possibly to define the script
                initialization, the return values, and the task
                priority. The button
                <emphasis>start</emphasis>
                creates and sends the task.
            </para>

            <figure>
                <info>
                    <title>Creation of a task</title>
                </info>


                <mediaobject>
                    <imageobject>
                        <imagedata scalefit="1" width="100%" contentdepth="100%"
                                   fileref="scilab/pics/ScilabToolBox2.png"/>
                    </imageobject>
                </mediaobject>
            </figure>
        </section>

        <section>
            <info>
                <title>Display of results</title>
            </info>


            <para>
                The last step is the display of results. A
                <emphasis>double click</emphasis>
                on a task in the table of terminated tasks sets visible
                a dialog. This dialog displays the tasks properties and
                the result (with the possibility to save it in a file)
            </para>

            <figure>
                <info>
                    <title>Display a result</title>
                </info>


                <mediaobject>
                    <imageobject>
                        <imagedata scalefit="1" width="100%" contentdepth="100%"
                                   fileref="scilab/pics/ScilabToolBox4.png"/>
                    </imageobject>
                </mediaobject>
            </figure>
        </section>

        <section>
            <info>
                <title>Task monitoring</title>
            </info>


            <para>
                In the main frame, several tables of tasks (pending,
                executing , terminated) allow to monitor the
                application. These tables allows to show just for each
                task the relevant informations. A double click on a task
                in these tables sets visible a dialog. This dialog
                displays the tasks properties (path, script
                initialization, results).
            </para>

            <itemizedlist>
                <listitem>
                    <para>
                        The table of pending tasks enables to cancel
                        selected tasks and to clear all cancelled tasks
                    </para>
                </listitem>

                <listitem>
                    <para>
                        The table of executing tasks enables to kill
                        selected tasks and to clear all killed tasks
                    </para>
                </listitem>

                <listitem>
                    <para>
                        The table of terminated tasks enables to get the
                        status of tasks (SUCCESS or ABORT), to save the
                        first selected task in file the result, to
                        remove selected tasks.
                    </para>
                </listitem>
            </itemizedlist>
        </section>

        <section>
            <info>
                <title>Engine monitoring</title>
            </info>


            <para>
                In the main frame, a tree describes all nodes used by
                the application. Over the execution of the application,
                if a task is aborted, the engine of this task may be
                unstable ( this one is displayed with a red foreground).
                A rigth-click on it show a popup menu to restart it.
            </para>

            <figure>
                <info>
                    <title>State of Engines</title>
                </info>


                <mediaobject>
                    <imageobject>
                        <imagedata scalefit="1" width="100%" contentdepth="100%"
                                   fileref="scilab/pics/ScilabToolBox3.png"/>
                    </imageobject>
                </mediaobject>
            </figure>
        </section>
    </section>

    <section xml:id="SciMat_Embedded">
        <info>
            <title>Matlab embedded parallelization</title>
        </info>
        <para>
            The purpose of this toolkit is to allow parallel execution directly inside the Matlab environment. The user
            can transparently launch parallel scripts and functions using its familiar way of programming within Matlab.
            The feature currently supports embarassingly parrallel problems only, meaning that for a set of scripts
            launched in parallel, each script's execution must be independant from other script's execution.
        </para>
        <section xml:id="SciMat_Embedded_installation">
            <info>
                <title>Installation</title>
            </info>
            <para>
                The toolkit requires a connection to the
                <emphasis>ProActive Scheduler</emphasis>
                and<emphasis>Resource Manager</emphasis>. In consequence the scheduler needs to be installed and
                running. Explanation on how to install and use the ProActive Scheduler and Resource Manager are detailed
                in<xref
                    linkend="ProActive_Scheduler"/>. When a parallel script is executed, the toolkit wraps the scripts
                inside a job definition and submits it to the running scheduler. Execution of the job can therefore be
                monitored using the Scheduler SWT client interface described in<xref
                    linkend="Scheduler_Eclipse_Plugin"/>. The scheduler will run Matlab engines in order to parallelize
                scripts. In consequence, these engines will need a Matlab licence (up to 4 engines
                running on the same computer will take only one licence though). Finally, the Scheduler will need to
                have acces to the native Java interface to Matlab in order to launch the Matlab engines. It's already
                compiled for a set of Matlab versions and architectures as shown in the following list (it's not
                compatible with Matlab versions prior to 7.1):
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        Linux 32 bits / Matlab 7.1,7.2,7.3,7.4,7.5
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Linux 64 bits / Matlab 7.1,7.2,7.3,7.4,7.5
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Windows XP 32 bits / Matlab 7.1,7.2,7.3,7.4,7.5
                    </para>
                </listitem>
            </itemizedlist>
            <para>
                If your architecture/version is not in the list, you'll need to compile the interface as described in
                <xref linkend="SciMat_Matlab_Installation"/>. The compilation process will
                put the generated native library inside the ProActive library directory. You can then launch the
                Scheduler : it will have access to the native libraries you've compiled.
            </para>

        </section>
        <section xml:id="SciMat_Embedded_Usage">
            <info>
                <title>Usage</title>
            </info>
            <para>
                Once the Scheduler and Resource Mananger are running, here is the procedure to use the toolkit :
            </para>
            <orderedlist>
                <listitem>
                    <para>
                        Start a Matlab session.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Add the scripts contained in PROACTIVE/scripts/unix/matlab/embedded to your Matlab path.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Execute the following command on the Matlab prompt:
                    </para>
                    <screen><![CDATA[>> PAconnect('//machine-where-the scheduler-is-running');]]></screen>
                    <para>
                        This will trigger a download of the ProActive libraries from the ProActive website. If you don't
                        have access to internet, or if you want to use a specific version of ProActive, run the command
                        as PAconnect('path-to-the-proactive-jar','//machine-where-the scheduler-is-running').
                    </para>
                    <para>
                        In any case, if the scheduler can be found on the machine you specified, a pop up window will
                        appear asking you to enter your login information. In order to create accounts for the
                        scheduler, read the section
                        <xref linkend="start_scheduler_xml"/>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        You're now ready to run some parallel scripts. We provide a little script, PAwarmup() which
                        "warm up" the Matlab Engines by executing a set of vanilla tasks. If ever any problem exist in
                        your configuration, they will probably appear here. Don't use PAwarmup each time ! Matlab
                        Engines, once started will remain in activity with the scheduler. Reuse the script only if you
                        needed to restart the scheduler.
                    </para>
                    <screen><![CDATA[>> PAwarmup();]]></screen>
                </listitem>
                <listitem>
                    <para>
                        In order to run a Matlab function in parallel you'll need to call the function PAsolve() as
                        follows:
                    </para>
                    <screen><![CDATA[>> PAsolve( {1, 2, 3, 4, 5}, @factorial);]]></screen>
                    <para>
                        This by example will execute the factorial method on 5 different machines, the first machine
                        using the parameter 1, the second, the parameter 2, etc...
                    </para>
                    <para>
                        The file system between your Matlab session and the remote engines needs to be shared (through
                        NFS or something equivalent). Your local user path will be automatically copied to the remote
                        engine. Meaning that if you are using a Matlab function f located in the m-file f.m at path P,
                        then the remote engine will try to look at the function at the same path P.
                    </para>
                </listitem>
            </orderedlist>

        </section>
    </section>

    <section xml:id="SciMat_Advanced">
        <info>
            <title>Advanced Usage</title>
        </info>

        <section xml:id="SciMat_Architecture">
            <info>
                <title>Matlab/Scilab GUI Architecture</title>
            </info>


            <para>
                The interface architecture is based on the Master-Workers
                model. In this communication model, the master entity
                monitors the workers entities. In our case:
            </para>

            <itemizedlist>
                <listitem>
                    <para>
                        The role of the master is to deploy the topology of
                        matlab/scilab instances (slaves) and to distribute
                        tasks (between the different engines);
                    </para>
                </listitem>
            </itemizedlist>

            <itemizedlist>
                <listitem>
                    <para>
                        The role of the worker is to perform the submitted
                        tasks (by the master).
                    </para>
                </listitem>
            </itemizedlist>

            <para>
                There are four classes which are intented for the user:
            </para>

            <para>
                The Class
                <literal>MSService</literal>
                implements all functionalities to deploy engines, to
                distribute tasks, and to retrieve results (of computed
                tasks).
            </para>

            <itemizedlist>
                <listitem>
                    <para>
                        The deployment is made thank to a ProActive
                        descriptor. This deployment descriptor describes the
                        different nodes of the grid taking part at the
                        computation. A singularity of this descriptor is the
                        declaration of specific matlab/scilab environment
                        variables for each node. The deployment is achieved
                        by a call of the method "deployEngine". This method
                        takes in parameters the VirtualNode id, the
                        descriptor path, and the number of engines to
                        create.
                    </para>
                </listitem>

                <listitem>
                    <para>
                        The distribution of a Matlab/Scilab task is made
                        thanks to the call of the method "sendTask". After
                        the call, the task is set in pending queue. This
                        queue is managed like a FIFO with priority. The task
                        is in head of the queue is sent when a engine is
                        available.
                    </para>
                </listitem>

                <listitem>
                    <para>
                        After the computation of a task, the matlab/scilab
                        engine returns the result. To retrieve this result,
                        it is necessary to listen the event "SciEventTask"
                        thank to the method "addEnventListenerTask".
                    </para>
                </listitem>

                <listitem>
                    <para>
                        This class offers also the possibilities to cancel a
                        pending task, to kill a running task , and to
                        restart a engine.
                    </para>
                </listitem>
            </itemizedlist>

            <para>
                The Class
                <literal>GenTaskInfo</literal>
                contains all informations about a Matlab/Scilab task. Among
                these informations, there are:
            </para>

            <itemizedlist>
                <listitem>
                    <para>The state of the tasks:</para>

                    <itemizedlist>
                        <listitem>
                            <para>
                                <emphasis>WAIT</emphasis>
                                : The task is in the pending queue
                            </para>
                        </listitem>
                    </itemizedlist>

                    <itemizedlist>
                        <listitem>
                            <para>
                                <emphasis>RUN</emphasis>
                                : The task is computing by an engine
                            </para>
                        </listitem>

                        <listitem>
                            <para>
                                <emphasis>SUCCES</emphasis>
                                : The computation of the task is terminated
                                with success
                            </para>
                        </listitem>

                        <listitem>
                            <para>
                                <emphasis>ABORT</emphasis>
                                : The computation of the task was avorted
                            </para>
                        </listitem>

                        <listitem>
                            <para>
                                <emphasis>KILL</emphasis>
                                : The task was killed by the user during the
                                computation
                            </para>
                        </listitem>

                        <listitem>
                            <para>
                                <emphasis>CANCEL</emphasis>
                                : The Task was cancelled by the user before
                                its computation
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>

                <listitem>
                    <para>The global and execution time</para>
                </listitem>

                <listitem>
                    <para>
                        The priority of the task (
                        <emphasis>LOW</emphasis>
                        ,
                        <emphasis>NORMAL</emphasis>
                        ,
                        <emphasis>HIGH</emphasis>
                        )
                    </para>
                </listitem>

                <listitem>
                    <para>The task itself</para>
                </listitem>

                <listitem>
                    <para>
                        The result of the associated task ( It is available
                        when the state is
                        <emphasis>ABORT</emphasis>
                        or
                        <emphasis>SUCCESS</emphasis>
                        )
                    </para>
                </listitem>
            </itemizedlist>

            <para>
                The class
                <literal>SciTask</literal>
                describes a scilab task. It defines In and Out data, the job
                and the job initialization. A job is a scilab script
                (*.sce), it contains all instructions executed by a remote
                engine. In data and the job initialization allow to
                customize the execution and Out data define the values to
                return after the execution.
            </para>
            <para>
                The class
                <literal>MatlabTask</literal>
                describes a matlab task. It defines similar data as the
                scilab task. A job is a scilab script (*.m).
            </para>

            <para>
                The class
                <literal>GeneralResult</literal>
                describes a result of a Scilab or Matlab task. A result is
                the list of return values (defining in the task).
            </para>

            <para>
                The following example
                <xref linkend="sciex1"/>
                presents how to compute a basic scilab task and to display
                the result. In our case the task initializes the variable
                <literal>"n"</literal>
                and increments it. The next example shows a possibly
                deployment descriptor
                <xref linkend="sciex2"/>
                .
            </para>

            <example xml:id="sciex1">
                <info>
                    <title>Example: Interface Matlab/Scilab</title>
                </info>


                <programlisting xml:lang="java">
                    <textobject>
                        <textdata
                                fileref="../src/Extensions/org/objectweb/proactive/extensions/scilab/test/SciTest2.java"/>
                    </textobject>
                </programlisting>
            </example>

            <example xml:id="sciex2">
                <info>
                    <title>Descriptor deployment</title>
                </info>


                <programlisting xml:lang="xml">
                    <textobject>
                        <textdata fileref="../scripts/unix/scilab/ProActiveScilab.xml"/>
                    </textobject>
                </programlisting>
            </example>
        </section>
    </section>
</chapter>
