<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/css" href="../viewDocbook.css"?>
<chapter id="capabilities-intro">
  <title id="Introduction_Proactive_Features">ProActive Example
   Applications</title>

  <para>This chapter will present some of the features offered by ProActive:
  </para>

  <itemizedlist>
    <listitem>
      <para>task parallelism while using several machines</para>
    </listitem>

    <listitem>
      <para>task synchronization</para>
    </listitem>

    <listitem>
      <para>active objects migration</para>
    </listitem>
  </itemizedlist>

  <sect1 id="C3D_example">
    <title>Parallel processing and collaborative application with
    ProActive: C3D : a parallel, distributed and collaborative 3D renderer</title>

    <para>Distribution is often used for CPU-intensive applications, where
    parallelism is a key for performance. </para>
	
	<para>The parallelization of programs can be facilitated with
    ProActive, thanks to asynchronous method calls (see <xref
    linkend="FutureObjectCreation" />), as well as group communications (see
    <xref linkend="TypedGroupCommunication" />).</para>
    
 
    <para><ulink url="http://proactive.inria.fr/c3d.htm">C3D</ulink> is
    a Java benchmark application that measures the performance of a 3D
    raytracer renderer distributed over several Java virtual machines using
    Java RMI. It showcases some of the benefits of ProActive, notably the ease
    of distributed programming, and the speedup through distributed parallel
    calculation. This benchmark gives indication of 
     the performance of the serialization process and Java RMI 
     itself. The benchmark is an automated version of C3D, which is both 
     a collaborative application and a distributed raytracer: users can 
     interact through messaging and voting facilities in order to choose 
     a scene that is renderer using a set of distributed rendering engines 
     working in parallel. Near-linear speedup is achieved with up to half 
     a dozen rendering engines running in parallel that communicate using Java RMI
     and controlled by a central dispatcher.</para>
   
    <figure>
      <title>The active objects in the c3d application</title>

      <mediaobject>
        <imageobject>
          <imagedata contentwidth="100"
                     fileref="images/c3d.png" format="PNG"
                     width="6in" />
        </imageobject>
      </mediaobject>
    </figure>

	<para>
	The C3D application uses three scripts that can be found under <literal>ProActive/scripts/unix</literal>
	or  <literal>ProActive/scripts/windows</literal>:
	<itemizedlist>
		<listitem>
			<para><literal>c3d_one_user.sh</literal> or <literal>c3d_one_user.bat
			 </literal> launches  the C3D Dispatcher with four rendering engines and one user.</para>
		</listitem>
 		<listitem><para>
			<literal>c3d_no_user.sh</literal> or <literal>c3d_no_user.bat</literal> 
			launches the C3D Dispatcher with four rendering engines and no user
			</para>
		</listitem>
		<listitem>
			<para>
			<literal>c3d_add_user.sh</literal> or <literal>
			c3d_add_user.bat</literal> adds another users
			</para>
		</listitem>
	</itemizedlist>
	
	</para>


    <sect2>
      <title>Start C3D</title>

      <para>Using the script <literal>c3d_no_user</literal>, a "Dispatcher"
      object is launched (i.e. a centralized server) as well as 4 "Renderer"
      objects, which are active objects to be used for parallel
      rendering.</para>

      <para><figure>
          <title>the dispatcher GUI is launched</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="guided_tour/pics/screenshots/c3d_dispatcher_app.png"
                         format="PNG" width="4.5in" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>The bottom part of the window allows to choose which renderers
      should participate in the rendering. You may want to stop using a given
      machine (because for instance it is overloaded), and thus remove it from
      the renderers used in the current computation.</para>
    </sect2>

    <sect2>
      <title>Start a user</title>

      <para>To add a new user start <literal>Proactive/scripts/unix/c3d_add_user.sh</literal> or
      <literal>Proactive\scripts\windows\c3d_add_user.bat</literal> depending on your
      operating system.</para>

      <itemizedlist>
        <listitem>
          <para>Connect on the current host (proposed by default) by just
          giving your name. </para>
        </listitem>
      </itemizedlist>

      <para><informalfigure>
          <mediaobject>
            <imageobject>
              <imagedata fileref="guided_tour/pics/screenshots/c3d_user_alice.png"
                         format="PNG" width="4.5in" />
            </imageobject>
          </mediaobject>
        </informalfigure></para>

     
      <itemizedlist>
        <listitem>
          <para>Spin the scene, add a random sphere, and observe how the
          action takes place immediately</para>
        </listitem>

        <listitem>
          <para>Add and remove renderers, and observe the effect on the 'speed
          up' indication from the user window.</para>
        </listitem>
      </itemizedlist>


      <note>
        <para>You might not perceive the difference of the performance. The
        difference is better seen with more distributed nodes and objects (for
        example on a cluster) .</para>
      </note>
    </sect2>

    <sect2>
      <title>Start a user from another machine</title>

      <para>Using the <literal>c3d_add_user</literal> script, and
      specifying the host (set to local host
      by default) you can add new users to the C3D.</para>

      <para><figure>
          <title>Specifying the host</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="guided_tour/pics/screenshots/c3d_specify_host.png"
                         format="PNG" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <note> <para> You must  use the same version of ProActive on both machines
      in order for the examples to work properly.</para></note>

        <para>If several users are connected, a collaborative consensus must be reached before
      starting some actions (or a timeout must occur before the action is initiated).</para>
    </sect2>

      <sect2>
      <title>Look at the source code for the main classes</title>

      <para>The main classes of this application are:</para>

      <itemizedlist>
        <listitem>
          <para><literal>org.objectweb.proactive.examples.c3d.C3DUser.java</literal></para>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para><literal>org.objectweb.proactive.examples.c3d.C3DRenderingEngine.java</literal></para>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para><literal>org.objectweb.proactive.examples.c3d.C3DDispatcher.java</literal></para>
        </listitem>
      </itemizedlist>

      <para>In the Dispatcher, look at the method <literal>public void
      rotateScene(int i_user, String i_user_name, Vec angle) </literal> that
      handles election of the next action to undertake.</para>
    </sect2>
  </sect1>

  <sect1>
    <title>Synchronization with ProActive</title>

    <para>ProActive provides an advanced synchronization mechanism that allows
    an easy and safe implementation of complex synchronization
    policies.</para>

    <para>This is illustrated by two examples:</para>

    <itemizedlist>
      <listitem>
        <para>the readers and the writers example</para>
      </listitem>

      <listitem>
        <para>the dining philosophers example</para>
      </listitem>
    </itemizedlist>

    <sect2>
      <title>The readers-writers</title>

      <para>The readers and the writers want to access the same data. In order
      to allow concurrency while ensuring the consistency of the readings,
      accesses to the data have to be synchronized upon a specified policy.
      Thanks to ProActive, the accesses are guaranteed to be allowed
      sequentially.</para>

      <para>The <ulink
      url="http://proactive.inria.fr/reader_writers.htm">implementation
      with ProActive</ulink> uses 3 active objects: Reader, Writer, and the
      controller class (ReaderWriter).</para>

      <sect3>
        <title>Start the application</title>

        <para>To start the application use <literal>Proactive/scripts/unix/readers.sh</literal>
        or <literal>Proactive\scripts\windows\readers.bat</literal> depending on your operating
        system.
        </para>

        <para>ProActive starts a node (i.e. a JVM) on the current machine, and
        creates 3 Writer, 3 Reader, a ReaderWriter (the controller of the
        application) and a ReaderDisplay, that are active objects.</para>

        <para><figure>
            <title>A GUI is started that illustrates the activities of the
            Reader and Writer objects.</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="guided_tour/pics/screenshots/readers_app.png"
                           format="PNG" />
              </imageobject>
            </mediaobject>
          </figure></para>
      <para>The examples uses three modes "Priority to Writers", 
		"Priority to Readers", and "Even Policy". The application is able
		to assign different priority to readers or writers without blocking on reading or writing.     
	</para>
    
        <para>The routines dealing with synchronization policy are:</para>

        <programlisting lang="java"> 
        	public void evenPolicy(org.objectweb.proactive.Service service)
    	    public void readerPolicy(org.objectweb.proactive.Service service)
    	    public void writerPolicy(org.objectweb.proactive.Service service)
		</programlisting> 
		<para>
		and can be found in
        <literal>org.objectweb.proactive.examples.readers.ReaderWriter.java</literal>. 
        </para>
        
      </sect3>

     </sect2>

    <sect2>
      <title>The dining philosophers</title>

      <para>The 'dining philosophers' problem is a classic exercise in
      concurrent programming with the goal of avoiding deadlocks.</para>

      <para>We have provided <ulink
      url="http://proactive.inria.fr/dining_philosophers.htm">an
      illustration of the solution</ulink> using ProActive, where all the
      philosophers are active objects, as well as the table (controller) and
      the dinner frame (user interface).</para>

      <sect3>
        <title>Start the philosophers application</title>

      <para>To start the application use <literal>Proactive/scripts/unix/philosophers.sh</literal>
        or <literal>Proactive\scripts\windows\philosophers.bat</literal> depending on your operating
        system.
        </para>

        <para>ProActive creates a new node and instantiates the active objects
        of the application: DinnerLayout, Table, and Philosopher</para>

        <para>
        	<figure>
            <title>The Dining Philosophers Example</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="guided_tour/pics/screenshots/philosophers_app.png"
                           format="PNG" />
              </imageobject>
            </mediaobject>
          </figure>
         </para>
    
        <para>The pictures represent the state of the philosophers. They can
        be:</para>

        <itemizedlist>
          <listitem>
            <para><inlinemediaobject>
                <imageobject>
                  <imagedata fileref="guided_tour/pics/think.png" format="PNG" />
                </imageobject>
              </inlinemediaobject> <emphasis
            role="bold">philosophing</emphasis></para>
          </listitem>

          <listitem>
            <para><inlinemediaobject>
                <imageobject>
                  <imagedata fileref="guided_tour/pics/wait.png" format="PNG" />
                </imageobject>
              </inlinemediaobject> <emphasis role="bold">hungry, wants the
            fork!</emphasis></para>
          </listitem>

          <listitem>
            <para><inlinemediaobject>
                <imageobject>
                  <imagedata fileref="guided_tour/pics/eat.png" format="PNG" />
                </imageobject>
              </inlinemediaobject> <emphasis
            role="bold">eating</emphasis></para>
          </listitem>
        </itemizedlist>

        <para>The forks can have two states:</para>

        <itemizedlist>
          <listitem>
            <para><inlinemediaobject>
                <imageobject>
                  <imagedata fileref="guided_tour/pics/fork1.png" format="PNG" />
                </imageobject>
              </inlinemediaobject> <emphasis
            role="bold">taken</emphasis></para>
          </listitem>

          <listitem>
            <para><inlinemediaobject>
                <imageobject>
                  <imagedata fileref="guided_tour/pics/fork0.png" format="PNG" />
                </imageobject>
              </inlinemediaobject> <emphasis
            role="bold">free</emphasis></para>
          </listitem>
        </itemizedlist>
      <para>You can either run the application in autopilot mode running it by
       itself without encountering a
        deadlock or in manual mode where you click on the philosophers' heads to switch their modes.
        You can starve one of the philosophers (i.e. the
        others alternate eating and thinking while one never eats!)</para>
      </sect3>

      </sect2>
  </sect1>

  <sect1>
    <title>Migration of active objects</title>

    <indexterm>
      <primary>Migration</primary>

      <secondary>example</secondary>
    </indexterm>

    <para>ProActive allows the transparent migration of objects between
    virtual machines.</para>

    <para>A nice visual example is the penguin's one.</para>

    <para>This example shows a set of <ulink
    url="http://www-sop.inria.fr/oasis/ProActive/apps/penguin.html">mobile
    agents</ulink> moving around while still communicating with their base and
    with each other. It also features the capability to move a swing window
    between screens while moving an agent from one JVM to the other.</para>

    <sect2>
      <title>Start the penguin application</title>

      <para>Using the <literal>migration/penguin</literal> script.</para>
    </sect2>

    <sect2>
      <title>Start IC2D to see what is going on</title>

      <para>Using the <literal>ic2d</literal> script</para>

      <para>Acquire the machines you have started nodes on</para>
    </sect2>

    <sect2>
      <title>Add an agent</title>

      <itemizedlist>
        <listitem>
          <para>On the Advanced Penguin Controller window: button 'add
          agent'</para>
        </listitem>
      </itemizedlist>

      <para><informalfigure>
          <mediaobject>
            <imageobject>
              <imagedata fileref="guided_tour/pics/screenshots/penguin.png"
                         format="PNG" />
            </imageobject>
          </mediaobject>
        </informalfigure></para>

      <para>An agent is materialized by a picture in a java window.</para>

      <itemizedlist>
        <listitem>
          <para>Select it, and press button 'start'</para>
        </listitem>

        <listitem>
          <para>Observe that the active object is moving between the machines,
          and that the penguin window disappears and reappears on the screen
          associated with the new JVM.</para>
        </listitem>
      </itemizedlist>
    </sect2>

    <sect2>
      <title>Add several agents</title>

      <para>After selecting them, use the buttons to:</para>

      <itemizedlist>
        <listitem>
          <para>Communicate with them ('chained calls')</para>
        </listitem>

        <listitem>
          <para>Start, stop, resume them</para>
        </listitem>

        <listitem>
          <para>Trigger a communication between them ('call another
          agent')</para>
        </listitem>
      </itemizedlist>
    </sect2>

    <sect2>
      <title>Move the control window to another user</title>

      <itemizedlist>
        <listitem>
          <para>Start the same script on a different computer. </para>
        </listitem>
             
      </itemizedlist>
    </sect2>
  </sect1>
</chapter>