package org.objectweb.proactive.examples.userguide.cmagent.groups;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Vector;

import org.objectweb.proactive.api.PADeployment;
import org.objectweb.proactive.api.PAGroup;
import org.objectweb.proactive.api.PALifeCycle;
import org.objectweb.proactive.core.ProActiveException;
import org.objectweb.proactive.core.descriptor.data.ProActiveDescriptor;
import org.objectweb.proactive.core.descriptor.data.VirtualNode;
import org.objectweb.proactive.core.group.Group;
import org.objectweb.proactive.core.node.Node;
import org.objectweb.proactive.core.node.NodeException;
import org.objectweb.proactive.examples.userguide.cmagent.migration.CMAgentMigrator;
import org.objectweb.proactive.examples.userguide.cmagent.simple.State;


public class Main {
    private static VirtualNode deploy(String descriptor) {
        try {
            //create object representation of the deployment file
            ProActiveDescriptor pad = PADeployment.getProactiveDescriptor(descriptor);
            //active all Virtual Nodes
            pad.activateMappings();
            //get the first Node available in the first Virtual Node 
            //specified in the descriptor file
            VirtualNode vn = pad.getVirtualNodes()[0];
            return vn;
        } catch (NodeException nodeExcep) {
            System.err.println(nodeExcep.getMessage());
        } catch (ProActiveException proExcep) {
            System.err.println(proExcep.getMessage());
        }
        return null;
    }

    public static void main(String args[]) {
        try {
            Vector<CMAgentMigrator> agents = new Vector<CMAgentMigrator>();
            BufferedReader inputBuffer = new BufferedReader(new InputStreamReader(System.in));
            VirtualNode vn = deploy(args[0]);

            //TODO 1. Create a new empty group
            CMAgentMigrator monitorsGroup = null;

            //TODO 2. Create a collection of active objects with on object on each node
            for (Node node : vn.getNodes()) {
                CMAgentMigrator ao = null;
                agents.add(ao);
            }

            //TODO 3. Get a management representation of the monitors group
            Group gA = null;

            //ask for adding or removing nodes
            //get statistics
            int k = 1;
            int choice;
            while (k != 0) {
                //display the menu 
                k = 1;
                System.out.println("Toggle monitored nodes (*) or display statistics: ");
                for (CMAgentMigrator agent : agents) {
                    if (gA.contains(agent))

                        //TODO 4. Print the node URL 
                        System.out.println(" " + k + ".* " + " node url ");
                    else
                        System.out.println(" " + k + ".  " + " node url ");
                    k++;
                }
                System.out.println("-1.  Display statistics for monitored nodes");
                System.out.println(" 0.  Exit");

                //select a node
                do {
                    System.out.print("Choose a node to add or remove  :> ");
                    try {
                        // Read am option from keyboard
                        choice = Integer.parseInt(inputBuffer.readLine().trim());
                    } catch (NumberFormatException noExcep) {
                        choice = -1;
                    }
                } while (!(choice >= 1 && choice < k || choice == 0 || choice == -1));
                //exit option
                if (choice == 0)
                    break;
                //display statistics option
                if (choice == -1) {

                    State resultsGroup = monitorsGroup.getCurrentState();
                    while (PAGroup.size(resultsGroup) > 0) {
                        State statistic = (State) PAGroup.waitAndGetOneThenRemoveIt(resultsGroup);
                        System.out.println(statistic.toString());
                    }
                } else { //toggle node watched option
                    if (gA.contains(agents.elementAt(choice - 1)))
                        gA.remove(agents.elementAt(choice - 1));
                    else
                        gA.add(agents.elementAt(choice - 1));
                }

            }

            //stopping all the objects and JVMS
            vn.killAll(true);
            PALifeCycle.exitSuccess();
        } catch (NodeException nodeExcep) {
            System.err.println(nodeExcep.getMessage());
        } catch (IOException e) {
            System.err.println(e.getMessage());
        }
    }
}