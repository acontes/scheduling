<!-- Converted by db4-upgrade version 1.0 -->

<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="newIC2D"><info><title>
		Adding Grahical User Interfaces and Eclipse Plugins
	</title></info>

	

	<section xml:id="archiDoc"><info><title>Architecture and documentation</title></info>

		

		<para>
			IC2D is composed of several plugins:
		</para>
		<itemizedlist>
			<listitem>
				<para>
					<emphasis role="bold">
						org.objectweb.proactive.ic2d
					</emphasis>
					: This plugin is the "frame" which contains the
					other plugins. It is only needed in the standalone
					version.
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis role="bold">
						org.objectweb.proactive.ic2d.monitoring
					</emphasis>
					: provides graphical representation of hosts, runtimes, virtual
					nodes and active objects topology, also displaying communications between active objects.
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis role="bold">
						org.objectweb.proactive.ic2d.jobmonitoring
					</emphasis>
					: provides tree-based representation of hosts, runtimes , virtual
					nodes and active objects.
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis role="bold">
						org.objectweb.proactive.ic2d.launcher
					</emphasis>
					: initiates application deployment using deployment descriptors
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis role="bold">
						org.objectweb.proactive.ic2d.lib
					</emphasis>
					: provides Java archives (jar) required by the other plugins which are not provided by
					the Eclipse like ProActive.jar, log4j.jar, etc.
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis role="bold">
						org.objectweb.proactive.ic2d.console
					</emphasis>
					: provides logging capability through the Eclipse
					console.
				</para>
			</listitem>
		</itemizedlist>


		<section xml:id="org.objectweb.proactive.ic2d.monitoring"><info><title>org.objectweb.proactive.ic2d.monitoring</title></info>

			
			
			<para>
				The aim of this plugin is to provide the essential features for monitoring of ProActive applications.
				Monitorable entities are 
			</para>
			
			<para>
				<xref linkend="graphicalHierarchy"/>
				shows the graphical representation of
				<emphasis role="bold">hosts</emphasis>,
				<emphasis role="bold">virtual nodes</emphasis>,
				<emphasis role="bold">runtimes (ProActive JVM)</emphasis>,
				<emphasis role="bold">nodes</emphasis>, and
				<emphasis role="bold">active objects</emphasis>.
			</para>

			<para>
				<figure xml:id="graphicalHierarchy"><info><title>Graphical representation of the data</title></info>
					
					<mediaobject>
						<imageobject>
							<imagedata scalefit="1" width="100%" contentdepth="100%"  fileref="ic2d/images/architecture/graphicalHierarchy.png" format="PNG"/>
						</imageobject>
					</mediaobject>
				</figure>
			</para>

			<section xml:id="hierarchyPart"><info><title>Class Diagrams</title></info>

				

				<para>
					The diagram	<xref linkend="hierarchy"/> describes relationships between Java classes:
				</para>
				
				<itemizedlist>
				     <listitem>
						<para>
							The AOObject class represents an Active Object.
						</para>
					</listitem>
					<listitem>
						<para>
							The NodeObject class represents a node. Nodes contain Active Objects.
						</para>
					</listitem>
					<listitem>
						<para>
							The VMObject represents a runtime. Runtimes contain nodes
						</para>
					</listitem>
					<listitem>
						<para>
							The VNObject class represents a virtual node. The virtual node is a logical
							entity which has no real existence at runtime. When using Deployment Descriptors, 
							it is the mapping of a virtual node on a runtime that leads to the creation of one
							or more nodes on this runtime. Virtual nodes can be mapped on more than one runtime, 
							thus as shown in the figure, a node is bound to both a runtime and a virtual node.
						</para>
					</listitem>
					<listitem>
						<para>
							The HostObject class represents the hardware that hosts the runtime, it is possible
							to coallocate several runtimes on the same host
						</para>
					</listitem>
					<listitem>
						<para>
							The WorldObject class is a "special" object that
							allows to gather hosts and virtual nodes under a common root.
						</para>
					</listitem>
				</itemizedlist>

				<para>
					<figure xml:id="hierarchy"><info><title>Class diagram</title></info>
						
						<mediaobject>
							<imageobject>
								<imagedata scalefit="1" width="100%" contentdepth="100%"  align="center" fileref="ic2d/images/architecture/Classdiagram_2_transparancy.png" format="PNG"/>
							</imageobject>
						</mediaobject>
					</figure>
				</para>

			</section><!-- Hierarchy of the data -->

			<section xml:id="exploration"><info><title>Monitoring in detail</title></info>

				

				<para>
					When IC2D is used to monitor a host, it 
					looks for any available runtimes on the host, then enumerates any nodes,
					virtual nodes and active objects contained within
					each runtime.
				</para>
				<para>
					In order to do this, it grabs the URL entered by the user,
					then creates a new HostObject and add it to the WorldObject.
					Next, a thread starts and regularly queries the WorldObject to 
					<emphasis role="bold">explore</emphasis> itself.
					The following sequence diagram explains how a WorldObject explores itself for the first time 
					(<xref linkend="exploreSequenceDiagram"/>).
				</para>
				
				<itemizedlist>
					<listitem>
						<para>
							The WorldObject queries its HostObjects to
							explore themselves
						</para>
					</listitem>
					<listitem>
						<para>
							Each HostObject looks for ProActive Runtimes
							on the current host then creates
							<emphasis role="bold">VMObject</emphasis>
							s corresponding to the newly discovered
							runtimes
						</para>
					</listitem>
					<listitem>
						<para>
							Each VMObject explores itself, looking for
							Nodes contained within its ProActiveRuntime.
							Each Node is mapped into a
							<emphasis role="bold">NodeObject</emphasis>
						</para>
					</listitem>
					<listitem>
						<para>
							Each NodeObject looks for contained active
							objects asking it to the ProActiveRuntime of
							its parent (VMObject) and creates the
							corresponding
							<emphasis role="bold">AOObject</emphasis>
							s.
						</para>
					</listitem>
				</itemizedlist>

				<para>
					<figure xml:id="exploreSequenceDiagram"><info><title>The world exploring itself for the first time</title></info>
						
						<mediaobject>
							<imageobject>
								<imagedata scalefit="1" width="100%" contentdepth="100%"  align="center" fileref="ic2d/images/architecture/sequenceDiagram.png" format="PNG"/>
							</imageobject>
						</mediaobject>
					</figure>
				</para>
				
				<para>
					Now all objects are found. And these operation will
					be regularly repeated until the user stops
					monitoring.
				</para>

			</section><!-- How to find data? -->

			<section xml:id="mvc"><info><title>Model View Controller (MVC) -- The Graphical Editing Framework (GEF)</title></info>

				

				<para>
					The
					<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.eclipse.org/gef">
						Graphical Editing Framework (GEF)
					</link>
					allows developers to take an existing
					application model and quickly create a rich
					graphical interface.
				</para>

				<para>
					GEF employs an MVC (Model View Controller)
					architecture which enables simple changes to be
					applied to the model from the view.
				</para>

				<para>
					This section introduces the needed to the
					comprehension of GEF. For more details about GEF
					go to the
					<xref linkend="GEFLinks"/>
					.
				</para>

				<para>
					We describe here the implementation of the MVC
					pattern used within IC2D:
				</para>

				<itemizedlist>
					<listitem>
						<para>
							The Models (
							<xref linkend="models"/>
							)
						</para>
					</listitem>
					<listitem>
						<para>
							The Controllers = In GEF the controllers
							are subclasses of
							<emphasis role="bold">
								EditPart
							</emphasis>
							(
							<xref linkend="controllers"/>
							)
						</para>
					</listitem>
					<listitem>
						<para>
							The Views = The
							<emphasis role="bold">Figure</emphasis>
							s (
							<xref linkend="figures"/>
							)
						</para>
					</listitem>
				</itemizedlist>

				<para>
					<figure xml:id="models"><info><title>The Models</title></info>
						
						<mediaobject>
							<imageobject>
								<imagedata scalefit="1" width="100%" contentdepth="100%"  align="center" fileref="ic2d/images/architecture/GEFDataTransparency.png" format="PNG"/>
							</imageobject>
						</mediaobject>
					</figure>
				</para>

				<para>
					<figure xml:id="controllers"><info><title>The Controllers and the factory</title></info>
						
						<mediaobject>
							<imageobject>
								<imagedata scalefit="1" width="100%" contentdepth="100%"  align="center" fileref="ic2d/images/architecture/GEFEditPartTransparency.png" format="PNG"/>
							</imageobject>
						</mediaobject>
					</figure>
				</para>

				<para>
					<figure xml:id="figures"><info><title>The Views</title></info>
						
						<mediaobject>
							<imageobject>
								<imagedata scalefit="1" width="100%" contentdepth="100%"  align="center" fileref="ic2d/images/architecture/GEFFigureTransparency.png" format="PNG"/>
							</imageobject>
						</mediaobject>
					</figure>
				</para>

				<para>
					<emphasis role="bold">
						Three things to not forget
					</emphasis>
				</para>

				<itemizedlist>
					<listitem>
						<para>
							The data must be organized in
							<emphasis role="bold">
								a tree structure.
							</emphasis>
							. See
							<xref linkend="treeGEF"/>
						</para>
					</listitem>
					<listitem>
						<para>
							In GEF the controllers are subclasses of
							<emphasis role="bold">
								EditPart
							</emphasis>
						</para>
					</listitem>
					<listitem>
						<para>
							A
							<emphasis role="bold">factory</emphasis>
							(implementing
							<emphasis role="bold">
								EditPartFactory
							</emphasis>
							) allows GEF to create the controller
							corresponding to the model.
						</para>
					</listitem>
				</itemizedlist>

				<para>
					In blue, the data which we use with GEF. As you
					can see it, they are organized in a tree
					structure.
				</para>

				<para>
					<figure xml:id="treeGEF"><info><title>
							The data strucure of the monitoring plugin
						</title></info>
						
						<mediaobject>
							<imageobject>
								<imagedata scalefit="1" width="100%" contentdepth="100%"  align="center" fileref="ic2d/images/architecture/treeArchitectureGef.png" format="PNG"/>
							</imageobject>
						</mediaobject>
					</figure>
				</para>

				<para>
					<emphasis role="bold">
						Description of the creation of the
						controllers and the figures step by step :
					</emphasis>
				</para>

				<orderedlist>
					<listitem>
						<para>
							We indicate to GEF the root element of
							the tree, and the factory.
						</para>
					</listitem>
					<listitem>
						<para>
							GEF queries the factory to create the
							controller corresponding to the root.
						</para>
					</listitem>
					<listitem>
						<para>
							GEF queries the obtained controller to
							create the figure corresponding to the
							model.
						</para>
					</listitem>
					<listitem>
						<para>
							GEF queries the root to provide it its
							sons.
						</para>
					</listitem>
					<listitem>
						<para>
							On each one of these children, GEF do
							the same process.
						</para>
					</listitem>
					<listitem>
						<para>
							GEF queries the factory to create the
							controller corresponding to the first
							child.
						</para>
					</listitem>
					<listitem>
						<para>
							GEF queries the obtained controller to
							create the figure corresponding to the
							model.
						</para>
					</listitem>
					<listitem>
						<para>
							GEF queries the model to provide it its
							sons.
						</para>
					</listitem>
					<listitem>
						<para>etc...</para>
					</listitem>
				</orderedlist>

			</section><!-- Model View Controller (MVC) - The Graphical Editing Framework (GEF) -->
			
			<section xml:id="GEFLinks"><info><title>Links</title></info>
				
				
				
				<para>
					The official site of GEF:
					<uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.eclipse.org/gef/">http://www.eclipse.org/gef/</uri>
				</para>
				<para>
					A web page referring a lot of very
					interesting links about GEF:
					<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://eclipsewiki.editme.com/GEF">
						http://eclipsewiki.editme.com/GEF
					</link>
				</para>
				<para>
					A detailed description of GEF :
					<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://eclipse-wiki.info/GEFDescription">
						http://eclipse-wiki.info/GEFDescription
					</link>
				</para>
				<para>
					A tutorial : 'Building a GEF-based Eclipse
					editor' :
					<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://home.izforge.com/index.php/2005/08/08/160-building-a-gef-based-eclipse-editor-part-0">
						Part 0
					</link>
					,
					<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://home.izforge.com/index.php/2005/08/09/161-building-a-gef-based-eclipse-editor-part-1">
						Part 1
					</link>
					,
					<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://home.izforge.com/index.php/2005/08/18/166-building-a-gef-based-eclipse-editor-part-2">
						Part 2
					</link>
					,
					<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://home.izforge.com/index.php/2005/09/01/170-building-a-gef-based-eclipse-editor-part-3">
						Part 3
					</link>
					.
				</para>
				<para>
					Somes GEF examples :
					<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://eclipse-wiki.info/GEFExamples">
						http://eclipse-wiki.info/GEFExamples
					</link>
				</para>

			</section><!-- GEFLinks -->
				
			<section xml:id="observerObservable"><info><title>Observer/Observable</title></info>
					
				

				<para>
					The pattern Observer/Observable is used to
					update the figures when the model changes.
				</para>
				<para>
					In the
					<xref linkend="observable"/>
					you can see all the observable objects with
					methods which can call
					<emphasis role="bold">notifyObservers</emphasis>
					.
				</para>
				
				<para>
					<figure xml:id="observable"><info><title>Observable objects</title></info>
						
						<mediaobject>
							<imageobject>
								<imagedata scalefit="1" width="100%" contentdepth="100%"  align="center" fileref="ic2d/images/architecture/ObservableTransparency.png" format="PNG"/>
							</imageobject>
						</mediaobject>
					</figure>
				</para>
				
				<para>
					In the
					<xref linkend="observer"/>
					, you can see all the observer objects and where
					the method
					<emphasis role="bold">update</emphasis>
					is overriden.
				</para>
				
				<para>
					<figure xml:id="observer"><info><title>Observer objects</title></info>
						
						<mediaobject>
							<imageobject>
								<imagedata scalefit="1" width="100%" contentdepth="100%"  align="center" fileref="ic2d/images/architecture/ObserverTransparency.png" format="PNG"/>
							</imageobject>
						</mediaobject>
					</figure>
				</para>

				<para>
					In the
					<xref linkend="observerObservableTable"/>
					, you can see each observable with their
					observers.
				</para>

				<informaltable xml:id="observerObservableTable"><info><title>Observable and Observer objects</title></info>
					
					<tgroup cols="2">
						<thead>
							<row>
								<entry>
									<para>Observable</para>
								</entry>
								<entry>
									<para>Observer</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry morerows="2" valign="middle">
									<para>
										WorldObject
									</para>
								</entry>
								<entry>
									<para>
										WorldEditPart
									</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>
										MonitorThread
									</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>
										VirtualNodesGroup
									</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>
										HostObject
									</para>
								</entry>
								<entry>
									<para>
										HostEditPart
									</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>
										VMObject
									</para>
								</entry>
								<entry>
									<para>
										VMEditPart
									</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>
										NodeObject
									</para>
								</entry>
								<entry>
									<para>
										NodeEditPart
									</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>
										AOObject
									</para>
								</entry>
								<entry>
									<para>
										AOEditPart
									</para>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>

			</section><!-- Observer/Observable -->

			<section xml:id="spy"><info><title>The espionage of the active objects</title></info>
				

				<para>
					In the following diagram, you can see all classes
					necessary to the espionage of the active objects.
				</para>

				<para>
					<figure xml:id="spyDiagram"><info><title>Spy classes</title></info>
						
						<mediaobject>
							<imageobject>
								<imagedata scalefit="1" width="100%" contentdepth="100%"  align="center" fileref="ic2d/images/architecture/SpyTransparency.png" format="PNG"/>
							</imageobject>
						</mediaobject>
					</figure>
				</para>

				<para>
					When a node is found for the first time,
					IC2D put a spy in the node.
				</para>
				
			</section><!-- spy -->
			
			<section xml:id="event"><info><title>How an event of a proactive object arrive to the monitoring plugin?</title></info>
				
				
			
				<para>
					Once the spy is in the node, it
					regularly asks to the <emphasis role="bold">SpyEventManager</emphasis>
					to provide all the events. The next step is explained in the <xref linkend="spySequenceDiagram"/>. 
				</para>
			
				<para>		
					<figure xml:id="spySequenceDiagram"><info><title>Active Objects' events management</title></info>
						
						<mediaobject>
							<imageobject>
								<imagedata scalefit="1" width="100%" contentdepth="100%"  align="center" fileref="ic2d/images/architecture/sequenceDiagramSpies.png" format="PNG"/>
							</imageobject>
						</mediaobject>
					</figure>
				</para>
				
				<orderedlist>
					<listitem>
						<para>
							Then the Spy transmits all these events
							to the
							<emphasis role="bold">
								SpyListener
							</emphasis>
							.
						</para>
					</listitem>
					<listitem>
						<para>
							For the each event, the SpyListener
							calls the corresponding method on
							<emphasis role="bold">
								SpyEventListener
							</emphasis>
						</para>
					</listitem>
					<listitem>
						<para>
							The SpyEventListener searches the
							<emphasis role="bold">
								AOObject
							</emphasis>
							concerned with this event (thanks to the
							Node attribut of his class). And it
							modifies the state of this object.
						</para>
					</listitem>
					<listitem>
						<para>
							The AOObject notify its observers.
						</para>
					</listitem>
					<listitem>
						<para>
							The
							<emphasis role="bold">
								AOEditPart
							</emphasis>
							, which is an AOObject observer, update
							the view of this Active Object.
						</para>
					</listitem>
				</orderedlist>
		
			</section><!-- event -->
		
			<section xml:id="newSpyWhen"><info><title>When a new Spy is created?</title></info>
				

				<para>
					A new spy is created each time that a new Node
					is found.
				</para>
			</section><!-- newSpyWhen -->

			<section xml:id="newSpyHow"><info><title>How a new Spy is created?</title></info>
				

				<para>
					The NodeObject calls its "addSpy()" method :
				</para>

				<orderedlist>
					<listitem>
						<para>
							This method creates a
							<emphasis role="bold">
								SpyEventListener
							</emphasis>
							with the
							<emphasis role="bold">
								NodeObject
							</emphasis>
							in parameter.
						</para>
					</listitem>
					<listitem>
						<para>
							It creates also a
							<emphasis role="bold">
								SpyListener
							</emphasis>
							with the SpyEventListener in parameter.
						</para>
					</listitem>
					<listitem>
						<para>
							Next,it
							<emphasis role="bold">
								turns active
							</emphasis>
							the previous SpyListener.
						</para>
					</listitem>
					<listitem>
						<para>
							And creates a new Active Object (with
							the
							<emphasis role="bold">
								ProActive.newActive
							</emphasis>
							method) which is the spy with 2
							parameters : the turned active object
							(SpyListener) , and the
							<emphasis role="bold">node</emphasis>
							. (This node is given in parameter at
							the constructor of the NodeObject)
						</para>
					</listitem>
				</orderedlist>

			</section><!-- newSpyHow -->
			
			<section xml:id="HowActiveObjectAdded"><info><title>
					How an active object is added to the objects to
					monitor?
				</title></info>
				

					<para/>

					<orderedlist>
					<listitem>
						<para>
							When an active object is found for the
							first time, we ask to the
							<emphasis role="bold">
								NodeObject
							</emphasis>
							to provide us the spy.
						</para>
					</listitem>
					<listitem>
						<para>
							We call the '
							<emphasis role="bold">
								addMessageEventListener
							</emphasis>
							' method on the
							<emphasis role="bold">Spy</emphasis>
							.
						</para>
					</listitem>
					<listitem>
						<para>
							The Spy calls on its
							<emphasis role="bold">
								SpyEventManager
							</emphasis>
							the '
							<emphasis role="bold">
								addMessageEventListener
							</emphasis>
							' method.
						</para>
					</listitem>
					<listitem>
						<para>
							The SpyEventManager adds a
							<emphasis role="bold">
								MessageEvent
							</emphasis>
								listener to the
							<emphasis role="bold">body</emphasis>
							of the active object.
						</para>
					</listitem>
				</orderedlist>
			</section><!-- HowActiveObjectAdded -->

			<section xml:id="filters"><info><title>How to create and use filters</title></info>

				

				<para>
					In some cases, you may want to hide some objects to
					the users, i.e. don't monitor some internal objects.
					For example, spy objects used by IC2D for monitoring
					JVMs. That's why we introduce the concept of
					filtering in the monitoring plugin.
				</para>

				<para>
					The package
					<emphasis role="bold">
						org.objectweb.proactive.monitoring.filters
					</emphasis>
					contains:
				</para>
				
				<itemizedlist>
					<listitem>
						<para>
							<emphasis role="bold">Filter</emphasis>
							: an abstract class, which has to be
							extended by all filter classes. This class
							provides the method
							<emphasis role="bold">filter</emphasis>
							(AbstractDataObject) that returns true if it
							matches the filter, otherwise false.
						</para>
					</listitem>
					<listitem>
						<para>
							<emphasis role="bold">
								FilterProcess
							</emphasis>
							: provides the method
							<emphasis role="bold">filter</emphasis>
							(AbstractDataObject object).This is the
							first method called when a new object is
							discovered. It applies all filters on the
							object and if at least one filter returns
							true the object is not monitored.
						</para>
					</listitem>
				</itemizedlist>

			</section><!-- filters -->

		</section>

		<section xml:id="org.objectweb.proactive.ic2d.console"><info><title>org.objectweb.proactive.ic2d.console</title></info>

			

			<para>
				This plugin provides several methods to log in the
				console :
			</para>
			<itemizedlist>
				<listitem>
					<para>
						<emphasis role="bold">log</emphasis>
						(String message)
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis role="bold">warn</emphasis>
						(String message)
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis role="bold">err</emphasis>
						(String message)
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis role="bold">logException</emphasis>
						(Throwable e)
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis role="bold">debug</emphasis>
						(String message)
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis role="bold">debug</emphasis>
						(Throwable e)
					</para>
				</listitem>
			</itemizedlist>

			<para>
				You can have several different consoles. For example,
				the plugin monitoring logs in a console named
				"Monitoring", all the log4j messages are logged in the
				console "Log4j", ...
			</para>

			<para>
				If you want to add your own console, you must choose a
				unique name. and call the method Console.
				<emphasis role="bold">getInstance</emphasis>
				(String yourUniqueName) to obtain the console (if it
				didn't exist it is created). Then you can call the
				methods above on your console.
			</para>

		</section><!-- org.objectweb.proactive.ic2d.console -->

		<section xml:id="org.objectweb.proactive.ic2d.lib"><info><title>org.objectweb.proactive.ic2d.lib</title></info>

			

			<para>
				This plugin contains all jar (which are not provided by
				Eclipse) necessary to the other plugins (like
				ProActive.jar, log4j.jar, ...). So if you modify the
				code and need a new jar, you have to add it to the
				plugin lib. And if you create a new plugin which needs a
				jar which is in the plugin lib, it must be dependent of
				this plugin.
			</para>

		</section>

	</section><!-- Architecture and documentation -->

	<!-- ************************************************************************************************** -->

	<section><info><title>Extending IC2D</title></info>
		

		<section xml:id="checkout"><info><title>How to checkout IC2D</title></info>
			

			<para>
				Here is the IC2D SVN repository :
				<emphasis role="bold">
					svn://scm.gforge.inria.fr/svn/proactive/branches/proactive_newIC2D
				</emphasis>
			</para>

			<para>
				You have to checkout :
			</para>
			
			<itemizedlist>
				<listitem>
					<para>
						org.objectweb.proactive.ic2d
					</para>
				</listitem>
				<listitem>
					<para>
						org.objectweb.proactive.ic2d.monitoring
					</para>
				</listitem>
				<listitem>
					<para>
						org.objectweb.proactive.ic2d.lib
					</para>
				</listitem>
				<listitem>
					<para>
						org.objectweb.proactive.ic2d.console
					</para>
				</listitem>
				<listitem>
					<para>
						org.objectweb.proactive.ic2d.launcher
					</para>
				</listitem>
			</itemizedlist>

			<para>
				If you are using
				<emphasis role="bold">Eclipse</emphasis>
				and its plugin
				<emphasis role="bold">Subclipse</emphasis>
				, open the
				<emphasis role="bold">
					SVN Repository perspective
				</emphasis>
				and checkout all those folders as
				<emphasis role="bold">new Java projects</emphasis>
				.
			</para>

<!-- **************************************** ERREUR *************************************** -->
			<para>
				<figure xml:id="svnRepository"><info><title>SVN Repository</title></info>
					
						<mediaobject>
							<imageobject>
								<imagedata scalefit="1" width="100%" contentdepth="100%"  fileref="ic2d/images/extending/svnRepository.png" format="PNG"/>
							</imageobject>
						</mediaobject>
				</figure>
			</para>
			
<!-- **************************************************************************************** -->
			
			<para>
				You'll maybe have to replace the proactive.jar file in
				the plugin org.objectweb.proactive.ic2d.lib, it depends
				on your ProActive version.
			</para>
			
			<para>
				Now, you can run IC2D clicking on the link
				<emphasis role="bold">Launch the product</emphasis>
				in
				<emphasis role="bold">ic2d.product</emphasis>
				in the org.objectweb.proactive.ic2d project.
			</para>
			
			<para>
				<figure xml:id="launch"><info><title>ic2d.product</title></info>
					
					<mediaobject>
						<imageobject>
							<imagedata scalefit="1" width="100%" contentdepth="100%"  fileref="ic2d/images/extending/launch.png" format="PNG"/>
						</imageobject>
					</mediaobject>
				</figure>
			</para>
			
		</section><!-- checkout -->

		<section xml:id="implementAPlugin"><info><title>How to implement a plug-in for IC2D</title></info>
			
			
			
			<para>
				IC2D is a
				<emphasis role="bold">
					Rich Client Platform (RCP)
				</emphasis>
				based on the familiar
				<emphasis role="bold">
					Eclipse plug-in architecture
				</emphasis>
				.
			</para>
			
			<section xml:id="createAProject"><info><title>
					Create a project with the plug-in project wizard
				</title></info>
				
				
				
				<para>
					If you want to create a plug-in for IC2D, you have
					to use the Eclipse's
					<emphasis role="bold">
						Plug-in Development Environment (PDE)
					</emphasis>
					. This is a complete environment that Eclipse
					provides for plug-in development. The PDE adds a new
					perspective and several views and wizards that help
					you create, maintain, and publish plug-ins. The PDE
					creates boilerplate starter code that you can use to
					build your plug-in. This section explains how to use
					the
					<emphasis role="bold">
						plug-in project wizard
					</emphasis>
					to create your plug-in.
				</para>
				
				<orderedlist>
					<listitem>
						<para>
							Select
							<emphasis role="bold">
								File &gt; New &gt; Project
							</emphasis>
							from the menu bar to open the new project
							wizard.
						</para>
					</listitem>
					<listitem>
						<para>
							Select
							<emphasis role="bold">
								Plug-in Project
							</emphasis>
							in
							<emphasis role="bold">
								Plug-in Development
							</emphasis>
							.
						</para>
					</listitem>
				</orderedlist>
				
				<para>
					<figure xml:id="newProject"><info><title>Create a new project</title></info>
						
						<mediaobject>
							<imageobject>
								<imagedata scalefit="1" width="100%" contentdepth="100%"  fileref="ic2d/images/extending/new_project.png" format="PNG"/>
							</imageobject>
						</mediaobject>
					</figure>
				</para>
				
				<orderedlist continuation="continues">
					<listitem>
						<para>
							Click
							<emphasis role="bold">Next</emphasis>
							.
						</para>
					</listitem>
					<listitem>
						<para>
							In the
							<emphasis role="bold">
								Project name
							</emphasis>
							field, enter a name for the plug-in. For
							example, we chose
							org.objectweb.proactive.ic2d.example. You
							must use the fully-qualified name to ensure
							its uniqueness.
						</para>
					</listitem>
					<listitem>
						<para>
							In the Project contents pane, accept the
							default directory value.
						</para>
					</listitem>
					<listitem>
						<para>
							Make sure the
							<emphasis role="bold">
								Create a Java project
							</emphasis>
							option is selected since we want our project
							to contain Java files. Accept the default
							values of the other options.
						</para>
					</listitem>
					<listitem>
						<para>
							Beginning in Eclipse 3.1 you will get best
							results by using the
							<emphasis role="bold">
								OSGi bundle manifest
							</emphasis>
							. In contrast to previous versions, this is
							now the default.
						</para>
					</listitem>
				</orderedlist>
				
				<para>
					<figure xml:id="newPluginProject"><info><title>Specify name and plug-in structure</title></info>
						
						<mediaobject>
							<imageobject>
								<imagedata scalefit="1" width="100%" contentdepth="100%"  fileref="ic2d/images/extending/new_plugin_project.png" format="PNG"/>
							</imageobject>
						</mediaobject>
					</figure>
				</para>
				
				<orderedlist continuation="continues">
					<listitem>
						<para>
							Click
							<emphasis role="bold">Next</emphasis>
							.
						</para>
					</listitem>
					<listitem>
						<para>
							Now enter the fully qualified
							<emphasis role="bold">
								ID of the plug-in
							</emphasis>
							. By default it is the same as its project
							name.
						</para>
					</listitem>
					<listitem>
						<para>
							Accept the default values of the other
							options.
						</para>
					</listitem>
				</orderedlist>
				
				<para>
					<figure xml:id="newPluginProject2"><info><title>Specify plug-in content</title></info>
						
						<mediaobject>
							<imageobject>
								<imagedata scalefit="1" width="100%" contentdepth="100%"  fileref="ic2d/images/extending/new_plugin_project_2.png" format="PNG"/>
							</imageobject>
						</mediaobject>
					</figure>
				</para>
				
				<orderedlist continuation="continues">
					<listitem>
						<para>
							Click
							<emphasis role="bold">Finish</emphasis>
							.
						</para>
					</listitem>
				</orderedlist>
				
			</section><!-- createAProject -->

			<section xml:id="pluginStructure"><info><title>The plug-in structure</title></info>
				
				
				
				<para>
					The plug-in project has the file structure
					illustrated in the followed figure.
				</para>
				
				<para>
					<figure xml:id="pluginStructureScreenshot"><info><title>The plug-in structure</title></info>
						
						<mediaobject>
							<imageobject>
								<imagedata scalefit="1" width="100%" contentdepth="100%"  fileref="ic2d/images/extending/package_explorer.png" format="PNG"/>
							</imageobject>
						</mediaobject>
					</figure>
				</para>
				
			</section><!-- pluginStructure -->
			
			<section xml:id="pluginManifest"><info><title>Plug-in manifest</title></info>
				
				
				
				<para>
					The plug-in manifest ties all the code and
					resources together. When you first create a
					plug-in, Eclipse will create and open the
					manifest for you automatically. The manifest is
					split into two files:
					<emphasis role="bold">MANIFEST.MF</emphasis>
					and
					<emphasis role="bold">plugin.xml</emphasis>
					. PDE provides a fancy editor to modify the
					options stored in these files (see
					<xref linkend="PDEOverview"/>
					) but also allows you to edit the source
					directly.
				</para>
				
				<para>
					<figure xml:id="PDEOverview"><info><title>
							Interface for editing the manifest and
							related files.
						</title></info>
						
						<mediaobject>
							<imageobject>
								<imagedata scalefit="1" width="100%" contentdepth="100%"  fileref="ic2d/images/extending/overview.png" format="PNG"/>
							</imageobject>
						</mediaobject>
					</figure>
				</para>
				
				<para>
					<emphasis role="bold">MANIFEST.MF</emphasis>
				</para>
				
				<para>
					The
					<emphasis role="bold">
						OSGi bundle manifest
					</emphasis>
					is stored in MANIFEST.MF. OSGi is the name of a
					standard that Eclipse uses for dynamically
					loading plug-ins.
					<xref linkend="manifestMFListing"/>
					shows the OSGi bundle manifest generated by the
					plug-in wizard. Everything in this file can be
					edited by the Manifest editor, so
					<emphasis role="bold">
						there should be no need to edit it by hand
					</emphasis>
					. However if you need to, just double-click it
					in the Package Explorer to bring up the Manifest
					editor, then click on the MANIFEST.MF tab in the
					editor to see and modify the source.
				</para>
				
				<example xml:id="manifestMFListing"><info><title>MANIFEST.MF</title></info>
					
					<para>
						<screen>
Manifest-Version: 1.0
Bundle-ManifestVersion: 2 Bundle-Name:
Example Plug-in Bundle-SymbolicName:
org.objectweb.proactive.ic2d.example
Bundle-Version: 1.0.0 Bundle-Activator:
org.objectweb.proactive.ic2d.example.ExamplePlugin
Bundle-Localization: plugin Require-Bundle:
org.eclipse.ui, org.eclipse.core.runtime
Eclipse-AutoStart: true
						</screen>
					</para>
				</example>
				
				<para>
					<emphasis role="bold">plugin.xml</emphasis>
				</para>
				<para>
					The Eclipse extension manifest is called
					plugin.xml. It's used for defining and using
					Eclipse
					<emphasis role="bold">
						extension points
					</emphasis>
					, so if you're not using extension points then
					this file may be omitted. Extension points are
					the fundamental way that Eclipse plug-ins are
					tied together. This new plug-in is not yet using
					extension points so the plug-in wizard didn't
					generate the plugin.xml file.
				</para>
				
			</section><!-- pluginManifest -->
<!-- ************************************************* -->

			<section xml:id="pluginClass"><info><title>Plug-in class</title></info>

				

				<para>
					The plug-in class is an optional singleton class
					that can be used to store global information for
					the plug-in. It's also a convenient place to put
					a few static utility functions used by other
					classes in the plug-in. See the listing
					<xref linkend="pluginClassListing"/>
					for the plug-in class that was created for us by
					the plug-in wizard.
				</para>

				<example xml:id="pluginClassListing"><info><title>ExamplePlugin.java</title></info>
					
					<para>
					<programlisting xml:lang="java">
package org.objectweb.proactive.ic2d.example;

import org.eclipse.ui.plugin.*;
import org.eclipse.jface.resource.ImageDescriptor;
import org.osgi.framework.BundleContext;

/**
 * The main plugin class to be used in the desktop.
 */
public class ExamplePlugin extends AbstractUIPlugin {

	//The shared instance.
	private static ExamplePlugin plugin;
	
	/**
	 * The constructor.
	 */
	public ExamplePlugin() {
		plugin = this;
	}

	/**
	 * This method is called upon plug-in activation
	 */
	public void start(BundleContext context) throws Exception {
		super.start(context);
	}

	/**
	 * This method is called when the plug-in is stopped
	 */
	public void stop(BundleContext context) throws Exception {
		super.stop(context);
		plugin = null;
	}

	/**
	 * Returns the shared instance.
	 */
	public static ExamplePlugin getDefault() {
		return plugin;
	}

	/**
	 * Returns an image descriptor for the image file at the given
	 * plug-in relative path.
	 *
	 * @param path the path
	 * @return the image descriptor
	 */
	public static ImageDescriptor getImageDescriptor(String path) {
		return AbstractUIPlugin.imageDescriptorFromPlugin("org.objectweb.proactive.ic2d.example", path);
	}
}
					</programlisting>
					</para>
				</example>

			</section><!-- pluginClass -->

			<section xml:id="buildProperties"><info><title>Build properties</title></info>

				
					<para>
					The
					<emphasis role="bold">
						build.properties
					</emphasis>
					file (see
					<xref linkend="buildPropertiesListing"/>
					) will be needed when
					<emphasis role="bold">
						exporting the application for others to use
					</emphasis>
					. In particular if your application needs any
					resources like icons they should be listed here
					in the bin.includes section. The Plug-in
					Manifest editor provides a convenient interface
					to modify this file that is less error-prone
					than modifying it by hand.
				</para>
					<example xml:id="buildPropertiesListing"><info><title>build.properties</title></info>
					
					<para>
					<screen>
source.. = src/
output.. = bin/
bin.includes = META-INF/,\ .
					</screen>
					</para>
				</example>
			</section><!-- buildProperties -->
				
			<section xml:id="addPluginToIC2D"><info><title>How to add your plugin to IC2D</title></info>
				

				<para>
					In the project
					<emphasis role="bold">
						org.objectweb.proactive.ic2d
					</emphasis>
					, open
					<emphasis role="bold">ic2d.product</emphasis>
					. In the Configuration tab, click
					<emphasis role="bold">Add</emphasis>
					.
				</para>

				<para>
					<figure xml:id="ic2dConfiguration"><info><title>Configuration</title></info>
						
						<mediaobject>
							<imageobject>
								<imagedata scalefit="1" width="100%" contentdepth="100%"  fileref="ic2d/images/extending/ic2d_product.png" format="PNG"/>
							</imageobject>
						</mediaobject>
					</figure>
				</para>

				<para>Then select your plug-in.</para>

				<para>
					<figure xml:id="pluginSelection"><info><title>Plug-in selection</title></info>
						
						<mediaobject>
							<imageobject>
								<imagedata scalefit="1" width="100%" contentdepth="100%"  fileref="ic2d/images/extending/plugin_selection.png" format="PNG"/>
							</imageobject>
						</mediaobject>
					</figure>
				</para>

				<orderedlist>
					<listitem>
						<para>
							Now, click Add
							<emphasis role="bold">
								Required Plug-ins
							</emphasis>
							.
						</para>
					</listitem>
					<listitem>
						<para>
							Return to the
							<emphasis role="bold">Overview</emphasis>
							tab and click
							<emphasis role="bold">Synchronize</emphasis>
							. Now launch ic2d by clicking
							<emphasis role="bold">
								Launch the product
							</emphasis>
							.
						</para>
					</listitem>
					<listitem>
						<para>
							You can verify that your plug-in is
							integrated : in the IC2D frame, go to
							<emphasis role="bold">
								Help &gt; About product &gt; Plug-in
								Details
							</emphasis>
							.
						</para>
					</listitem>
				</orderedlist>

				<para>
					<figure xml:id="aboutPlugin"><info><title>About product Plug-ins</title></info>
						
						<mediaobject>
							<imageobject>
								<imagedata scalefit="1" width="100%" contentdepth="100%"  fileref="ic2d/images/extending/product_plugins.png" format="PNG"/>
							</imageobject>
						</mediaobject>
					</figure>
				</para>

			</section><!-- addPluginToIC2D -->

			<section xml:id="perspectivesViewsEditors"><info><title>Perspectives, views and editors</title></info>

				

				<para>
					<figure xml:id="workbenchStructure"><info><title>Workbench structure</title></info>
						
						<mediaobject>
							<imageobject>
								<imagedata scalefit="1" width="100%" contentdepth="100%"  fileref="ic2d/images/extending/workbench_decomposed.png" format="PNG"/>
							</imageobject>
						</mediaobject>
					</figure>
				</para>

			</section><!-- perspectivesViewsEditors -->

			<section xml:id="ic2dPerspectives"><info><title>Perspectives</title></info>
				
				

				<para>
					Perspectives provide an additional layer of
					organization inside the workbench page. A
					perspective defines an appropriate
					<emphasis role="bold">
						collection of views
					</emphasis>
					, their layout, and applicable actions for a
					given user task. Users can switch between
					perspectives as they move across tasks. From an
					implementation point of view, the user's active
					perspective controls which views are shown on
					the workbench page and their positions and
					sizes. Editors are not affected by a change in
					perspective.
				</para>
					<para>
					A new perspective is added to the workbench
					using a simple two step process :
				</para>

				<orderedlist>
					<listitem>
						<para>
							<emphasis role="bold">
								Add a perspective extension to the
								plugin.xml file.
							</emphasis>
						</para>
					</listitem>
					<listitem>
						<para>
							<emphasis role="bold">
								Define a perspective class for the
								extension within the plug-in.
							</emphasis>
						</para>
					</listitem>
				</orderedlist>

				<para>
					<emphasis role="bold">
						Step 1 : Add a Perspective Extension to the
						plugin.xml file
					</emphasis>
				</para>

				<orderedlist>
					<listitem>
						<para>
							Open
							<emphasis role="bold">
								MANIFEST.MF
							</emphasis>
							with the Plug-in Manifest Editor
						</para>
					</listitem>
					<listitem>
						<para>
							Open the
							<emphasis role="bold">
								Extensions
							</emphasis>
							tab
						</para>
					</listitem>
				</orderedlist>

				<para>
					<figure xml:id="extensions_0"><info><title>Extensions tab (no extensions)</title></info>
						
						<mediaobject>
						<imageobject>
							<imagedata scalefit="1" width="100%" contentdepth="100%"  fileref="ic2d/images/extending/extensions-0.png" format="PNG"/>
							</imageobject>
						</mediaobject>
					</figure>
				</para>

				<orderedlist continuation="continues">
					<listitem>
						<para>
							Click
							<emphasis role="bold">Add</emphasis>
						</para>
					</listitem>
					<listitem>
						<para>
							In the
							<emphasis role="bold">
								Extensions Points
							</emphasis>
							tab, select
							<emphasis role="bold">
								org.eclipse.ui.perspectives
							</emphasis>
						</para>
					</listitem>
				</orderedlist>

				<para>
					<emphasis role="bold">
						Ajouter un screenshot
					</emphasis>
				</para>

				<orderedlist continuation="continues">
					<listitem>
						<para>
							Click
							<emphasis role="bold">Finish</emphasis>
						</para>
					</listitem>
				</orderedlist>

				<para>
					<figure xml:id="extensions_1"><info><title>
							Extensions tab (org.eclipse.ui.perspectives)
						</title></info>
						
						<mediaobject>
							<imageobject>
								<imagedata scalefit="1" width="100%" contentdepth="100%"  fileref="ic2d/images/extending/extensions-1.png" format="PNG"/>
							</imageobject>
						</mediaobject>
					</figure>
				</para>

				<orderedlist continuation="continues">
					<listitem>
						<para>
							Right click the new extension :
							<emphasis role="bold">
								New &gt; perspective
							</emphasis>
						</para>
					</listitem>
					<listitem>
						<para>
							Now, enter the
							<emphasis role="bold">ID</emphasis>
							, the
							<emphasis role="bold">name</emphasis>
							and the
							<emphasis role="bold">class</emphasis>
							corresponding to the perspective.
						</para>
					</listitem>
				</orderedlist>

				<para>
					<figure xml:id="extensions_2"><info><title>Extensions tab (Example)</title></info>
						
						<mediaobject>
							<imageobject>
								<imagedata scalefit="1" width="100%" contentdepth="100%"  fileref="ic2d/images/extending/extensions-2.png" format="PNG"/>
							</imageobject>
						</mediaobject>
					</figure>
				</para>

				<para>
					If the plugin.xml file didn't exist, it is now
					created.
					<xref linkend="pluginXMLexample"/>
					shows the plugin.xml file that was created.
				</para>

				<example xml:id="pluginXMLexample"><info><title>plugin.xml</title></info>
					
					<para>
					<programlisting xml:lang="xml">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;?eclipse version="3.0"?&gt;
&lt;plugin&gt;
   &lt;extension
         point="org.eclipse.ui.perspectives"&gt;
      &lt;perspective
            class="org.objectweb.proactive.ic2d.example.ExamplePerspective"
            id="org.objectweb.proactive.ic2d.example.ExamplePerspective"
            name="Example"/&gt;
   &lt;/extension&gt;
&lt;/plugin&gt;
					</programlisting>
					</para>
				</example>




				<para>
					<emphasis role="bold">
						Step 2 : Define a Perspective Class for the
						Extension within the Plug-in
					</emphasis>
				</para>

				<para>
					Now we need to define the perspective class
					which must implements the IPerspectiveFactory
					interface :
				</para>

				<example xml:id="examplePlugin"><info><title>ExamplePlugin.java</title></info>
					
					<para>
					<programlisting xml:lang="java">
package org.objectweb.proactive.ic2d.example;

import org.eclipse.ui.IPageLayout;
import org.eclipse.ui.IPerspectiveFactory;

public class ExamplePerspective implements IPerspectiveFactory {

	public static final String ID="org.objectweb.proactive.ic2d.example.ExamplePerspective";
	
	public void createInitialLayout(IPageLayout layout) {
		// TODO Auto-generated method stub

	}

}
					</programlisting>
					</para>
				</example>

				<para>
					You have created your first perspective !
				</para>

			</section><!-- ic2dPerspectives -->

			<section xml:id="views"><info><title>Views</title></info>

				

				<para>
					A view is typically used to navigate a hierarchy
					of information, open an editor, or display
					properties for the active editor.
				</para>

				<para>
					Create a view looks like create a perspective.
					You have to
					<emphasis role="bold">
						add a perspective extension to the
						plugin.xml file
					</emphasis>
					and to
					<emphasis role="bold">
						define a view class for the extension within
						the plug-in
					</emphasis>
					.
				</para>

				<para>
					<emphasis role="bold">
						Step 1 : Add a View Extension to the
						plugin.xml file
					</emphasis>
				</para>

				<para>
					Add an extension : org.eclipse.ui.views, then
					add a view and configure it.
				</para>

			</section><!-- views -->

			<section xml:id="editor"><info><title>Editors</title></info>
					
				

				<para>
					An editor is a visual component within a
					workbench page. It is used to interact with the
					primary focus of attention, which may be a
					document, data object, or person. The primary
					focus of attention is a reflection of the
					primary task.
				</para>
				
			</section><!-- editor -->

			<section xml:id="links"><info><title>Useful links</title></info>
				

				<itemizedlist>
					<listitem>
						<para>
							<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://devresource.hp.com/drc/technical_articles/ePlugIn/index.jsp">
								Creating Eclipse plug-ins
							</link>
						</para>
					</listitem>
					<listitem>
						<para>
							<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.eclipse.org/articles/Article-RCP-1/tutorial1.html">
								Rich Client Tutorial Part 1
							</link>
						</para>
					</listitem>
					<listitem>
						<para>
							<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.eclipse.org/articles/Article-RCP-2/tutorial2.html">
								Rich Client Tutorial Part 2
							</link>
						</para>
					</listitem>
					<listitem>
						<para>
							<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.eclipse.org/articles/Article-RCP-3/tutorial3.html">
								Rich Client Tutorial Part 3
							</link>
						</para>
					</listitem>
					<listitem>
						<para>
							<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.eclipsecon.org/2005/presentations/EclipseCon2005_Tutorial26.pdf">
								Developing for the Rich Client Platform
							</link>
						</para>
					</listitem>
					<listitem>
						<para>
							<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://wiki.eclipse.org/images/d/d9/EclipseCon_RCP_Tutorial_2006.pdf">
								Rich Client Application Development
							</link>
						</para>
					</listitem>
					<listitem>
						<para>
							<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.eclipse.org/articles/viewArticle/ViewArticle2.html">
								Creating an Eclipse View
							</link>
						</para>
					</listitem>
					<listitem>
						<para>
							<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.eclipse.org/articles/using-perspectives/PerspectiveArticle.html">
								Using Perspectives in the Eclipse UI
							</link>
						</para>
					</listitem>
					<listitem>
						<para>
							<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://wiki.eclipse.org/index.php/Eclipse_FAQs">
								The Official Eclipse FAQs
							</link>
						</para>
					</listitem>
				</itemizedlist>

			</section><!-- links -->

		</section><!-- implementAPlugin -->

	</section>

	<section><info><title>How to create the IC2D stand-alone application from the sources</title></info>
		

		<section xml:id="Required"><info><title>Required</title></info>
			
			<note><info><title>Required</title></info>
			
			<para>
				You need to have :
			</para>
			
			<itemizedlist>
				<listitem>
					<para>
						Eclipse 3.2 (with the GEF plug-in) (To install GEF go to the FAQ chapter)
					</para>
				</listitem>
				<listitem>
					<para>
						Sources of ProActive (To get the current SVN repository of ProActive, see <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://proactive.inria.fr/svn_access.htm">http://proactive.inria.fr/svn_access.htm</link>)
					</para>
				</listitem>
			</itemizedlist>
			</note>
		</section>
		
		<section xml:id="FirstStep"><info><title>First step: Import required libraries in the 'org.objectweb.proactive.ic2d.lib' plug-in</title></info>
			
				<para>
				<screen>
	cd ProActive/compile
	./build ic2dLib (linux)
	./build.bat ic2dLib (windows)</screen>
			</para>

			<para>
			A new '<emphasis role="bold">ProActive.jar</emphasis>' is created and pasted in the '<emphasis role="bold">org.objectweb.proactive.ic2d.lib</emphasis>'.
			</para>

			<note>
			<para>
			The 'org.objectweb.proactive.ic2d.lib' plug-in has a lot of libraries including ProActive.
			If a plug-in want to use ProActive, it need to depends on this plug-in.
			</para>
			</note>
		</section>

		<section xml:id="SecondStep"><info><title>Second step: Import the different plug-ins in Eclipse</title></info>
			
			<para>
			 In Eclipse
			 </para>
			 	<orderedlist>
					<listitem>
						<para>Select:
						<emphasis role="bold">'File'&gt;'Import'&gt;'General'&gt;'Existing Projects into Workspace'</emphasis>
						</para>
					</listitem>
					<listitem>
						<para>
						Next, select as root directory '<emphasis role="bold">ProActive/ic2d-plugins-src</emphasis>'
						</para>
					</listitem>
					<listitem>
						<para>
						 And select all (except P2P)
						 </para>
					</listitem>
				</orderedlist>
			<para>
			 Now, you have several new projects in your workspace.
			</para>
		</section>

		<section xml:id="ThirdStep"><info><title>Third step: Launch IC2D in Eclipse</title></info>
			
			<para>Copy the file '<emphasis role="bold">ic2d.java.policy </emphasis>' from '<emphasis role="bold">ProActive/ic2d-plugins-src/org.objectweb.proactive.ic2d/ic2d.java.policy</emphasis>' and paste this one in your <emphasis role="bold">home</emphasis> directory.</para>

			<note><info><title>On Windows</title></info>
			
			<itemizedlist>
				<listitem><para>Select the '<emphasis role="bold">org.objectweb.proactive.ic2d</emphasis>' plug-in, and open the file '<emphasis role="bold">ic2d.product</emphasis>'</para></listitem>
				<listitem><para>Select the '<emphasis role="bold">Launcher</emphasis>' panel, and in the VM Arguments replace : -Djava.security.policy=<emphasis role="bold">${env_var:HOME}</emphasis> by -Djava.security.policy=<emphasis role="bold">"C:\pathToYourHome\ic2d.java.policy"</emphasis> (example: C:\Document And Settings\YourLogin\ic2d.java.policy)</para></listitem>
				<listitem><para>Next, Save.</para></listitem>
			</itemizedlist>
			</note>
			<para>
				In the Testing part, press '<emphasis role="bold">Synchronize</emphasis>', and '<emphasis role="bold">Launch the product</emphasis>'
			</para>
		</section>

		<section xml:id="lastStep"><info><title>Last step: Export IC2D</title></info>
			
			<para>
				<orderedlist>
					<listitem>
						<para>
						Select the '<emphasis role="bold">org.objectweb.proactive.ic2d</emphasis>' plug-in, and open the file '<emphasis role="bold">ic2d.product</emphasis>'
						</para>
					</listitem>

					<listitem>
						<para>
						In the Exporting part, press '<emphasis role="bold">Eclipse Product export wizard</emphasis>'
						</para>
					</listitem>					

					<listitem>
						<para>
						Select the name of the root directory of the IC2D stand-alone application (ex: MyIC2D).
						</para>
					</listitem>

					<listitem>
						<para>
						Select, also the destination, where to create the IC2D stand-alone application.
						</para>
					</listitem>

					<listitem>
						<para>
						Press 'Finish'
						</para>
					</listitem>
					
					<listitem>
						<para>
							Now, you have a new directory containing your product.
							Modify the file <emphasis role="bold">IC2D.ini</emphasis> and replace:
				<emphasis role="bold">${env_var:HOME}</emphasis>
				by:
				<emphasis role="bold">${user.home}</emphasis>
						</para>
					</listitem>
				</orderedlist>
			</para>
			<para>

			</para>
		</section>

		<section xml:id="FAQExportProduct"><info><title>FAQ</title></info>
			
			<section xml:id="isGEFinstalled"><info><title>How to know if my Eclipse contains the GEF plug-in?</title></info>
				
				<para>
					In Eclipse, go to:
					'Help'&gt;'About Eclipse SDK'&gt;'Feature Details'
					And search 'Graphical Editing Framework' as Feature Name.
				</para>
			</section>
			<section xml:id="installGEF"><info><title>How to install GEF in Eclipse?</title></info>
				
				<para>
					In Eclipse, go to:
					<orderedlist>
					<listitem>
						<para><emphasis role="bold">'Help'&gt;'Software Updates'&gt;'Find and Install'</emphasis></para>
					</listitem>
					<listitem>
						<para>	
						Select '<emphasis role="bold">Search fo new features to install</emphasis>'
						</para>
					</listitem>
					<listitem>
					<para>
					And check '<emphasis role="bold">Callist Discovery Site</emphasis>'
					</para>
					</listitem>
					<listitem>
					<para>
					Select the '<emphasis role="bold">Callisto Discovery Site</emphasis>' in the Update Site Mirrors frame.
					</para>
					</listitem>
					<listitem>
					<para>
					Then, Check '<emphasis role="bold">Graphical Editing Framework</emphasis>'
					</para>
					</listitem>
					<listitem>
					<para>
					And install this new feature.
					</para>
					</listitem>
					</orderedlist>
				</para>
			</section>
			<section xml:id="useSubclipse"><info><title>How use SVN with Eclipse?</title></info>
				
				<para>See <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://subclipse.tigris.org/install.html">http://subclipse.tigris.org/install.html</link>
				</para>
			</section>
			<section xml:id="useSVN"><info><title>How to get the current SVN repository of ProActive?</title></info>
				
				<para>See
				<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://proactive.inria.fr/svn_access.htm">http://proactive.inria.fr/svn_access.htm</link>
				</para>
			</section>
			<section xml:id="compileLIB"><info><title>The project 'org.objectweb.proactive.ic2d.lib' desn't compile</title></info>
				
				<para>
					Maybe, the plug-in try to export some classes which it doesn't contains.
					So, on the '<emphasis role="bold">org.objectweb.proactive.ic2d.lib</emphasis>' project, do a right click, and select '<emphasis role="bold">Properties</emphasis>'
					Go to Java Build Path, and select the '<emphasis role="bold">Libraries</emphasis>' frame.
					Now remove jar files which displays an error message.
				</para>
			</section>
			<section xml:id="deltaPack"><info><title>How to create a IC2D stand-alone application for multiple platforms?</title></info>
				
				<para>
					Install the RCP delta pack. See <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://help.eclipse.org/help32/index.jsp?topic=/org.eclipse.pde.doc.user/guide/tools/export_wizards/export_product.htm">Export Product</link>
				</para>
			</section>
		</section>
		
		<section xml:id="RCPLinks"><info><title>UseFul links</title></info>
			
			<itemizedlist>
				<listitem><para><link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.eclipse.org/articles/Article-RCP-1/tutorial1.html">Rich Client Tutorial</link></para></listitem>
				<listitem><para><link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://wiki.eclipse.org/index.php/Rich_Client_Platform">Eclipse Wiki : Rich Client Platform</link></para></listitem>
				<listitem><para><link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://wiki.eclipse.org/RCP_FAQ">RCP Eclipse FAQ</link></para></listitem>
				<listitem><para><link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www-128.ibm.com/developerworks/edu/os-dw-os-ecl-rcpapp.html">Developing your first Eclipse RCP application</link></para></listitem>
			</itemizedlist>
		</section>
	</section>


</chapter>
