// Created a group of AO of type 'A' in the JVMs specified 
// by nodes. ga is a Typed Group of type 'A'. 
// The number of AO being created matches the number of param arrays.
// Nodes can be a Virtual Node defined in an XML descriptor */
A ga = (A) PAGroup.newGroup( 'A', params, nodes);

// A general group communication without result.
// A request to foo is sent in parallel to the active objects in the in group ga  */
ga.foo(...);

// A general group communication with a result.
// gv is a typed group of 'V', which is first a group
// of awaited Futures, to be filled up asynchronously 
V gv = ga.bar(...);

// Use of the result of an asynchronous group call. It is also a  
// collective operation: gee method is called in parallel on each object in  the group. 
// Wait-by-necessity occurs when the results are awaited
gv.gee (...);

// Get the group representation of a typed group
Group ag = PAGroup.getGroup(ga);

// Add object in the group ag.
// o can be a standard Java object or an AO,
// it must be of a compatible type 
ag.add(o);

// Removes the object at the specified index
ag.remove(index)

// Returns to the typed view of a group
A ga2 = (A) ag.getGroupByType();
   
// By default, a group used as a parameter of a group communication
// is sent as a deep copy of the group.
// On a group call (ga.foo(g)) the scatter 
// parameter is dispatched in a round robin fashion to the active objects in the
// target group, e.g. upon ga.foo(g)
void PAGroup.setScatterGroup(g);
     
// Get back to the default: entire group transmission in all group
// communications, e.g. upon ga.foo(g) 
void PAGroup.unsetScatterGroup(g);
