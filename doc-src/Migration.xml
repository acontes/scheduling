<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/css" href="viewDocbook.css"?>
<chapter id="Migration">
  <title>Mobile Agents And Migration</title>

  <!--  File: /home/irosenbe/PA_new_doc/docbook-tuto/Migration.html  -->

  <sect1>
    <title>Migration Overview</title>

    <indexterm significance="preferred">
      <primary>Migration</primary>
    </indexterm>
    <!-- //TODO add a more in depth explanation -->
	<para>
		Active Objects have the ability to migrate between nodes while
		the application is running. Whatever application was using the active
		objects will continue running regardless of the migration of active
		objects.  
	</para>
    <para>The migration of an active object can be triggered by the active
    object itself, or by an external agent. In both cases a single method
    will eventually get called to perform the migration. It is the method
    <literal> migrateTo(...)</literal> accessible from a migratable body (a body
    that inherits from <literal>MigratableBody</literal>).</para>

    <para>In order to ease the use of the migration, ProActive provides 2 sets of
    static methods in the <literal>PAMobileAgent</literal> class. The first set is
    aimed at the migration triggered from the active object that wants to
    migrate. The methods rely on the fact that the calling thread 
    is the active thread of the active object:</para>

    <itemizedlist>
      <listitem>
        <para><literal>PAMobileAgent.migrateTo(Object o)</literal>: migrate to the same
        location as an existing active object</para>
      </listitem>

      <listitem>
        <para><literal>PAMobileAgent.migrateTo(String nodeURL)</literal>: migrate to the
        location given by the URL of the node</para>
      </listitem>

      <listitem>
        <para><literal>PAMobileAgent.migrateTo(Node node)</literal>: migrate to the location
        of the given node</para>
      </listitem>
    </itemizedlist>

    <para>The second set is aimed at the migration triggered from another
    agent than the target active object. In this case the external agent must
    have a reference to the Body of the active object it wants to
    migrate. The <literal>boolean</literal> value in the following methods
    indicates if the migration modifies the application's computation.</para>

    <itemizedlist>
      <listitem>
        <para><literal>PAMobileAgent.migrateTo(Body body, Object o, boolean
        isNFRequest)</literal>: migrate to the same location as an existing
        active object</para>
      </listitem>

      <listitem>
        <para><literal>PAMobileAgent.migrateTo(Body body, String nodeURL, boolean
        isNFRequest)</literal>: migrate to the location given by the URL of the
        node</para>
      </listitem>

      <listitem>
        <para><literal>PAMobileAgent.migrateTo(Body body, Node node, boolean
        isNFRequest)</literal>: migrate to the location of the given node</para>
      </listitem>

      <listitem>
        <para><literal>PAMobileAgent.migrateTo(Body body, Node node,  boolean isNFRequest,
                             int priority)</literal>: migrate to the location of the given node
          The <literal>int</literal> value indicates the priority of the non functional request.
          The levels are defined in the <literal>Request</literal> interface.</para>
      </listitem>


    </itemizedlist>

  </sect1>

  <sect1>
    <title>Using Migration</title>

    <para>Any active object has the ability to migrate. If it references some
    passive objects, they will also migrate to the new location. Since we rely
    on the serialization to send the object on the network, <emphasis
    role="bold">the active object must implement the serializable
    interface</emphasis>. To migrate, an active object must have a method
    which contains a call to <literal> PAMobileAgent.migrateTo(...)</literal>. This call must be the
    last one in the method, i.e the method must return immediately after. Here
    is an example of a method in an active object:</para>

    <programlisting lang="java"><textobject><textdata fileref="code_snippets/migration/migration_method.txt" /></textobject></programlisting>


    <para>We don't provide any test to check if the call to migrateTo is the
    last one in the method, hence if this rule is not enforced, it can lead to
    unexpected behavior. To make this object migrate, you just have to call
    its <literal>moveTo(String)</literal> method.</para>
  </sect1>

  <sect1>
    <title>Complete example</title>
	<!-- TODO code hasn't been run, check it really works -->
    <programlisting lang="java"><textobject><textdata fileref="code_snippets/migration/migration_example.txt" /></textobject></programlisting>

    <para>The class SimpleAgent implements <literal>Serializable</literal> so
    the objects created will be able to migrate. We need to provide an empty
    constructor to avoid side effects during the creation of active objects.
    This object has two methods, <literal>moveTo()</literal> which makes it
    migrate to the specified location, and <literal>whereAreYou()</literal>
    which returns the hostname of the new location of the agent.</para>

    <para>In the main method, we first need to create an active object, which
    is done through the call to <literal>newActive()</literal>. Once this is
    done, we can call methods on it as on any object. We call its
    <literal>moveTo</literal> method which will make it migrate to the node
    specified as parameter and then we ask it what is its current
    location. For our application we pass the location of the node as runtime
    parameter to the application. </para>
    
     <programlisting lang="java"><textobject><textdata fileref="code_snippets/migration/migration_example_main.txt" /></textobject></programlisting>
    
    
    <para>To see another example of migration look at the migration example in 
      <xref linkend="hands_on_programming_CMA"/>.
    </para>
  </sect1>

  <sect1>
    <title>Dealing with non-serializable attributes</title>

	<para>Implementing a MigrationStrategy (specifying what to do on departure
	and on arrival).</para>
    <para>The migration of an active object uses serialization.
    Unfortunately, not all the objects in the Java language are serializable so 
    the first step to solve the problem is to identify the unserializable 
    components.
    In front the declaration of unserializable fields we will  put the keyword <literal>transient</literal>. This
	    indicates that the value of this variable should not be serialized.
	    After the first migration, these fields will be set to null since they have not been
	    saved. So we have to explicitly rebuild them upon arrival of the active object at its
	    new location. This can be done by using 
	    the <literal>MigrationStrategyManager</literal> interface or 
	    by implementing <literal>readObject(java.io.ObjectInputStream in)</literal> and 
    			<literal>writeObject(java.io.ObjectOutputStream out)</literal>
    			from the
    			interface <literal>Serializable</literal>.
    

    </para>
    
    <sect2>
    	<title> Using The <literal>MigrationStrategyManager</literal> Interface</title>
    	<para>We can  use the methods <literal>onArrival(String) </literal>
    	and <literal>onDeparture(String) </literal> to specify which methods will
    	be run when the active objects migrates. </para>
    	<para>
    	The arguments for <literal>onArrival(String) </literal>
    	and <literal>onDeparture(String) </literal> are the methods to be run before 
    	serialization and after deserialization. We create a new <literal>
    	MigrationStrategyManagerImpl</literal> for the body of the object to 
    	be migrated and assign the methods to be run. For this we use the 
    	<literal> initActivity(Body)</literal> method because we only need to run
    	the creation and assignment once.</para> 
    	<programlisting lang="java"><textobject><textdata fileref="code_snippets/migration/migration_strategy_example.txt"></textdata></textobject></programlisting>
    </sect2>
    <sect2>
    	<title> Using <literal>readObject(...)</literal> and 
    			<literal>writeObject(...)</literal></title>
		    <para>Another way of dealing with unserializable attributes is 
		    using the methods from the Serializable interface: </para>
		    <programlisting lang="java"><textobject><textdata fileref="code_snippets/migration/serializable_methods.txt"></textdata></textobject></programlisting>
		    <para>
		    We override these methods to provide a way to save and restore the 
		    non-serializable components of the active object:
		    </para>
    	<programlisting lang="java"><textobject><textdata fileref="code_snippets/migration/migration_read_writeObject.txt"></textdata></textobject></programlisting>

    <para>To learn how to use the methods see the <ulink  url="http://java.sun.com/javase/6/docs/api/java/io/Serializable.html" >Serializable</ulink> interface in the standard
    JavaDoc.</para>

    </sect2>
  </sect1>

  <sect1>
    <title>Mixed Location Migration</title>

    <para></para>

    <sect2>
      <title>Forwarders And Agents</title>

      <para>There are two way to communicate with an active object which has
      migrated :</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Forwarders</emphasis></para>

          <para>An active object upon leaving a site leaves behind a special
          object, a forwarder, which is in charge of forwarding incoming
          messages to the next destination. As time goes, a chain of
          forwarders builds between a caller and the mobile object. Any
          message sent to the latter will go through the chain to reach the
          agent. There is a virtual path between a caller and a mobile
          object. As soon as a call is peformed on the agent the chain of forwarders 
          is shortened into a direct link to the agent called. </para>
          <!-- TODO check with Fabrice -->
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para><emphasis>Location Server</emphasis></para>

          <para>Communicating with a mobile object can be done with an
          explicit reference towards the mobile entity, which requires the means
          to get its current location when necessary.</para>

          <para>There is a two-step communication: first there
          should be a search to obtain an up-to-date reference (localization),
          and then the actual communication. The simplest solution is to have
          a unique location server which maintains a database of the known
          position of the agents. When an object wants to communicate with an
          object which has migrated, it queries the server which sends back a
          new reference. If this is a correct reference then the communication
          takes place, otherwise a new query is issued.</para>
        </listitem>
      </itemizedlist>

      <para>Both techniques have their drawbacks. Two problems arise when
      using a forwarding scheme, especially if the ambition is scalable mobile
      agents over WAN. First, the forwarders use resources on a site as long
      as they have not been garbage collected. Thus if a chain exists between
      to objects, it will remains even if there is no new communications going
      by. Second, the longer the chain is, the more likely it will be cut
      because of a hardware or software failure. As a consequence, while
      forwarders are more efficient under some conditions, they do not appear
      to be scalable, nor reliable.</para>

      <para>The server on the other hand is a single point of failure and a
      potential bottleneck. If a server is to help communicating with a higher
      number of mobile agents, then it might not be able to serve requests
      quickly enough. Furthermore, in case of a crash, it is not possible to
      communicate with mobile active objects until the server is back. It is possible
      to avoid most of these issues by having redundant servers with load
      balancing at the cost of increasing complexity.</para>

      <para>Based on these observations and taking into account the
      variability of the environment, we use a configurable communication
      protocol which offers the main benefits from both the forwarder and the
      server while avoiding their drawbacks. Configurable with discrete and
      continuous parameters, it can be tailored to the environment to offer
      both performance and reliability.</para>

      </sect2>
      <sect2>
      	<title>Forwarder And Agent Parameters</title>
      	<para>Forwarders and agents have several parameters which control their behaviour:</para>
      	<itemizedlist>
      		<listitem><para><emphasis role="bold">forwarder time to live in milliseconds</emphasis> -  
      			<literal>proactive.mixedlocation.ttl </literal> </para>
      			<para>
		      			Time limited forwarders remain alive only for
			        a limited period. When their lifetime is over, they can be
			        removed. First of all, this brings an important advantage: scalability
			        due to absence of the DGC and the systematic reclaim of forwarding
			        resources. However this increases the risks of
			        having the forwarding chain cut since a forwarder might expire during the
			        normal execution of the application. In such a
			        situation, we rely on a server which will be considered as an
			        alternative solution. This increases the overall reliability.</para>
			        <para>
			       Use -1 to indicate that the  forwarders have a unlimited lifetime.</para>
      			</listitem>
      		<listitem><para><emphasis role="bold">forwarder updating status, boolean</emphasis> 
      				- <literal>proactive.mixedlocation.updatingForwarder</literal> </para> 
      				<para>
	      			It is possible to rely on the forwarders to maintain the location
			        of the agent by having them update the server. When they reach the end
			        of their lifetime, they can send to the server their outgoing
			        reference which could be the address of the agent or another forwarder.
			        The updatingForwarder parameter can be true or false. If true
			         it releases the agent from most of the updates. <!-- TODO most ? -->
			        In order to increase reliability, it is possible to have also the agent
			         update the server on a regular basis. This value can be <literal>true</literal>
			         or <literal>false</literal>.</para>
      		</listitem>
      		<listitem><para> <emphasis role="bold"> agent time to update in milliseconds</emphasis></para>
      			<para> 
      			Each mobile agent has a nominal Time To Update (TTU) after which
       			it will inform the localization server of its new location. 
       			The TTu is defined as the first occurence of two potential events since the last update:
       				<itemizedlist>
	       				<listitem><para><emphasis role="bold">agent migrations number, integer</emphasis> - <literal>
			      		proactive.mixedlocation.maxMigrationNb</literal> </para>
			      		<para>This parameter ndicates the number of migrations before updating the
			            server. Use -1 to indicate that the agent never updates the server.</para>
			      		</listitem>
			      		<listitem><para><emphasis role="bold">agent time on site in milliseconds</emphasis> - <literal>
			      		proactive.mixedlocation.maxTimeOnSite</literal> </para> 
			      		<para>The parameter indicates the maximum time spent on a site before updating the server. You
			            can use -1 to indicate that agent will not inform the server.</para></listitem>
       				</itemizedlist>
       				</para>
      		</listitem>
      		
      	</itemizedlist>
      	
      	        <para>If we consider that both the agent and the forwarders can send
        updates to the server, the server must be able to make the difference
        between messages from the forwarders and from the agent; those are
        always the most up to date. Also, since we don't have any constraint
        on the Time To Live (TTL) of the forwarders, it could be that a
        forwarder at the beginning of a chain dies after on at the end. If
        this happens and we are not careful when dealing with the requests,
        the server could erase a more up to date reference with an old
        one.</para>
      	
      </sect2>



      <sect2>
      	<title>Configuration File</title>
            <para>As a default, ProActive uses a "Forwarder based" strategy .
             It means that the forwarders have a unlimited lifetime and the agent never updates the location server.</para>
           
            <para>To configure your own strategy, you have to
             edit the file  <literal>
             ProActive/src/Core/org/objectweb/proactive/core/config/ProActiveConfiguration.xml</literal> and change the four values listed above.
             </para>
        		<programlisting lang="XML"><textobject><textdata 
			fileref="../src/Core/org/objectweb/proactive/core/config/ProActiveConfiguration.xml"
			></textdata></textobject></programlisting>	
    </sect2>
        
      
      <sect2>
      	<!-- TODO where is the script for launching the migration server? -->
        <title>Location Server</title>

        <para>A location server is available in the package
        org.objectweb.proactive.core.body.migration.MixedLocationServer. It
        can be launched using scripts/unix/migration/LocationServer. You can
        indicate on which node it have to be running.</para>

        <para><emphasis>Limitation</emphasis> : there can be only one
        LocationServer for the migration. </para>
      </sect2>
    
  </sect1>
</chapter>