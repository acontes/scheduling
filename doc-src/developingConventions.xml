<!-- Converted by db4-upgrade version 1.0 -->

<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="developingConventions"><info><title>Developing Conventions</title></info>
  

  <section xml:id="codeLogging"><info><title>Code logging conventions</title></info>
    

    <para>The ProActive code is currently using log4j as logging service. The
    purpose of this chapter is to assist developers for adding a valuable
    logging system in their codes. Furthermore, this page aims to fix logging
    conventions as <emphasis>rules</emphasis>. The main goal is to have an
    undifferentiated and powerful logging service for a useful using of log
    messages that's why <emphasis>everybody must apply these
    rules</emphasis>.</para>

    <section><info><title>Declaring loggers name</title></info>
      

      <para>The interface
      <literal>org.objectweb.proactive.core.util.Loggers</literal> contains
      all loggers' name as constants (public static final String). All
      loggers' name must start with <emphasis>proactive</emphasis>. It is the
      root logger. Therefore all loggers are hierarchic.</para>

      <example><info><title>declaring P2P loggers in the interface
        org.objectweb.proactive.core.util.Loggers</title></info>
        

        <programlisting xml:lang="java">/** Root logger for ProActive P2P. **/
public static final String P2P = "proactive.p2p";

/** Sub logger for starting P2P service. */
public static final String P2P_STARTSERVICE = P2P + ".startservice";

/** Sub logger for P2P acquaintances managing. */
public static final String P2P_ACQUAINTANCES = P2P + ".acquaintances";

/** Sub logger for P2P first contact step. */
public static final String P2P_FIRST_CONTACT = P2P + ".first_contact";</programlisting>
      </example>
    </section>

    <section><info><title>Using declared loggers in your classes</title></info>
      

      <para>Firstly, import good classes:</para>

      <programlisting xml:lang="java">import org.objectweb.proactive.core.util.log.ProActiveLogger;
import org.objectweb.proactive.core.util.log.Loggers;</programlisting>

      <para>Secondly, get the logger or loggers:</para>

      <programlisting xml:lang="java">private static final ProActiveLogger logger_acq = ProActiveLogger.getLogger(Loggers.P2P_ACQUAINTANCES);</programlisting>

      <para>Thirdly, log your code:</para>

      <programlisting xml:lang="java">if (logger.isDeubugEnable()) {
          logger_acq.debug("message log debug  level for P2P acquaintances managing");
       }</programlisting>

      <para>Override logging methods in <emphasis>ProActiveLogger</emphasis>.
      Use this class to add some specific treatments to log messages.</para>
    </section>

    <section><info><title>Managing loggers</title></info>
      

      <para>Using hierarchic loggers is realy helpful to choose which logging
      level for what is logged. In the log4j configuration file, typicaly
      proactive-log4j, set level of loggers, such as:</para>

      <screen># All logger at debug level
log4j.logger.proactive = DEBUG
# and P2P logger only info level is needed
log4j.logger.proactive.p2p = INFO
#For P2P first contact step needs only fatal messages
log4j.logger.proactive.p2p..first_contact = FATAL </screen>
    </section>

    <section><info><title>Logging output</title></info>
      

      <para>Enabling the name of the category using for instance [%c]
      facilitates the understanding of the logging output.</para>

      <screen>[proactive.p2p.service] DEBUG [P2PService on //trinidad.inria.fr:3000/P2PNode]: Heart-beat message received</screen>

      <para>Here we can clearly see:</para>

      <itemizedlist>
        <listitem>
          <para>a p2p.service log,</para>
        </listitem>

        <listitem>
          <para>at debugging level,</para>
        </listitem>

        <listitem>
          <para>received from the thread P2PService on
          trinidad/P2PNode,</para>
        </listitem>

        <listitem>
          <para>and the log message.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section><info><title>More information about log4j</title></info>
      

      <itemizedlist>
        <listitem>
          <para><link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://logging.apache.org/log4j/docs/manual.html">Short
          introduction to log4j</link>,</para>
        </listitem>

        <listitem>
          <para><link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://logging.apache.org/log4j/docs/api/index.html">javadoc
          documentation</link>.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section xml:id="regressionTests"><info><title>Regression Tests Writing</title></info>
    

    <para>Add your test in nonregressiontest package and <emphasis>run all
    tests before committing</emphasis> with <literal>compile/build.sh
    runTestsLocal</literal>.</para>

    <para/>
  </section>

  <section xml:id="svnCommit"><info><title>Committing modifications in the SVN</title></info>
    

    <para>You need to do several things:</para>

    <orderedlist>
      <listitem>
        <para>Get a recent PA version : <literal>svn co
        svn+ssh://my_login@scm.gforge.inria.fr/svn/proactive/trunk
        ProActive</literal> (use your login)</para>
      </listitem>

      <listitem>
        <para>Clean up your version : run the command 'build clean all format'
        this should compile with no errors and will also format the files with
        the OASIS formatting rules</para>
      </listitem>

      <listitem>
        <para>Make sure you have integrated the latest modifications of
        others. For that, you may try</para>

        <itemizedlist>
          <listitem>
            <para>with eclipse, a team -&gt; synchronize. This view shows
            conflicts. </para>
          </listitem>

          <listitem>
            <para>with the shell, svn update -dP changes files if there is no
            conflict, and tells you which files are conflicting.</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>Commit the files, making bunches for functionalities. If, to add
        the functionality "foo", you've modified files A, B, and C.java, your
        commit should be of these 3 files, and should contain a description of
        "foo"</para>
      </listitem>
    </orderedlist>
  </section>
</chapter>
