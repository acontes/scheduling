<!-- Converted by db4-upgrade version 1.0 -->

<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="OOSPMD"><info><title>OOSPMD</title></info>
  

  <section><info><title>OOSPMD: Introduction</title></info>
    

    <indexterm><primary>OOSPMD</primary><secondary>definition</secondary></indexterm>
    
    <para>SPMD stands for Single Program Multiple Data, which is a technique used
    in paralellizing applications by separating task and running them simultaneously on
    different machines or processors. ProActive allows the use of object oriented programming
    combined with the SPMD techniques. </para>


    <para>ProActive uses group communication  with SPMD in order to  free the programmer
    from having to implement the complex communication code required for
    setting identical groups in each SPMD activity. Group communication
     allows the focus to be on the application itself and not on the synchronizations.
    An SPMD group is a group of
    active objects where each one has a group referencing all the active
    objects.</para>

    <para>This chapter presents the mechanism of typed group communication as an
    new alternative to the old SPMD programming model. While being placed in
    an object-oriented context, this mechanism helps the definition and the
    coordination of distributed activities. The approach offers 
     a better structuring flexibility and implementation through a
    modest size API. The automation of key communication mechanisms
     and synchronization simplifies code writing.</para>
    
	<para>The typed group communication system can be used to simulate
    MPI-style collective communication. Contrary to MPI that requires all
    members of a group to collectively call the same communication primitive,
    our group communication scheme makes possible for one activity to call
    methods on the group.</para>
    

			
  </section>

  <section><info><title>SPMD Group Creation</title></info>
    <para>The main class for the SPMD groups is <literal>org.objectweb.proactive.api.PASPMD</literal>.
    This class contains methods for
     creating and controlling ProActive SPMD groups.  </para>

	<figure><mediaobject><imageobject><imagedata  scalefit="1" width="100%" contentdepth="100%" fileref="images/PASPMD_api.png" format="PNG"></imagedata></imageobject></mediaobject></figure>
    

    <indexterm><primary>OOSPMD</primary><secondary>groups</secondary></indexterm>
    
    <para>An SPMD group is a ProActive typed group built with the <literal>PASPMD.newSPMDGroup()</literal> method. This method looks
    like the <literal>PAGroup.newGroup()</literal> method; they
    have similar behavior (and overloads). The difference is that each member
    of an SPMD group has a reference to a group containing all the others
    members and itself (i.e. a reference to the SPMD group itself).</para>

    <para>For a standard Java class:</para>

      <para><programlisting xml:lang="java"><textobject><textdata fileref="automatic_snippets/spmd_typical_class.snip"></textdata></textobject></programlisting></para>
    

    <para>The SPMD group is built as follows:</para>

      <para><programlisting xml:lang="java"><textobject><textdata fileref="automatic_snippets/spmd_creation.snip"></textdata></textobject></programlisting></para>
    

    <para>Object members of an SPMD group are aware about the whole group.
    They can obtain some informations about the SPMD group they belong to such
    as the size of the group, their rank in the group, and a reference to the
    group in order to get more informations or to communicate with method
    invocations. Those informations are respectively obtained using the following static
    methods  of the <literal>PASPMD</literal> class.</para>

      <para><programlisting xml:lang="java"><textobject><textdata 
      	fileref="automatic_snippets/spmd_group_size.snip"></textdata></textobject></programlisting></para>

      <para><programlisting xml:lang="java"><textobject><textdata 
      	fileref="automatic_snippets/spmd_rank.snip"></textdata></textobject></programlisting></para>
	<para>and</para>
      <para><programlisting xml:lang="java"><textobject><textdata 
      	fileref="automatic_snippets/spmd_mygroup.snip"></textdata></textobject></programlisting></para>

	
  </section>

  <section><info><title>Synchronizing activities with barriers</title></info>
    

    <indexterm><primary>Barriers</primary><secondary>definition</secondary></indexterm>
    
    <para>Synchronizing processes is an important operation in any distributed
    system. Managing  concurrency when several processes try to reach the same resource
    and coordinating the action of several processes to perform a joint computation
    are important parts of distributed computing</para>
    
    <para>There are different techniques to synchronize processes.
    With a SPMD application, we have  the <emphasis role="bold">synchronization
    barriers</emphasis> mechanism.</para>
        
    <para>Traditional barriers as those provided for example by MPI
    have a blocking behavior. When a process meets such a barrier, it fully
    stops its execution immediately and informs all the
    other members of the SPMD group about its state. It is only when all the
    other members have reach this barrier too that all the processes will be
    able to continue their execution. As the barriers are often used to synchronize the communication
    between processes, it is inefficient to  completely stop the
    execution of a process without distinction between local computation and
    communication.</para>
    
    <para>As a solution to this inefficiency ProActive provides non-blocking barriers
    to only synchronize communication between activities.
    When an activity reaches  a barrier
    instruction while executing a service, it  will continue
     the execution of the current service
    until its end and tag all the next outgoing requests as post
    barrier. Consequently, any activity receiving a request tagged
    like this will delay its service until all the activities implied in this
    synchronization are ready to synchronize.
    An example of this behavior is illustrated on the
    <xref linkend="oospmd_barriers_behavior"/>.</para>
    <para>This example presents the timelines of three active objects which are 
    performing one type of barrier called a <emphasis>total barrier</emphasis>.
    The requests <literal>A</literal> and
    <literal>B</literal> are served before the
    synchronization  as they were sent
    before the reach of the barrier instruction
    (symbolized by a red point). On the contrary, the requests <emphasis>X</emphasis>
    and <emphasis>Y</emphasis> are served <emphasis>after</emphasis> the
    synchronization, as they were sent <emphasis>after
    </emphasis> the barrier instruction.</para>
        
    <figure xml:id="oospmd_barriers_behavior"><info><title>Behaviour example of a total barrier</title></info>
      

      <mediaobject>
        <imageobject>
          <imagedata scalefit="1" width="100%" contentdepth="100%"  fileref="images/oospmd_barriers_schema.svg" format="SVG"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The OOSPMD programming model provided by ProActive offers three
    kinds of barriers to synchronize activities:</para>
    
    <itemizedlist>
      <listitem>
        <para>the <emphasis role="bold">Total Barrier</emphasis></para>
      </listitem>

      <listitem>
        <para>the <emphasis role="bold">Neighbour Barrier</emphasis></para>
      </listitem>

      <listitem>
        <para>the <emphasis role="bold">Method-Based Barrier</emphasis></para>
      </listitem>
    </itemizedlist>
    

  <section><info><title>Total Barrier</title></info>
    

    <para>Total barrier directly involves the SPMD group. A call to 
          <programlisting xml:lang="java"><textobject><textdata 
      	fileref="automatic_snippets/spmd_total_barrier.snip"></textdata></textobject></programlisting>
    will block until all the members in
    the SPMD group have reached and called the identical barrier primitive. 
    Such a call communicates
    with all the members of the SPMD group. The barrier is released when the
    Active Object has received a <emphasis>barrier message</emphasis> from all
    other members of the SPMD group (including itself).</para>

    <warning><para>The string parameter is used as a unique identity name for the
    barrier. It is the programmer responsibility to ensure that two (or more)
    different barriers with the same id name are not invoked
    simultaneously.</para> </warning>

    <para>Let us take a Java class that contains a method calling a total
    barrier, here the method <emphasis role="bold">foo</emphasis>:</para>

    
      <para><programlisting xml:lang="java"><textobject><textdata fileref="automatic_snippets/spmd_total_barrier_call.snip"></textdata></textobject></programlisting></para>
    

    <para>Note that usually, strings used as unique ID are more complex; they
    can be based on the full name of the class or the package (<emphasis role="bold">org.objectweb.proactive.ClassName</emphasis>), for example.
    The SPMD group is built as follow:</para>

    
      <para><programlisting xml:lang="java"><textobject><textdata fileref="automatic_snippets/spmd_creation.snip"></textdata></textobject></programlisting></para>
    

    	<para>When the method <literal> start()</literal> is called on 
    	different instances of the class containing it,
    	the different instances will wait for <literal> myspmdgroup.foo() </literal>
    	 to be completed and the barrier call to be made 
    	before they start <literal>myspmdgroup.bar()</literal>. The instances will also 
    	synchronize after the call to <literal> myspmdgroup.bar()</literal> as there is also
    	 a second barrier <literal>PASPMD.totalBarrier("'2'")</literal>.</para>
    

    <para>The programmer has to ensure that <emphasis role="bold">all the
    members of an SPMD group call the barrier method</emphasis> otherwise the
    members of the group may indefinitely wait.</para>
  </section>

  <section><info><title>Neighbour
    barrier</title></info>
    

    <para>The Neighbour barrier is a kind of lightweight barrier, involving
   only the Active Objects specified in a given group.</para>

    <para><literal>neighbourBarrier(String,group)</literal> initiates a
    barrier only with the objects of the specified group. Those objects, that
    contribute to the end of the barrier state, are called
    <emphasis>neighbours</emphasis> as they are usually local to a given
    topology, an object that invokes the Neighbour barrier HAVE TO BE IN THE
    GROUP given as parameter. The <emphasis>barrier message</emphasis> is only
    sent to the group of neighbours.</para>

    <para>The programmer has to explicitly build this group of neighbours. The
    topology API can be used to build such group. Topologies are
    groups. They just give special access to their members or (sub)groups
    members. For instance, a matrix fits well 
    with the topology <emphasis role="bold">Plan</emphasis> that provides 
    methods to get the reference of
    neighbour members (<emphasis role="bold">left</emphasis>, <emphasis role="bold">right</emphasis>,
    <emphasis role="bold">up</emphasis>,
    <emphasis role="bold">down</emphasis>). 
    
    See the javadoc of the topology package for more information:</para>
   
    <!-- This url can only work in the html generated files: in pdf there's no ".." -->
   <screen><link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="../api/org/objectweb/proactive/core/group/topology/package-summary.html" os="html">org.objectweb.proactive.core.group.topology</link><phrase os="pdf">org.objectweb.proactive.core.group.topology</phrase></screen>
   
    <para>Like for the Total barrier, the string parameter represents a unique
    identity name for the barrier. The second parameter is the group of
    neighbours built by the programmer. Here is an example:</para>

    
      <para><programlisting xml:lang="java"><textobject><textdata fileref="automatic_snippets/spmd_neighbour_barrier.snip"></textdata></textobject></programlisting></para>
    

    <para>Refer to the <emphasis>Jacobi</emphasis> example to see a use-case of the
    Neighbour barrier. Each submatrix needs only to be synchronized with the
    submatrixes which are in its cardinal neighbours.</para>

    <para>This barrier increases the asynchronism and reduce the amount of
    exchanged messages.</para>
  </section>

  <section><info><title>Method Barrier</title></info>
    

    <para>The Method barrier does no more involve extra messages to
    communicate (i.e. the <emphasis>barrier messages</emphasis>).
    Communications between objects to release a barrier are achieved by the
    standard method call and request reception of ProActive.</para>

    <para>As a standard barrier, the method <literal>methodBarrier(String[])</literal>
    will finish the current request served by the active object that calls it, but it then wait for a request on the specified
    methods to resume. The array of string contains the name of the awaited
    methods. The order of the methods does not matter. For example:</para>

    
      <para><programlisting xml:lang="java"> PASPMD.methodBarrier({'foo', 'bar', 'gee'}); </programlisting></para>
    

    <para>The caller will stop and wait for the three methods. bar or gee can
    came first, then foo. If one wants wait for foo, then wait for bar, then
    wait for gee, three calls can be successively done:</para>

    
      <para><programlisting xml:lang="java">   PASPMD.methodBarrier({'foo'});
   PASPMD.methodBarrier({'bar'});
   PASPMD.methodBarrier({'gee'}); </programlisting></para>
    

    <para>A method barrier is used without any group (SPMD or not). To learn
     more on Groups, please refer to <xref linkend="TypedGroupCommunication"/>.</para>
  
  </section>
  </section>
  
  <section><info><title>MPI to ProActive Summary</title></info>
        

        <informaltable xml:id="mpi_to_proactive_summary"><info><title>MPI to ProActive</title></info>
          

          <tgroup cols="2">
            <colspec colname="col1" colnum="1" colwidth="2*"/>

            <colspec colname="col2" colnum="2" colwidth="2*"/>

            <thead>
              <row>
                <entry>MPI</entry>

                <entry>ProActive</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>MPI_Init and MPI_Finalize</entry>

                <entry>Activities creation</entry>
              </row>

              <row>
                <entry>MPI_Comm_Size</entry>

                <entry>PASPMD.getMyGroupSize</entry>
              </row>

              <row>
                <entry>MPI_Comm_Rank</entry>

                <entry>PASPMD.getMyRank</entry>
              </row>

              <row>
                <entry>MPI_Send and MPI_Recv</entry>

                <entry>Method call</entry>
              </row>

              <row>
                <entry>MPI_Barrier</entry>

                <entry>PASPMD.barrier</entry>
              </row>

              <row>
                <entry>MPI_Bcast</entry>

                <entry>Method call on a group</entry>
              </row>

              <row>
                <entry>MPI_Scatter</entry>

                <entry>Method call with a scatter group as parameter</entry>
              </row>

              <row>
                <entry>MPI_Gather</entry>

                <entry>Result of a group communication</entry>
              </row>

              <row>
                <entry>MPI_Reduce</entry>

                <entry>Programmer's method</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </section>
</chapter>
