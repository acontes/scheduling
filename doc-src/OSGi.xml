<!-- Converted by db4-upgrade version 1.0 -->

<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="OSGi"><info><title>ProActive on top of OSGi</title></info>
  

  <section xml:id="OSGi_html_overview"><info><title>Overview of OSGi -- Open Services Gateway initiative</title></info>
    

    <para><emphasis role="bold">OSGi</emphasis> is a corporation that works on
    the definition and promotion of open specifications. These specifications
    are mainly aimed to packaging and delivering services among all kinds of
    networks.</para>

    <para><emphasis><emphasis role="bold">OSGi
    Framework</emphasis></emphasis></para>

    <para>The OSGi specification define <emphasis role="bold">a
    framework</emphasis> that allows to a diversity of services to be executed
    in a service gateway, by this way, many applications can <emphasis role="bold">share a single JVM</emphasis> .</para>

    <figure><info><title>The OSGi framework entities</title></info>
      

      <mediaobject>
        <imageobject>
          <imagedata scalefit="1" width="100%" contentdepth="100%"  fileref="osgi_files/framework.jpg" format="JPG"/>
        </imageobject>
      </mediaobject>
    </figure>

    <indexterm><primary>Bundles</primary><secondary>OSGI</secondary></indexterm>
    
    <para><emphasis><emphasis role="bold">Bundles</emphasis></emphasis></para>

    <para>In order to be <emphasis role="bold">delivered and
    deployed</emphasis> on OSGi, each piece of code is packaged into bundles.
    Bundles are functionnal entities offering <emphasis role="bold">services
    and packages</emphasis>. They can be delivered dynamically to the
    framework. Concretely a bundle is a Java jar file containing:</para>

    <itemizedlist>
      <listitem>
        <para>The application classes, including the so called bundle
        <emphasis>Activator</emphasis></para>
      </listitem>

      <listitem>
        <para>The <emphasis>Manifest file</emphasis> that specifies properties
        about the application, for instance, which is the bundle Activator,
        whick packages are required by the application</para>
      </listitem>

      <listitem>
        <para>Other resources the application could need ( images, native
        libraries, or data files ... ) .</para>
      </listitem>
    </itemizedlist>

    <indexterm><primary>Kill</primary><secondary>bundles</secondary></indexterm>
    
    <para>Bundles can be plugged dynamically and their so called
    <emphasis>lifecycle</emphasis> can be managed through the framework (
    start, stop, update, ...).</para>

    <para><emphasis><emphasis role="bold">Manifest
    file</emphasis></emphasis></para>

    <para>This important file contains crucial parameters for the bundle file.
    It specifies which Activator (entry point) the bundle has to use, the
    bundle classpath, the imported and exported packages, ...</para>

    <para><emphasis><emphasis role="bold">Services</emphasis></emphasis></para>

    <para>Bundles communicates with each other thanks to <emphasis role="bold">services and packages sharing</emphasis>. A <emphasis role="bold">service</emphasis> is an object registered into the framework
    in order to be used by other applications. The definition of a service is
    specified in a Java interface. OSGi specify a set of standard services
    like Http Service, Log Service ...</para>

    <para>We currently use the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://oscar.objectweb.org">OSCAR objectweb</link>  implementation.
    For more information on OSGi, please visit the 
    <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.osgi.org">OSGi</link> website .</para>
  </section>

  <section xml:id="OSGi_html_proactiveBundle"><info><title>ProActive bundle and service</title></info>
    

    <para>In order to use ProActive on top of OSGi, we have developped the
    <emphasis role="bold">ProActive Bundle</emphasis> that contains all
    classes required to launch a ProActive runtime.</para>

    <para>The <emphasis role="bold">ProActive bundle offers a
    service</emphasis> , the <emphasis>ProActiveService</emphasis> that has
    almost the same interface that the ProActive static class. When
    installed, the ProActive bundle starts a new runtime, and clients that use
    the ProActive Service will be able to create active object on this
    runtime.</para>

    <figure><info><title>The Proactive Bundle uses the standard Http Service</title></info>
      

      <mediaobject>
        <imageobject>
          <imagedata scalefit="1" width="100%" contentdepth="100%"  fileref="osgi_files/proactive_bundle.jpg" format="JPG"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The active object will be accessible remotely from any java
    application, or any other OSGi gateway. The communication can be either
    <emphasis>rmi</emphasis> or <emphasis>http</emphasis>; in case of using
    http, the ProActive bundle requires the installation of the <emphasis role="bold">Http Service</emphasis> that will handle http communications
    through a Servlet. We show in the example section how to use the ProActive
    service.</para>
  </section>

  <section xml:id="OSGi_html_helloWorld"><info><title> Yet another Hello World</title></info>
    

    <para>The example below is <emphasis role="bold">a simple hello world that
    uses ProActive Service</emphasis> . It creates an Hello active Object and
    registers it as a service. We reuse the basic hello example provided within the ProActive's examples. We have to write a <emphasis role="bold">bundle
    Activator</emphasis> that will create the active object and register it as
    a OSGi service.</para>

    <para>The HelloActivator has to implements the BundleActivator
    interface.</para>

    <programlisting xml:lang="java">        public class HelloActivator implements BundleActivator {
                ...
        } </programlisting>

    <para>The <literal>start ()</literal> method is the one executed when the
    bundle starts. When the hello bundle starts we need to get the reference on
    the ProActive service and use it. Once we have the reference, we can
    create our active object thanks to the
    <literal>ProActiveService.newActive()</literal> method. Finally, we
    register our new service in the framework.</para>

    <programlisting xml:lang="java"> public void start(BundleContext context) throws Exception {
        this.context = context;

        /* gets the ProActive Service */
        ServiceReference sr = this.context.getServiceReference(ProActiveService.class.getName());
        this.proActiveService = (ProActiveService) this.context.getService(sr);
        Hello h = (Hello)this.proActiveService.newActive(
             'org.objectweb.proactive.examples.hello.Hello',
              new Object [] {});
        

/* Register the service */
        Properties props = new Properties();
        props.put('name', 'helloWorld');

        reg = this.context.registerService(
                  'org.objectweb.proactive.osgi.ProActiveService',
                   h, props);
        }      </programlisting>

    <para>Now that we created the hello active service, we have to <emphasis role="bold">package the application</emphasis> into a bundle. First of
    all, we have to write a <emphasis role="bold">Manifest File</emphasis>
    where we specify:</para>

    <itemizedlist>
      <listitem>
        <para>The name of the bundle: <literal>Hello World ProActive
        Service</literal></para>
      </listitem>

      <listitem>
        <para>The class of the Activator:
        <literal>org.objectweb.proactive.HelloActivator</literal></para>
      </listitem>

      <listitem>
        <para>The packages our application requires:
        <literal>org.objectweb.proactive....</literal></para>
      </listitem>

      <listitem>
        <para>The packages our application exports:
        org.objectweb.proactive.examples.osgi.hello</para>
      </listitem>

      <listitem>
        <para>We can specify others informations like author, ...</para>
      </listitem>
    </itemizedlist>

    <para>Here is what the Manifest looks like:</para>

    <screen>Bundle-Name: ProActive Hello World Bundle
Bundle-Description: Bundle containing Hello World ProActive example
Bundle-Vendor: OASIS - INRIA Sophia Antipolis
Bundle-version: 1.0.0
Export-Package: org.objectweb.proactive.examples.hello
DynamicImport-Package: org.objectweb.proactive ...
Bundle-Activator: org.objectweb.proactive.examples.osgi.hello.HelloActivator
</screen>

    <para><emphasis><emphasis role="bold">Installing the ProActive Bundle and
    the Hello Bundle.</emphasis></emphasis></para>

    <para>In order to run the example you need to install an OSGi framework.
    You can download and install one from the 
    <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://oscar.objectweb.org">OSCAR website</link>. Install the
    required services on the OSCAR framework:</para>

    <screen> --&gt; obr start 'Http Service' </screen>

    <itemizedlist>
      <listitem>
        <para><emphasis>Generation of the ProActive Bundle</emphasis></para>

        <para>To generate the proActiveBundle you have to run the <emphasis role="bold">build</emphasis> script with the <emphasis role="bold"><literal>proActiveBundle</literal></emphasis>
        target.</para>

        <screen>        &gt; cd $PROACTIVE_DIR/compile
        &gt; ./build proActiveBundle
</screen>

        <para>The bundle jar file will be generated in the <emphasis role="bold"><literal>$PROACTIVE_DIR/dist/ProActive/bundle/</literal></emphasis>
        directory. We need now to install and start it into the OSGi
        Framework:</para>

        <screen> --&gt; start file:///$PROACTIVE_DIR/dist/ProActive/bundle/proActiveBundle.jar </screen>
      </listitem>

      <listitem>
        <para>This command will install and start the proActive bundle on the
        gateway. Users can now deploy application that uses the
        ProActiveService.</para>
      </listitem>

      <listitem>
        <para><emphasis>Generation of the Hello World example
        bundle</emphasis></para>

        <para>To generate the Hello World bundle you have to run the <emphasis role="bold">build</emphasis> script with the <emphasis role="bold"><literal>helloWorldBundle</literal></emphasis>
        target.</para>

        <screen>        &gt; cd $PROACTIVE_DIR/compile
        &gt; ./build helloWorldBundle
</screen>

        <para>The bundle jar file will be generated in the <emphasis role="bold"><literal>$PROACTIVE_DIR/dist/ProActive/bundle/</literal></emphasis>
        directory. We need now to install and start it into the OSGi
        Framework:</para>

        <screen> --&gt; start file:///$PROACTIVE_DIR/dist/ProActive/bundle/helloWorldBundle.jar </screen>
      </listitem>

      <listitem>
        <para>The command will install and start the Hello active service. The
        hello service is now an OSGi service and can be accessed
        remotely.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="OSGi_html_futureWorks"><info><title>
     Current and Future works</title></info>
    

    <itemizedlist>
      <listitem>
        <para>We are working on a management application that remotely
        monitors and manages a large number of OSGi gateways. It uses standard
        Management API such as JMX ( Java Management eXtension). We are
        writing a ProActive Connector in order to access these JMX enabled
        gateways and uses Group Communications to handle large scale.
        Moreover, this application will be graphically written as an Eclipse
        plugin.</para>
      </listitem>

      <listitem>
        <para>We plan to deploy remotely active objects and fractal components
        on OSGi gateways.</para>
      </listitem>
    </itemizedlist>
  </section>
</chapter>
