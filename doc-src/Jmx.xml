<!-- Converted by db4-upgrade version 1.0 -->

<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="JMX"><info><title>An extended ProActive JMX Connector</title></info>
	

	<section xml:id="jmx_overview"><info><title>Overview of JMX - Java Management eXtention</title></info>
		
		<para>
			<emphasis role="bold">
				<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://java.sun.com/javase/technologies/core/mntr-mgmt/javamanagement/">
					JMX
				</link>
			</emphasis>
			Java Management Extensions is a Java technology providing
			tools and APIs for managing and monitoring Java applications
			and their resources. Resources are represented by objects
			called MBeans (for Managed Bean).
		</para>

		<para>
			<figure><info><title>
					This figure shows the JMX 3 levels architecture and
					the integration of the ProActive JMX Connector.
				</title></info>
				

				<mediaobject>
					<imageobject>
						<imagedata scalefit="1" width="100%" contentdepth="100%"   fileref="jmx/jmx-proactive.png" format="PNG" />
					</imageobject>
				</mediaobject>
			</figure>
		</para>
		<para>
			JMX defines a 3 layers management architecture :
			<itemizedlist>
				<listitem>
					<para><emphasis>The instrumentation level</emphasis>
					contains MBeans and their manageable resources. A
					Mbean is a Java Object implementing a specific
					interface and pattern. They contain and define the
					manageable attributes, the management operations
					that can be performed onto resources and the
					notifications that can be emitted by the resources.</para>
				</listitem>
				<listitem>
					<para><emphasis>The Agent Level</emphasis>
					The agent acts as a MBeans containers (the
					MBeanServer) and controls them. This level
					represents the main part in the JMX specification :
					because it give access to the managed resources to
					the clients, the agent is the architecture central
					point.</para>
				</listitem>
				<listitem>
					<para><emphasis>The Distributed Level</emphasis>
					The distributed Level enables the remote management
					of Java applications. In order to access remotely to
					managed application, JMX specification defines two
					type of remote access : protocol adaptors and
					protocol connectors. Connectors allow a manager to
					perform method calls onto a distant agent's
					MBeanServer (for example RMI). Adaptors are
					components that ensure binding between a specific
					protocol (for example for SNMP or Http) and thre
					managed resources. Indeed, they enable Mbeans to be
					accessed by existing approches.</para>
				</listitem>
			</itemizedlist>

		</para>
	</section>
	<section xml:id="jmx_connector"><info><title>Asynchronous ProActive JMX connector</title></info>
		
		<para>
			The JMX technology defines a connector based on RMI. The RMI
			connector allows the manager to connect to an MBean in a
			MBeanServer from a remote location and performs operations
			on it.
		</para>
		<para>
			We defined a ProActive Connector according to the
			<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://jcp.org/en/jsr/detail?id=160">
				JMX Remote API JSR 160
			</link>
			that enables asynchronous remote access to a JMX Agent
			thanks to ProActive. This connector is based on a call via
			an active object. When invoking the standard API
			specification methods, the access to the managed application
			is synchronous, because the JMX remote API provides
			non-reifiable methods. For example, the method invoke that
			allow to invoke a Mbean's method throws exceptions :
			<programlisting xml:lang="java">
				public Object invoke(ObjectName name, String
				operationName, Object[] params, String[] signature)
				throws InstanceNotFoundException, MBeanException,
				ReflectionException, IOException;
			</programlisting>
			
		</para>
			<para>
				We extended the API in order to provide asynchronous
				acces thanks to additionnal reifiable methods. The
				additional invoke method looks like :
			</para>
			<programlisting xml:lang="java">
				public GenericTypeWrapper invokeAsynchronous(ObjectName
				name, String operationName, Object[] params, String[]
				signature) (method names connector ( non reifiable
				methods ).
			</programlisting>
			<para>
				Thus, all requests sent to the MBean are put in the
				active object requests queue and a future object is
				returned to the client.
			</para>
	</section>

	<section><info><title>How to use the connector ?</title></info>
		
		<para>
			The ProActive connector allows you yo connect to an MBean in
			an MBean server to a remote location, and perform operations
			on it, exactly as if the operations were being performed
			locally.
		</para>
		<para>
			To perform such a call, you have first to enable the server
			connector on the application you wish to manage. This is
			simply done by adding one line of code in the application to
			be managed :
			<programlisting xml:lang="java">
				org.objectweb.proactive.jmx.server.ServerConnector
				connector = new
				org.objectweb.proactive.jmx.server.ServerConnector ();
			</programlisting>
			Once the connector server part launched, any ProActive JMX
			connector client can connect to it and manage the
			application thanks to the ClientConnector class.
			<programlisting xml:lang="java">
				org.objectweb.proactive.jmx.client.ClientConnector
				clientConnector = new
				org.objectweb.proactive.jmx.client.ClientConnector
				(String serverUrl);
			</programlisting>
			To perform remote operations on a given MBean, you have to
			get the reference of the current MBeanServerConnection,
			which is actually a ProActiveConnection :
			<programlisting>
				ProActiveConnection connection =
				clientConnector.getConnection(); //invoke the
				performAction method on the MBean named beanName with
				the parameter param1 wich type is typeParam1 ObjectName
				beanName = new ObjectName ("myDomain:name=beanName");
				GenericTypeWrapper return =
				connection.invokeAsynchronous( beanName,
				"performAction", new Object[] { param1 } , new String []
				{typeOfParam1});
			</programlisting>
		</para>

		<note>
			<para>
				To know all available methods on a
				MBeanServerConnection, have a look at the
				<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://java.sun.com/j2se/1.5.0/docs/api/javax/management/MBeanServerConnection.html">
				</link>
			</para>
		</note>

	</section>


	<section xml:id="notifications"><info><title>Notifications JMX via ProActive</title></info>
		
		<para>
			The JMX specification defines a notification mechanism,based
			on java events, that allows alerts to be sent to client
			management applications. To use JMX Notifications, one has
			to use a listener object that is registered within the MBean
			server. On the server side, the MBean has to implement the
			NotificationBroadcaster interface.

			As we work in a distributed environment, listeners are
			located remotely and thus, have to be joined remotely.
			Hence, the
			<emphasis>
				listener must be a serializable active object
			</emphasis>
			and added as a NotificationListener :

			<programlisting xml:lang="java">
				/*creates an active listener MyNotificationListener */
				MyNotificationListener listener =
				(MyNotificationListener)ProActive.newActive(MyNotificationListener.class.getName(),
				new Object[] { connection}); /*adds the listener to the
				Mbean server where we are connected to*/
				connection.addNotificationListener( beanName, listener,
				null, handback);
			</programlisting>
		</para>
		<note>
			<para>
				More informations on JMX on :
				<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://java.sun.com/developer/technicalArticles/J2SE/jmx.html">
					Getting Started with Java Management Extensions
					(JMX): Developing Management and Monitoring
					Solutions
				</link>
			</para>
		</note>
	</section>
	<section><info><title>Example : a simple textual JMX Console</title></info>
		

		<para>
			The example available in the ProActive examples directory,
			is a simple textual tool to connect to a remote MBeanServer
			and list available domains and mbeans registered in this
			server.
		</para>


		<para>
			To launch the connector server side, execute the
			jmx/connector script. To connect this server, execute the
			jmx/simpleJmx script and specify the machine name where is
			hosted the Mbean server. For example:
			<programlisting>
				--- JMC Test client
				connector---------------------------------------------
				Enter the url of the JMX MBean Server : localhost
			</programlisting>
		</para>
		<para>
			The console shows the domains list, for example :
			<programlisting>
				Registered Domains : 
				[ 0 ] java.util.logging 
				[ 1 ] JMImplementation 
				[ 2 ] java.lang
			</programlisting>
		</para>
		<para>
			By choosing a specific domain, the console will show the
			Mbeans registered in this domain.
			
		</para>
			<para>
				The console shows the domains list, for example :
				<programlisting>
					[ 0 ] java.lang:type=Memory 
					[ 1 ] java.lang:type=GarbageCollector,name=Copy 
					[ 2 ] java.lang:type=MemoryPool,name=Tenured Gen 
					[ 3 ] java.lang:type=MemoryPool,name=Eden Space 
					[ 4 ] java.lang:type=MemoryPool,name=Code Cache 
					[ 5 ] java.lang:type=Threading 
					[ 6 ] java.lang:type=OperatingSystem 
					... 
					Type the mbean	number to see its properties :
				</programlisting>
				If you wish to get informations about Memory, choose 0,
				and the console will show the whole information about
				this MBean.
	</para>
	</section>
</chapter>
