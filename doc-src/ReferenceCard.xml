<!-- Converted by db4-upgrade version 1.0 -->

<appendix xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="ReferenceCard"><info><title>Reference Card</title></info>
  

  <para><emphasis role="bold">ProActive</emphasis> is a Java library for
  <emphasis role="bold">parallel</emphasis>, <emphasis role="bold">distributed</emphasis>, and <emphasis role="bold">concurrent</emphasis> computing, also featuring <emphasis role="bold">mobility</emphasis> and <emphasis role="bold">security</emphasis> in a uniform framework. <emphasis role="bold">ProActive</emphasis> provides a comprehensive API and a
  graphical interface. The library is based on an Active Object pattern that
  is a uniform way to encapsulate:</para>

  <informaltable frame="none" colsep="0">
    <tgroup cols="2">
      <tbody>
        <row>
          <entry align="left" valign="middle"><para> <itemizedlist>
              <listitem>
                <para><emphasis role="bold">a remotely</emphasis> accessible
                object,</para>
              </listitem>

              <listitem>
                <para>a <emphasis role="bold">thread</emphasis> as an
                asynchronous activity,</para>
              </listitem>

              <listitem>
                <para>an <emphasis role="bold">actor</emphasis> with its own
                script,</para>
              </listitem>
            </itemizedlist> </para></entry>

          <entry align="left" valign="middle"><para> <itemizedlist>
              <listitem>
                <para>a <emphasis role="bold">server</emphasis> of incoming
                requests,</para>
              </listitem>

              <listitem>
                <para>a <emphasis role="bold">mobile</emphasis> and
                potentially secure entity,</para>
              </listitem>

              <listitem>
                <para>a <emphasis role="bold">component</emphasis> with server
                and client interfaces.</para>
              </listitem>
            </itemizedlist> </para></entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>

  <para><emphasis role="bold">ProActive</emphasis> is only made of standard
  Java classes, and requires <emphasis role="bold">no changes to the Java
  Virtual Machine</emphasis>. Overall, it simplifies the programming of
  applications distributed over Local Area Network (LAN), Clusters, Intranet
  or Internet GRIDs.</para>

  <section><info><title>Main concepts and definitions</title></info>
    

    <para><itemizedlist>
        

      <listitem>
				<indexterm><primary>Active Object</primary><secondary>definition</secondary></indexterm>
          <para><emphasis role="bold">Active Objects (AO):</emphasis> a remote
          object, with its own thread, receiving calls on its public
          methods</para>
        </listitem>


        <listitem>
					<indexterm><primary>Activity</primary><secondary>definition</secondary></indexterm>
          <para><emphasis role="bold">FIFO activity:</emphasis> an AO, by
          default, executes the request it receives one after the other, in
          the order they were received</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">No-sharing:</emphasis> standard Java
          objects cannot be referenced from 2 AOs, ensured by deep-copy of
          constructor params, method params, and results</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Asynchronous Communications:</emphasis>
          method calls towards AOs are asynchronous</para>
        </listitem>

        
          <listitem>
						<indexterm><primary>Future</primary><secondary>definition</secondary></indexterm>
          <para><emphasis role="bold">Future:</emphasis> the result of a
          non-void asynchronous method call</para>
        </listitem>

        <listitem>
					<indexterm><primary>Request</primary><secondary>definition</secondary></indexterm>
          <para><emphasis role="bold">Request:</emphasis> the occurrence of a
          method call towards an AO</para>
        </listitem>

          
        <listitem>
					<indexterm><primary>Service</primary><secondary>definition</secondary></indexterm>
          <para><emphasis role="bold">Service:</emphasis> the execution by an
          AO of a request</para>
        </listitem>

        <listitem>
					<indexterm><primary>Reply</primary><secondary>definition</secondary></indexterm>
          <para><emphasis role="bold">Reply:</emphasis> after a service, the
          method result is sent back to the caller</para>
        </listitem>

          
        <listitem>
					<indexterm><primary>Wait-by-necessity</primary><secondary>definition</secondary></indexterm>
          <para><emphasis role="bold">Wait-by-necessity:</emphasis> automatic
          wait upon the use of a still awaited future</para>
        </listitem>

        
          <listitem>
						<indexterm><primary>Automatic Continuation</primary><secondary>definition</secondary></indexterm>
          <para><emphasis role="bold">Automatic Continuation:</emphasis>
          transmission of futures and replies between AO and JVMs</para>
        </listitem>


        <listitem>
					<indexterm><primary>Migration</primary><secondary>definition</secondary></indexterm>
          <para><emphasis role="bold">Migration:</emphasis> an AO moving from
          one JVM to another, computational weak mobility: the AO decides to
          migrate and stack is lost</para>
        </listitem>

          
        <listitem>
					<indexterm><primary>Group</primary><secondary>definition</secondary></indexterm>
          <para><emphasis role="bold">Group:</emphasis> a typed group of
          objects or AOs. Methods are called in parallel on all group
          members.</para>
        </listitem>

          
        <listitem>
					<indexterm><primary>Component</primary><secondary>definition</secondary></indexterm>
          <para><emphasis role="bold">Component:</emphasis> made of AOs, a
          component defines server and client interfaces</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Primitive Component:</emphasis> directly
          made of Java code and AOs</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Composite Component:</emphasis> contains
          other components (primitives or composites)</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Parallel Component:</emphasis> a
          composite that is using groups to multicast calls to inner
          components</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Security:</emphasis> X.509
          Authentication, Integrity, and Confidentiality defined at deployment
          in an XML file on entities such as communications, migration,
          dynamic code loading.</para>
        </listitem>

        <listitem>
					<indexterm><primary>Virtual Node</primary><secondary>definition</secondary></indexterm>
          <para><emphasis role="bold">Virtual Node (VN):</emphasis> an
          abstraction (a string) representing where to locate AOs at
          creation</para>
        </listitem>
          
        <listitem>
					<indexterm><primary>Deployment descriptor</primary><secondary>definition</secondary></indexterm>
          <para><emphasis role="bold">Deployment descriptor:</emphasis> an XML
          file where a mapping VN --&gt; JVMs --&gt; Machine is
          specified.</para>
        </listitem>

        <listitem>
					<indexterm><primary>Node</primary><secondary>definition</secondary></indexterm>
          <para><emphasis role="bold">Node:</emphasis> the result of mapping a
          VN to a set of JVMs. After activation, a VN contains a set of nodes,
          living in a set of JVMs.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">IC2D:</emphasis> Interactive Control and
          Debugging of Distribution: a Graphical environment for monitoring
          and steering Grid applications</para>
        </listitem>
      </itemizedlist></para>
  </section>

  <section><info><title>Main Principles: Asynchronous Method Calls And Implicit
    futures</title></info>
    

    <programlisting xml:lang="java"><textobject><textdata fileref="code_snippets/reference/asynchronous_method_calls_and_implicit_futures.txt"/></textobject></programlisting>
  </section>

  <section><info><title>Explicit Synchronization</title></info>
    

    <programlisting xml:lang="java"><textobject><textdata fileref="code_snippets/reference/explicit_synchronization.txt"/></textobject></programlisting>

  </section>

  <section><info><title>Programming Active Objects' Activity And Services</title></info>
    

    <para>When an AO must implement an activity that is not FIFO, the
    RunActive interface has to be implemented: it specifies the AO behavior in
    the method named <literal>runActivity()</literal>:</para>

    <programlisting xml:lang="java"><textobject><textdata fileref="../src/Core/org/objectweb/proactive/RunActive.java"/></textobject></programlisting>
	<para>Example:</para>

   <programlisting xml:lang="java"><textobject><textdata fileref="code_snippets/reference/RunActive_example.txt"/></textobject></programlisting>

    
    <para> Two other interfaces can also be specified:</para>

    <para> The method <literal> initActivity(Body body) </literal> initializes the activity of
	    the active object. It is called once before the <literal>runActivity(Body body)</literal> method.
	    It is not called again if the active object restarts after migration.</para>

    <programlisting xml:lang="java"><textobject><textdata fileref="../src/Core/org/objectweb/proactive/InitActive.java"/></textobject></programlisting>

	<para>The method <literal> endActivity(Body body) </literal> finalizes the activity of
    	the active object. It is called once after the execution of the <literal>runActivity(Body body)</literal> method.
    </para>
    
    <programlisting xml:lang="java"><textobject><textdata fileref="../src/Core/org/objectweb/proactive/EndActive.java"/></textobject></programlisting>

  </section>
	<!--
		//TODO: check reactive 
	 -->
  <section><info><title>Reactive Active Object</title></info>
    

    <para>Even when an AO is busy doing its own work, it can remain reactive
    to external events (method calls). One just has to program non-blocking
    services to take into account external inputs.</para>

    <para><programlisting xml:lang="java"><emphasis role="bold">public class </emphasis>BusyButReactive <emphasis role="bold">implements</emphasis> RunActive { <emphasis role="bold">

    public void </emphasis> runActivity(Body body) { 
       Service service = new Service(body); 
       while ( ! hasToTerminate ) { 
             ... 
             // Do some activity on its own ... 
             ... 
             // Non blocking service ... 
             service.serveOldest('changeParameters', 'terminate'); 
             ... 
             } 
       }   <emphasis role="bold">    
 
    public void </emphasis> changeParameters () {
             ...... 
             // change computation parameters
             }    

    <emphasis role="bold">public void </emphasis> terminate (){ 
             hasToTerminate=true;
             } 
    }</programlisting></para>

    <para>It also allows one to specify explicit termination of AOs. Of course, the reactivity is
    up to the length of going around the loop. Similar techniques can be used
    to start, suspend, restart, and stop AOs.</para>
  </section>

  <section><info><title>Service methods</title></info>
    
	<para>The following method are in the <literal>Service</literal> class.
	They can be used to control how requests are served.</para>
    <para><emphasis role="bold">Non-blocking services:</emphasis> returns
    immediately if no matching request is pending</para>

		  <programlisting xml:lang="java"><textobject><textdata fileref="code_snippets/reference/non-blocking_services.txt"/></textobject></programlisting>
				
    <para><emphasis role="bold">Blocking services:</emphasis> waits until a
    matching request can be served</para>

		  <programlisting xml:lang="java"><textobject><textdata fileref="code_snippets/reference/blocking_services.txt"/></textobject></programlisting>

    <para><emphasis role="bold">Blocking timed services:</emphasis> wait a
    matching request at most a time given in ms</para>

		     <programlisting xml:lang="java"><textobject><textdata fileref="code_snippets/reference/blocking_timed_services.txt"/></textobject></programlisting>


    <para><emphasis role="bold">Waiting primitives:</emphasis></para>

  	     <programlisting xml:lang="java"><textobject><textdata fileref="code_snippets/reference/waiting_primitives.txt"/></textobject></programlisting>

    <para><emphasis role="bold">Others:</emphasis></para>

     <programlisting xml:lang="java"><textobject><textdata fileref="code_snippets/reference/other_services.txt"/></textobject></programlisting>

  </section>

  <section><info><title>Active Object Creation:</title></info>
    

     <programlisting xml:lang="java"><textobject><textdata fileref="code_snippets/reference/ao_creation.txt"/></textobject></programlisting>
  </section>

  <section><info><title>Groups:</title></info>
    

    <programlisting xml:lang="java"><textobject><textdata fileref="code_snippets/reference/groups.txt"/></textobject></programlisting>
  </section>

  <section><info><title>Explicit Group Synchronizations</title></info>
    

    <para>Methods both in Interface Group, and static in class
    PAGroup</para>

  <programlisting xml:lang="java"><textobject><textdata fileref="code_snippets/reference/explicit_group_synchronization.txt"/></textobject></programlisting>
  </section>

  <section><info><title>OO SPMD</title></info>
    

  <programlisting xml:lang="java"><textobject><textdata fileref="code_snippets/reference/oospmd.txt"/></textobject></programlisting>
  </section>

  <section><info><title>Migration</title></info>
    

    <para>Methods both in the interface <literal>MigrationController</literal>, and in class
    <literal>PAMobileAgent</literal></para>

 <programlisting xml:lang="java"><textobject><textdata fileref="code_snippets/reference/migration_methods.txt"/></textobject></programlisting>
    
        <para>To initiate the migration of an object from outside, define a public
    method, that upon service will call the static migrateTo primitive:</para>

	 <programlisting xml:lang="java"><textobject><textdata fileref="code_snippets/reference/migration_example.txt"/></textobject></programlisting>
    
		<para>To define a migration strategy we implement the methods in in the interface <literal>MigrationStrategyManager</literal>:
		</para>
		 <programlisting xml:lang="java"><textobject><textdata fileref="code_snippets/reference/migration_strategy.txt"/></textobject></programlisting>
  </section>

  <section><info><title>Components</title></info>
    

    <para>Components are formed from AOs. A component can be linked and
    can communicate with other remote components. A component can be composite,
    made of other components, and distributed over several
    machines. Component systems are defined in XML files (ADL: Architecture
    Description Language); these files describe the definition, the assembly,
    and the bindings of components.</para>
   
   <indexterm><primary>ADL</primary></indexterm>

    <para>Components follow the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://fractal.objectweb.org">Fractal hierarchical component model</link>
    specification and API. </para>

    <para>The following methods are specific to ProActive.</para>

    <para>In the class <literal>PAComponent</literal>:</para>

 		<programlisting xml:lang="java"><textobject><textdata fileref="code_snippets/reference/new_component.txt"/></textobject></programlisting>
			
    <para><literal>Fractive:</literal></para>
 		<programlisting xml:lang="java"><textobject><textdata fileref="code_snippets/reference/fractive_component.txt"/></textobject></programlisting>
  </section>

  <section><info><title>Security:</title></info>
    

    <para>ProActive has an X.509 Public Key Infrastructure (PKI) allowing communication
    Authentication, Integrity, and Confidentiality (AIC) to be configured in
    an XML security file at deployment and outside any source code. Security is
    compatible with mobility, allows for hierarchical domain specification and
    dynamically negotiated policies.</para>

    <para><emphasis role="bold">Example of specification:</emphasis></para>

		<programlisting xml:lang="XML"><textobject><textdata fileref="code_snippets/reference/xml_security_file.txt"/></textobject></programlisting>

    <para>This rule specifies that communications (requests) are authorized 
    from Virtual Node 'VN1' to the VN 'VN2', provided that authentication and
    integrity are being used, while confidentiality is optional. Migration and
    AO creation are not authorized.</para>
  </section>

  <section><info><title>Deployment</title></info>
    

    <para>Virtual Nodes (VN) allow one to specify the location where to create
    AOs. A VN is uniquely identified as a String, is defined in an XML
    Deployment Descriptor where it is mapped onto JVMs. JVMs are themselves
    mapped onto physical machines: VN --&gt; JVMs --&gt; Machine. Various
    protocols can be specified to create JVMs onto machines (ssh, Globus, LSF,
    PBS, rsh, rlogin, Web Services, etc.). After activation, a VN contains a
    set of nodes, living in a set of JVMs. Overall, VNs and deployment
    descriptors allow to abstract away from source code: machines, creation,
    lookup and registry protocols.</para>

    <para><emphasis role="bold">Descriptor example that creates three JVMs on the
    local machine: </emphasis></para>

 		<programlisting xml:lang="XML"><textobject><textdata fileref="../src/Examples/org/objectweb/proactive/examples/masterworker/WorkersLocal.xml"/></textobject></programlisting>
    
    <para>We can also specify lists of hosts for deployment: </para>
 		<programlisting xml:lang="XML"><textobject><textdata fileref="../src/Examples/org/objectweb/proactive/examples/masterworker/RSHListbyHost_Example.xml"/></textobject></programlisting>



    <para><emphasis role="bold">Deployment API</emphasis></para>
	<para>Deployment is done in several steps: load the XML descriptor file, activate the virtual nodes, and
	manipulate nodes and objects.
	</para>
		<programlisting xml:lang="java"><textobject><textdata fileref="code_snippets/reference/deployment_api.txt"/></textobject></programlisting>

  </section>

  <section><info><title>Exceptions</title></info>
    

    <para><emphasis role="bold">Functional exceptions with
    asynchrony</emphasis></para>

		<programlisting xml:lang="java"><textobject><textdata fileref="code_snippets/reference/trywithcatch.txt"/></textobject></programlisting>
  </section>

  <section><info><title>Export Active Objects as Web services</title></info>
    

    <para>ProActive allows active objects exportation as web services. The
    service is deployed onto a Jakarta Tomcat web server with a given URL. It
    is identified by its urn, an unique id of the service. It is also possible
    to choose the exported methods of the object.</para>

    <para>The WSDL file matching the service will be accesible at
    http://localhost:8080/servlet/wsdl?id=a for a service which name is 'a'
    and which id deployed on a web server which location is
    http://localhost:8080.</para>

		<programlisting xml:lang="java"><textobject><textdata fileref="code_snippets/reference/export_to_web_service.txt"/></textobject></programlisting>
  </section>

  <section><info><title>Deploying a fault-tolerant application</title></info>
    

    <para>ProActive can provide fault-tolerance capabilities through two
    differents protocols: a Communication-Induced Checkpointing protocol (CIC)
    or a pessimistic message logging protocol (PML). Making a ProActive
    application fault-tolerant is <emphasis role="bold">fully
    transparent</emphasis>; active objects are turned fault-tolerant using
    Java properties that can be set in the deployment descriptor. The
    programmer can select <emphasis>at deployment time</emphasis> the most
    adapted protocol regarding the application and the execution
    environment.</para>

    <para><emphasis role="bold">A Fault-tolerant deployment
    descriptor</emphasis></para>

		<programlisting xml:lang="XML"><textobject><textdata fileref="code_snippets/reference/fault_descriptor.txt"/></textobject></programlisting>

    <para><emphasis role="bold">Starting the fault-tolerance
    server</emphasis></para>

    <para>The global fault-tolerance server can be launched using the
    ProActive/scripts/[unix|windows]/FT/startGlobalFTServer.[sh|bat] script,
    with 5 optional parameters:</para>

    <itemizedlist>
      <listitem>
        <para>the protocol: <literal>-proto [cic|pml]</literal>. Default value
        is cic.</para>
      </listitem>

      <listitem>
        <para>the server name: <literal>-name [serverName]</literal>. Default
        name is FTServer.</para>
      </listitem>

      <listitem>
        <para>the port number: <literal>-port [portNumber]</literal>. Default
        port number is 1100.</para>
      </listitem>

      <listitem>
        <para>the fault detection period: <literal>-fdperiod
        [periodInSec]</literal>, the time between two consecutive fault
        detection scanning. Default value is 10 sec.</para>
      </listitem>

      <listitem>
        <para>the URL of a p2p service that can be used by the resource
        server: <literal>-p2p [serviceURL]</literal>. No default value.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section><info><title>Peer-to-Peer Infrastructure</title></info>
    

    <para>This aims to help you to create a P2P infrastructure over your
    desktop workstations network. It is self-organized and configurable. The
    infrastructure maintains a dynamic JVMs network for deploying
    computational applications.</para>

    <para><emphasis role="bold">Deploying the
    Infrastructure:</emphasis></para>

    <para>Firstly, you have to start P2P Services on each shared
    machine:</para>

    <para><screen>$ cd ProActive/scripts/unix/p2p</screen></para>

    <para><screen>$ ./startP2PService [-acq acquisitionMethod] [-port portNumber] [-s Peer ...]</screen></para>

    <para>With that parameters (all are optionals):</para>

    <itemizedlist>
      <listitem>
        <para>-acq is the ProActive Runtime communication protocol used by the
        peer. Examples: rmi, http, ibis,... By default it is rmi.</para>
      </listitem>

      <listitem>
        <para>-port is the port number where the P2P Service listens. By
        default it is 2410.</para>
      </listitem>

      <listitem>
        <para>-s specify addresses of peers which are used to join the P2P
        infrastructure. Example: rmi://applepie.proactive.org:8080</para>
      </listitem>
    </itemizedlist>

    <para><emphasis role="bold">A simple example:</emphasis> <screen>first.peer.host$ ./startP2PService.sh</screen>
    <screen>second.peer.host$ ./startP2PService.sh -s //first.peer.host</screen>
    <screen>third.peer.host$ ./startP2PService.sh -s //second.peer.host</screen></para>

    <para><emphasis role="bold">Acquiring Nodes:</emphasis></para>

    <para>Now you have a P2P Infrastructure running, you might want to deploy
    your ProActive application on it. That is simple, just modify the XML
    deployment descriptor:</para>
	<!-- //TODO check if the descriptor is correct -->
	<programlisting xml:lang="XML"><textobject><textdata fileref="code_snippets/reference/p2p_descriptor.txt"/></textobject></programlisting>

    <para>In the <emphasis role="bold">nodesAsked</emphasis> argument, a
    special value <emphasis role="bold">MAX</emphasis> is allowed. When it is
    used, the P2P infrastructure returns the maximum number of nodes available,
    and continues to return new nodes to the
    application while the application is running. To use all the benefits of the feature, we need to add a nodes
    creation event listener to the application.</para>
	<!-- This is not correct check -->
    <para><emphasis role="bold">Usage Example:</emphasis></para>

	<programlisting xml:lang="java"><textobject><textdata fileref="code_snippets/reference/p2p_example.txt"/></textobject></programlisting>

  <para>'this' has to implement the NodeCreationEventListener
    interface:</para>

 	<programlisting xml:lang="java"><textobject><textdata fileref="code_snippets/reference/p2p_example1.txt"/></textobject></programlisting>

  </section>

  <section><info><title>Branch and Bound API</title></info>
    

    <para>Firstly, create your own task:</para>

	<programlisting xml:lang="java"><textobject><textdata fileref="code_snippets/reference/bnb.txt"/></textobject></programlisting>


    <para>How to interact with the framework from inside a task:</para>

    <itemizedlist>
      <listitem>
        <para>Some class variables:</para>

	<programlisting xml:lang="java"><textobject><textdata fileref="code_snippets/reference/bnb_variables.txt"/></textobject></programlisting>

      </listitem>

      <listitem>
        <para>Interact with the framework (inside a Task):</para>

	<programlisting xml:lang="java"><textobject><textdata fileref="code_snippets/reference/bnb_interact.txt"/></textobject></programlisting>
      </listitem>
    </itemizedlist>

    <para>Secondly, choose your task queue:</para>

    <itemizedlist>
      <listitem>
        <para>BasicQueueImpl: execute task in FIFO order.</para>
      </listitem>

      <listitem>
        <para>LargerQueueIml: execute task in larger order.</para>
      </listitem>

      <listitem>
        <para>Extend TaskQueue: your own one.</para>
      </listitem>
    </itemizedlist>

    <para>Finally, start the compution:</para>

	<programlisting xml:lang="java"><textobject><textdata fileref="code_snippets/reference/bnb_start.txt"/></textobject></programlisting>

    <para>Keep in mind that only 'initLower/UpperBound' and 'split' methods
    are called on the root task. The 'execute' method is called on the root
    task's splitted task. The methods  execution  order is:</para>

    <orderedlist>
      <listitem>
        <para><literal>rootTask.initLowerBound(); // compute a first lower bound</literal></para>
      </listitem>

      <listitem>
        <para><literal>rootTask.initUpperBound(); // compute a first upper bound</literal></para>
      </listitem>

      <listitem>
        <para><literal>Task splitted = rootTask.split(); // generate a set of
        tasks</literal></para>
      </listitem>

      <listitem>
        <para><literal>for i in splitted do in
        parallel</literal></para>

  		<programlisting xml:lang="java"><textobject><textdata fileref="code_snippets/reference/split.txt"/></textobject></programlisting>
	</listitem>

      <listitem>
        <para><literal>Result final = rootTask.gather(Result[] ri); // gathering all
        result</literal></para>
      </listitem>
    </orderedlist>
  </section>

  <section><info><title>File Transfer Deployment</title></info>
    

    <para>File Transfer Deployment is a tool for transfering files at
    deployment time. This files are specified using the ProActive XML
    Deployment Descriptor in the following way:</para>

    <programlisting xml:lang="XML"><textobject><textdata fileref="code_snippets/reference/file_transfer.txt"/></textobject></programlisting>
  </section>
</appendix>
