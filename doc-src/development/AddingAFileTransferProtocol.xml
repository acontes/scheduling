<!-- Converted by db4-upgrade version 1.0 -->

<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="AddingAFileTransferProtocol"><info><title>How to add a new FileTransfer CopyProtocol</title></info>
<!--  File: /home/irosenbe/PA_new_doc/docbook-tuto/development/FileTransfer.html  -->
  
    <para> FileTransfer protocols can be of two types: <emphasis role="bold">external</emphasis> or <emphasis role="bold">internal</emphasis>. Examples of
 external protocols are: <emphasis role="bold">scp</emphasis> and <emphasis role="bold">rcp</emphasis>. While examples of internal protocols are <emphasis role="bold">Unicore</emphasis> and <emphasis role="bold">Globus</emphasis>.</para>
    <para>Usually external FileTransfer happens before the deployment of the process. On the other hand,
 internal FileTransfer happens at the same time of the process deployment, because the specific
 tools provided by the process are used. This implies that internal FileTransfer protocols can not
 be used with other process (ex: unicore file transfer can not be used when deploying with ssh),
 but the other way around is valid (ex: scp can be used when deploying with unicore).</para>
    <section><info><title>Adding external FileTransfer
 CopyProtocol</title></info>
      
      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">Implement the protocol class.</emphasis>  This is done inside the package: <emphasis role="bold">org.objectweb.proactive.core.process.filetransfer;</emphasis> by extending the abstract class <emphasis role="bold">AbstractCopyProtocol</emphasis>.</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">FileTransferWorkshop:</emphasis>  Add the name of the protocol to array <emphasis role="bold">ALLOWED_COPY_PROTOCOLS[]</emphasis></para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">FileTransferWorkshop:</emphasis>  Add the object named based creation to
 factory method: <emphasis role="bold">copyProtocolFactory(String name){...}</emphasis></para>
        </listitem>
</itemizedlist>
      <para><emphasis role="bold">Note</emphasis>: Choosing the correct name for the protocol is simple, but must be done carefully.
 All names already in the array ALLOWED_COPY_PROTOCOLS are forbidden. This includes the name <emphasis role="bold">'processDefault'</emphasis>, which is also forbidden. In some cases <emphasis role="bold">'processDefault'</emphasis> will correspond to an external FileTransfer protocol (ex: ssh
 with scp), and in some cases to an internal protocol (ex: unicore with unicore)</para>
    </section>
    <section><info><title>Adding internal FileTransfer
 CopyProtocol</title></info>
      
      <itemizedlist>
        <listitem>
          <para> Implement the method <emphasis role="bold">protected boolean
 internalFileTransferDefaultProtocol()</emphasis> inside the process class. Note that this method will
 be called if the <emphasis role="bold">processDefault</emphasis> keyword is specified in the <emphasis role="bold">XML Descriptor Process
 Section</emphasis>. Therefore, this method usually must return true, so no other FileTransfer
 protocols will be tried.</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">FileTransferWorkshop:</emphasis>  Add the name of the protocol to array <emphasis role="bold">ALLOWED_COPY_PROTOCOLS[]</emphasis></para>
        </listitem>
</itemizedlist>
      <para><emphasis role="bold">Note</emphasis>: When adding an internal FileTransfer protocol, <emphasis role="bold">nothing</emphasis> must be modified or
 added to the <emphasis role="bold">copyProtocolFactory(){}</emphasis> method.</para>
    </section>
  
</chapter>
