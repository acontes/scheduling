<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="MasterWorker">
    <info>
        <title>Master-Worker API</title>
    </info>
    <section xml:id="ms_overview">
        <info>
            <title>Overview</title>
        </info>

        <para>Master-Worker computations are the most common case of distributed computations. They are suited well for
            embarrassingly parallel problems, in which the problem is easy to segment into a very large number of
            parallel tasks, and no essential dependency (or communication) between those parallel tasks are required.
        </para>

        <para>The main goal of the ProActive Master-Worker API is to provide an easy to use framework for parallelizing
            embarrassingly parallel applications.
        </para>

        <para>The main features are:</para>

        <itemizedlist>
            <listitem>
                <para>Automatic tasks scheduling for the Workers.</para>
            </listitem>

            <listitem>
                <para>Automatic load-balancing between the Workers</para>
            </listitem>

            <listitem>
                <para>Automatic fault-tolerance mechanism (i.e. when a Worker is missing, the task is rescheduled)
                </para>
            </listitem>

            <listitem>
                <para>Very simple mechanism for solution gathering</para>
            </listitem>

            <listitem>
                <para>All the internal concepts of ProActive are hidden from the user</para>
            </listitem>

            <listitem>
                <para>Open and extensible API</para>
            </listitem>
        </itemizedlist>
                <para>The usage of the Master-Worker API is simple and consists of four steps:</para>

        <orderedlist>
            <listitem>
                <para>Deployment of the Master-Worker framework.</para>
            </listitem>

            <listitem>
                <para>Task definition and submission</para>
            </listitem>

            <listitem>
                <para>Results gathering</para>
            </listitem>

            <listitem>
                <para>Release of acquired resources</para>
            </listitem>
        </orderedlist>

        
        <figure>            
            <info>                
                <title>Master-Worker API main class</title>
            </info>

            <mediaobject>
                <imageobject>                    
                    <imagedata scalefit="1" width="100%" contentdepth="100%"
                               fileref="images/ProActiveMasterUML.png"
                               format="PNG"/>
                </imageobject>            
            </mediaobject>
        </figure>
    </section>

        <section>          
            <info>                
                <title>Logger Settings</title>            
            </info>

            <para>Before using the Master-Worker, launch the examples, or write your own code, it is very useful to
                enable the maximum logging information to have a deeper look at how the API works. In order to do that
                you'll need to add the following lines in the proactive-log4j file that you are using:
            </para>
            <programlisting><textobject><textdata fileref="code_snippets/masterworker/logger_settings.txt"/></textobject></programlisting>
        </section>
        




        <section>
            <info>
                <title>Master Creation And Deployment</title>
            </info>
            <para>When creating the master the user application has the possibility to create either a local master (on
                the machine the user application is running on) or a remote master. Regardless of the way it is created
                the active object instantiation is transparent. The deployment process can be controlled by using the
                deployment descriptors.
            </para>
            
            <para>The deployment of the Master-Worker framework relies on the ProActive deployment mechanism. In order
                to deploy a set of workers, the master needs either:
            </para>

            <itemizedlist>
                <listitem>
                    <para>a ProActive deployment descriptor to be used by the master to deploy its resources</para>
                </listitem>

                <listitem>
                    <para>a set of already deployed ProActive resources like a VirtualNode object or a Collection of
                        Node objects
                    </para>
                </listitem>
            </itemizedlist>

            <para>For a full explanation of the ProActive deployment mechanism and of ProActive deployment descriptors,
                see
                <xref linkend="XML_Descriptors" />
                .
            </para>

            <figure>
                <info>
                    <title>
                        Deployment of the Master-Worker framework
                    </title>
                </info>


                <mediaobject>
                    <imageobject>
                        <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/masterWorkerDeployment.png" format="PNG" />
                    </imageobject>
                </mediaobject>
            </figure>
            <para>The figure represents one case of deployment as it is possible to have several workers on a single
                core machine each running in its own independent thread, one worker in its own JVM on a multicore
                machine, or workers deployed on the machine running the master. The worker-JVM-machine mappings depend
                on the deployment descriptor. The only restriction is that each Worker is always started in its own
                Node. However, from the user application perspective, this is transparent as the Master performes
                communication and load balancing automatically. In the following figures we will show only the case of
                several single core machines as the same principles apply regardless of machine type.
            </para>
        <section>
                <info>
                    <title>Local Master creation</title>
                </info>

                <para>In order to create a local master we use a constructor without parameters</para>
                <programlisting xml:lang="java"><textobject><textdata fileref="automatic_snippets/master_creation.snip"/></textobject></programlisting>
                <para>Using this constructor, a master will be created in the current JVM, the master will share CPU
                    usage and memory with the user JVM. This master will compute tasks of type
                    <literal>A</literal>
                    and will produce
                    <literal>Integer</literal>
                    objects as a results.
                </para>
            </section>
            <section>
                <info>
                    <title>Remote Master creation</title>
                </info>

                <para>In order to create a remote master the following constructors can be used:</para>
                
                <programlisting xml:lang="java"><textobject><textdata fileref="automatic_snippets/masterworker_constructor.snip"/></textobject></programlisting>

                <programlisting xml:lang="java"><textobject><textdata fileref="automatic_snippets/masterworker_constructor_remote.snip"/></textobject></programlisting>

                <para>Using either of these constructors, a master will be created in the specified remote
                    resource(JVM), the master will share CPU usage and memory with existing running applications on the
                    remote host. The mechanism in use to deploy the master remotely is the ProActive deployment
                    mechanism (see
                    <xref linkend="XML_Descriptors"/>
                    for further details).
                </para>
            </section>
            </section>
            <section>
                <info>
                    <title>Adding Resources</title>
                </info>

                <para>Now that the master has been created, resources (Workers) must be added to it. The following
                    methods can be used for creating workers:
                </para>
                <programlisting xml:lang="java"><textobject><textdata fileref="automatic_snippets/masterworker_addresources.snip"/></textobject></programlisting>
                <para>The first two methods will tell the master to create workers on already deployed ProActive
                    resources. The last two methods will ask the master to deploy resources using a ProActive descriptor
                    and to create workers on top of these resources. For a complete explanation of ProActive's
                    deployment mechanism, please refer to
                    <xref linkend="XML_Descriptors"/>
                    .
                </para>

        </section>

        <section>
            <info>
                <title>Tasks definition and submission</title>
            </info>

            <para>Tasks are submitted through classes that implement the
                <literal>Task</literal>
                interface. In this interface, the unique method
                <literal>run</literal>
                will contain the code to be executed remotely. After the tasks have been submitted to the master, the
                master will dispatches them automatically to the workers.
            </para>
            <para>
                <warning>
                    <para>When a Java object implementing the Task interface (i.e. a user task) is submitted to the
                        master, the object will be deep-copied to the master. In consequence, every referenced objects
                        will also be copied. When tasks are submitted to the remote workers, the user task objects will
                        be
                        <emphasis>serialized</emphasis>
                        and sent though the network. As a consequence, information which has only local meaning will be
                        lost (database connections, references to etc.)
                    </para>
                </warning>
            </para>

            <para>
                <figure>
                    <info>
                        <title>Tasks definition and submission</title>
                    </info>


                    <mediaobject>
                        <imageobject>
                            <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/masterWorkerTasks.png" format="PNG" />
                        </imageobject>
                    </mediaobject>
                </figure>
            </para>
            <para />
        </section><para>The task interface is
                <literal>org.objectweb.proactive.extensions.masterworker.interfaces.Task</literal>
            </para>

            <programlisting xml:lang="java"><textobject><textdata fileref="automatic_snippets/masterworker_task.snip"/></textobject></programlisting>

            <para>Users need to implement the
                <literal>Task</literal>
                interface to define their tasks. The
                <literal>WorkerMemory</literal>
                parameter is explained in the
                <link linkend="ms_Workermemory">Advanced Usage</link>
                section.
            </para>
		
			<para>The tasks are submitted to the master which in turn sends them to the workers. The following method submits the tasks: </para>
            <programlisting xml:lang="java"><textobject><textdata fileref="automatic_snippets/masterworker_solve.snip"/></textobject></programlisting>
            <warning><para>
                The master keeps a track of task objects that have
                been submitted to it and which are currently computing.
                Submitting twice the same task object without
                waiting for the result of the first computation will produce a 
                <literal>TaskAlreadySubmittedException</literal>
                .
                </para>
            </warning>


        <section xml:id="ms_principle_gathering">
            <info>
                <title>Results retrieval and reception order</title>
            </info>

            <para>Results are collected by the master when the calculations are complete.</para>
            <para>There are two ways of waiting for the results.The users application can either wait until one or every
                result is available (the thread blocks until the results are available) or ask the master for result
                availability and continue until the results are finally available. In the second case the application
                thread does not block while the results are computed.
            </para>

            <para>
                <figure>
                    <info>
                        <title>Results gathering</title>
                    </info>

                    <mediaobject>
                        <imageobject>
                            <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/masterWorkerResults.png" format="PNG" />
                        </imageobject>
                    </mediaobject>
                </figure>
            </para>

            <para>The results can be received in two modes:
                <itemizedlist>
                    <listitem>
                        <para>
                            <emphasis>Completion order</emphasis>
                            mode (default) : in this mode, user applications will receive the results in an unspecified
                            order, depending on tasks completion order.
                        </para>
                    </listitem>

                    <listitem>
                        <para>
                            <emphasis>Submission order</emphasis>
                            mode : in this mode, user applications will receive the results in the same order as the
                            task submitted to the master.
                        </para>

                    </listitem>
                </itemizedlist>
            </para>
        </section>
        
        
            <para>Result reception order can be switched from
                <emphasis>Completion</emphasis>
                order to
                <emphasis>Submission</emphasis>
                order using the following method :
            </para>
            <programlisting xml:lang="java"><textobject><textdata fileref="automatic_snippets/masterworker_order.snip"/></textobject></programlisting>
            <para>The default mode of the Master-Worker API is
                <emphasis>Completion</emphasis>
                order. The mode can be switched dynamically, which means that subsequent calls to wait methods (see
                below), will be done according to the new mode.
            </para>

            <para>Five methods can be used in order to collect results:
                <itemizedlist>
                    <listitem>
                        <para>The first three methods will block the current thread until the corresponding results
                            are available. If an exception occurs during the execution of one task, this exception
                            will be thrown back to the user by the wait method.
                        </para>
                    </listitem>

                    <listitem>
                        <para>The fourth method will give information on results availability but will not block the
                            user thread.
                        </para>
                    </listitem>

                    <listitem>
                        <para>The last method will tell when the user has received every result for the tasks previously
                            submitted.
                        </para>
                    </listitem>
                </itemizedlist>
            </para>

            <programlisting xml:lang="java"><textobject><textdata fileref="automatic_snippets/masterworker_collection.snip"/></textobject></programlisting>



        <section>
            <info>
                <title>Terminating the master</title>
            </info>


            <programlisting xml:lang="java"><textobject><textdata fileref="automatic_snippets/masterworker_terminate.snip"/></textobject></programlisting>

            <para>One single method is used to terminate the master. A boolean parameter tells the master to free
                resources or not (i.e. terminate remote JVMs).
            </para>
        </section>
        
    
        

            <section>
                <info>
                    <title>Worker ping period</title>
                </info>

                <para>At regular intervals, the Master sends a "ping" message to every Worker to check if they are
                    reachable. The Ping period configuration parameter is the period in millisecond between two "ping"
                    messages. The default value of this parameter is 10000 (which corresponds to 10 seconds).
                </para>
                <para>In order to change this default value, the method described underneath can be called :</para>
                <programlisting xml:lang="java"><textobject><textdata fileref="automatic_snippets/masterworker_ping.snip"/></textobject></programlisting>
                <para>If the Master does not receive an answer for the ping it will remove the Worker from its list and
                    reassign the tasks the Worker has been assigned.
                </para>
            </section>
            <section>
                <info>
                    <title>Worker task flooding</title>
                </info>

                <para>The Master-Worker API's internal scheduling mechanism is quite simple as it is based on a pulling
                    strategy. When a worker has no more task to run, it asks the master for new tasks. The master
                    usually gives a worker one task at a time, except the first time the worker asks for a task and each
                    time the worker has no more tasks to compute. In this case, the master will do a
                    <emphasis>flooding</emphasis>, by giving to worker as many tasks as the configurable parameter of the same name states. The
                    default value of this parameter is 2, as it is expected to have at least twice as many tasks as
                    workers. This mechanism is meant to avoid having idle workers waiting for new tasks all the time.
                    The value of the flooding parameter should depend on how big your tasks are. A lot of small tasks
                    should lead to a high flooding value (&gt;10) where a small number of big tasks should lead to a
                    small value (1-5).
                </para>
                <para>Use the following method to change the flooding parameter :</para>
                <programlisting xml:lang="java"><textobject><textdata fileref="automatic_snippets/masterworker_flood.snip"/></textobject></programlisting>
            </section>
            
            
            
        <section xml:id="ms_Workermemory">
            <info>
                <title>Worker Memory</title>
            </info>


                <para>The Worker Memory purpose is to allow users to store and retrieve data from a
                    <emphasis>Worker's address space</emphasis>
                    . The typical use case is the Master-Worker API computation if an iterative process. An iterative
                    process consists generally of an initialization step 0, followed by n computation steps, where step
                    n needs the results of step n-1. The initialization steps often requires that a large amount of
                    information is "loaded" into the worker. Without the worker memory access, this information would be
                    lost at each step of the iteration, which means that the initialization step 0 needs to be done at
                    step 1,2, ... n, etc...
                </para>
                <para>The Worker Memory lets you send some initial memory content when workers are initialized. Later
                    on, when tasks are executed, workers can have access to their memory and save or load data from it.
                    Please note that this memory is not at all what is called a "shared memory". A shared memory would
                    mean that the same memory would be shared by all workers. Here, each worker has its own private
                    memory, and if a worker modifies its memory, the memory of other workers will not be affected.
                </para>

                <section>
                    <info>
                        <title>Structure and API</title>
                    </info>

                    <para>The Worker memory structure is very simple: it consists of
                        <emphasis>&lt;key, value&gt;</emphasis>
                        associations. A java object value is therefore saved in the memory with the given name, and this
                        name will be needed to retrieve the value later on.
                    </para>
                    <para>The Worker Memory API consists of three methods
                        <emphasis>save</emphasis>
                        ,
                        <emphasis>load</emphasis>
                        , and
                        <emphasis>erase</emphasis>
                        . The interface to the worker memory is available when running a Task as a parameter of the run
                        method. The user can use this interface to save, load or erase objects in the local worker's
                        memory. Below is the detailed WorkerMemory interface:
                    </para>
                    <programlisting xml:lang="java"><textobject><textdata fileref="automatic_snippets/masterworker_worker_memory.snip"/></textobject></programlisting>
                </section>
                <section>
                    <info>
                        <title>Storing data</title>
                    </info>

                    <para>A user can store data in the Workers' memory either when :</para>
                    <orderedlist>
                        <listitem>
                            <para>Workers are created remotely</para>
                        </listitem>
                        <listitem>
                            <para>A task is run on the Worker.</para>
                        </listitem>
                    </orderedlist>
                    <para>Usage of the first mechanism is done by providing a list of &lt;key, value&gt; pairs (Map) to
                        the constructors of the ProActiveMaster class. Every constructors detailed above have a version
                        including this extra parameter. The given list will be the initial memory of every Workers
                        created by the master.
                    </para>
                    <para>Usage of the second mechanism is done by using the
                        <emphasis>WorkerMemory</emphasis>
                        parameter in the Task interface's
                        <emphasis>run</emphasis>
                        method. In contradiction with the first method, only the Worker currently running the Task will
                        store the given data.
                    </para>
                </section>
                <section>
                    <info>
                        <title>Retrieving and using the data</title>
                    </info>

                    <para>Loading and using any object stored in a Worker's memory is simply done through the
                        <emphasis>WorkerMemory</emphasis>
                        parameter in the
                        <emphasis>run</emphasis>
                        method of the
                        <emphasis>Task</emphasis>
                        interface.
                    </para>

                </section>
            </section>
        
    <section xml:id="ms_example">
        <info>
            <title>Monte-Carlo PI Example</title>
        </info>


        <para>This very simple example computes PI using the Monte-Carlo method. The Monte-Carlo methods groups under
            the same name method which solves a problem by generating random numbers and examining how a fraction of the
            generated numbers follow certain patterns. The method can be used to obtain numerical results for problems
            which would be hard to solve through analytical methods. The complete example is available, along with more
            complex ones in the package
            <literal>org.objectweb.proactive.examples.masterworker</literal>
        </para>
        <para>The task randomly creates a set of points belonging to the [0, 1[x[0, 1[ interval and tests how many
            points are inside the unit circle. The number of points inside the unit circle allow us to calculate the 
            value of PI with an arbitrary precision. The more points generated the better the accuracy for PI.
        </para>

        <programlisting xml:lang="java"><textobject><textdata fileref="automatic_snippets/masterworker_montecarlopi.snip"/></textobject></programlisting>

        <para>In the main method the master is created and resources are added using a deployment descriptor .</para>

        <programlisting xml:lang="java"><textobject><textdata fileref="automatic_snippets/masterworker_montecarlopi_master_creation.snip"/></textobject></programlisting>

        <para>After the master is created the tasks are created and submitted to the master.</para>

        <programlisting xml:lang="java"><textobject><textdata fileref="automatic_snippets/masterworker_montecarlopi_tasks_submit.snip"/></textobject></programlisting>

        <para>After the task submission the results are gathered and displayed.</para>

        <programlisting xml:lang="java"><textobject><textdata fileref="automatic_snippets/masterworker_montecarlopi_results.snip"/></textobject></programlisting>


        <para>Finally, the master is terminated (all resources are freed) and the program exits.</para>

        <programlisting xml:lang="java"><textobject><textdata fileref="automatic_snippets/masterworker_montecarlopi_terminate.snip"/></textobject></programlisting>
    </section>
</chapter>