<!-- Converted by db4-upgrade version 1.0 -->
<!-- <!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V5.0//EN" "docbook.dtd"> -->

<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="Resource_Manager"><info><title>ProActive Resource Manager</title></info>
		
	<section xml:id="Important_Note"><info><title>IMPORTANT NOTE</title></info>
		<para>
			- Some parts of the ProActive Scheduler and ProActive Resource
			Manager rely on Java Scripting capabilities (
			<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://jcp.org/en/jsr/detail?id=223">JSR 223</link>
			). As a consequence, it requires either:
			<itemizedlist>
				<listitem>
					<para>
						a 1.6 or greater Java Runtime Environment, without
						any modifications,
					</para>
				</listitem>
				<listitem>
					<para>
						or, with a 1.5 JRE, the
						<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://jcp.org/aboutJava/communityprocess/final/jsr223/index.html">
							JSR 223 jar files
						</link>
						:
					</para>
					<itemizedlist>
				
						<listitem>
							<para>
								First, the
								<literal>script-api.jar</literal>
								,
								<literal>script-js.jar</literal>
								and
								<literal>js.jar</literal>
								files must be added in the
								<literal>/ProActive/dist/lib/</literal>
								directory if you are using the bin release
								or ProActive, or in the
								<literal>/ProActive/lib/</literal>
								directory if you build ProActive from the
								source release.
							</para>
						</listitem>
						<listitem>
							<para>
								Then the
								<literal>java5_jsr223_patch.jar</literal>
								patch (released with the Scheduler RCP
								Client) should be executed in the Scheduler
								RCP Client directory : unzip the
								<literal>java5_jsr223_patch.zip</literal>
								file and execute
								<literal>
									java -jar java5_jsr223_patch.jar
								</literal>
								.
							</para>
						</listitem>
					</itemizedlist>
				</listitem>
			</itemizedlist>
		</para>
			<note> <para>
			- A RCP/Eclipse graphical client is available,
			<emphasis>but not yet documented</emphasis>
			for monitoring and controlling a Resource Manager. You can
			find it in the ProActive Download page.</para> </note>

	</section>
		

		<section xml:id="Role"><info><title>Role</title></info>
			
			<para>
				As Scheduler manages pool of jobs to execute, Resource
				manager is in charge of supplying Scheduler in resources
				: ProActive nodes. Resource Manager (RM) takes benefits
				of the ProActive library, so it can handle resources
				from LAN, on cluster, on P2P desktop Grids, or on
				Internet Grids. ResourceManager provides scheduler in
				nodes, according to criteria of the task to execute on
				it (operating system, dynamic libraries, memory...). Its
				main functions are :
			</para>
			<itemizedlist>
				<listitem>

					<para>
						Creation, acquisition and removal of ProActive
						nodes.
					</para>
				</listitem>
				<listitem>
					<para>
						Supplying nodes to scheduler for tasks
						executions, Scheduler can ask nodes that verify
						criteria, these criteria are defined in a
						selection script.
					</para>
				</listitem>
				<listitem>
					<para>
						Maintaining and monitoring its list of node
						resources, and manage states of its handled
						nodes (free, busy, down...).
					</para>
				</listitem>
			</itemizedlist>
		</section>
		<section xml:id="architecture"><info><title>Resource Manager architecture</title></info>
			
			<para>Resource Manager is made of five components :</para>
			<itemizedlist>
				<listitem>
					<para>
						<emphasis>User</emphasis>
						Resource Manager's frontend for the Scheduler,
						this component provides for scheduler an entry
						to get and give back nodes.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>Admin</emphasis>
						Frontend for RM's administrator, provides
						administrator actions; add and remove nodes, add
						and remove different node sources, shutting down
						the Resource manager.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>Core</emphasis>
						Main component, selects and gives nodes to
						scheduler, maintains different nodes states for
						each node, and receive new available nodes
						acquired by Node Sources.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>Monitoring component</emphasis>
						Resource manager can have monitors connected to
						it. Monitors are external programs (such as
						monitor GUI) that want to be informed about RM
						current activity; numbers of nodes and their
						availability for example. The Monitoring
						component is in charge of throwing RM
						information to its monitors.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>Node Sources</emphasis>
						Resource manager can handle nodes coming from
						heterogeneous environments, a Node source
						component is in charge of nodes acquisition,
						deployment and monitoring for a dedicated
						infrastructure. It means we can have a Node
						source which manages nodes deployed by a
						ProActive descriptor, one for nodes acquired
						from a Peer to peer infrastructure, and another
						for nodes acquired from a cluster.
					</para>
				</listitem>
			</itemizedlist>
			<figure xml:id="RM_architecture"><info><title>resource Manager architecture</title></info>
				
				<mediaobject>
					<imageobject>
						<imagedata scalefit="1" width="100%" contentdepth="100%"  align="center" fileref="scheduler/pics/core/rm_overview.jpg" format="JPG"/>
					</imageobject>
				</mediaobject>
			</figure>
		</section>
		<section xml:id="nodes_sources"><info><title>Static Node Source and Dynamic Node Source</title></info>
			
			<para>
				Node Sources objects are aimed to acquire nodes for the
				RM, there are two kinds of Node Sources :
			</para>
			<itemizedlist>
				<listitem>
					<para>
						<emphasis>Static Node Source</emphasis>
						defined for deploying and acquiring nodes by a
						ProActive descriptor. All nodes handled by the
						source are kept permanently by the Resource
						Manager, i.e until the termination of the RM or
						if Administrator ask to remove some of them.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>Dynamic Node Source</emphasis>
						designed to acquire nodes from an infrastructure
						which can provide nodes just for a limited time.
						So this Node Source get a node from a specific
						infrastructure, keep it during a defined time.
						When this keeping time is elapsed, dynamic node
						source remove the node from the RM and give back
						node to its infrastructure. A dynamic node
						source have three main parameters :
					</para>
					<para>
						Max number of nodes : number of nodes that
						dynamic Node Source has to get from its
						corresponding infrastructure. The dynamic node
						source tries to acquire this number of node
						source, but its infrastructure may not be able
						to provide as many nodes. So this is the number
						of acquired nodes that Dynamic Node Source tries
						to reach.
					</para>
					<para>
						Time to release(TTR) : keeping duration of an
						acquired node. when this keeping duration is
						reached by a node, dynamic node source releases
						it.
					</para>
					<para>
						Nice time : After a node release, time to wait
						for the dynamic node source before trying to get
						a new node from its infrastructure. After each
						node release, dynamic node source waits "nice
						time", and after tries to acquire a new node.
					</para>
				</listitem>
			</itemizedlist>
		</section>
		<section xml:id="nodes_states"><info><title>Nodes states</title></info>
			
			<para>
				Resource Manager has to maintain states of its handled
				nodes, here the different nodes states :
			</para>
			<itemizedlist>
				<listitem>
					<para>
						<emphasis>Free</emphasis>
						Node is available, and there is no task launched
						on it. Node can be supplied to a scheduler.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>Busy</emphasis>
						Node has been given to scheduler and a task is
						executed on it.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>To be released</emphasis>
						Node is busy, and administrator or its (dynamic)
						Node Source has asked to remove the node. So the
						node will be removed from RM after task's end.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>Down</emphasis>
						Node has a problem (unreachable, fallen...) and
						can't execute tasks anymore.
					</para>
				</listitem>
			</itemizedlist>
		</section>
		<section xml:id="RM_start"><info><title>Starting the Resource Manager</title></info>
			
			<para>
				To start the Resource Manager, run the RMlauncher.sh
				script in scripts/scheduler directory. Without
				arguments, Resource Manager will start and create four
				ProActive nodes on the local host. RMlauncher.sh can be
				started with 1 optional argument:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						Path of a ProActive descriptor file (for example
						: ProActive/descriptors/Workers.xml). Descriptor
						is deployed and nodes added to the RM by a
						static Node Source at the RM's startup.
					</para>
				</listitem>
			</itemizedlist>
			<para>
				You can also start Resource Manager using the java API.
				Resource Manager can be started with static functions of
				RMFactory class. Here a short sample of RM instantiation
				with deployment of a ProActive descriptor. Nodes
				deployment is asked to RMAdmin object :
			</para>
			<programlisting xml:lang="java">
				RMFactory.startLocal(); //creates Resource Manager
				components RMAdmin admin = RMFactory.getAdmin(); //get
				RMAdmin object

				//creates ProActive Descriptor object from an xml file
				ProActiveDescriptor pad =
				PADeployment.getProactiveDescriptor("myDescriptor.xml");

				//Ask to RMAdmin component to deploy the ProActive
				Descriptor //and add deployed nodes to the RM
				admin.addNodes(pad);
			</programlisting>
		</section>

</chapter>
