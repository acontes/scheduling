<?xml version="1.0" encoding="UTF-8"?>
<grammar ns="urn:proactive:jobdescriptor:dev" xmlns:jd="urn:proactive:jobdescriptor:dev" xmlns:doc="http://relaxng.org/ns/compatibility/annotations/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
  <start>
    <ref name="job"/>
  </start>
  <define name="job">
    <element name="job">
      <doc:documentation>Definition of a job for the scheduler </doc:documentation>
      <optional>
        <ref name="variables"/>
      </optional>
      <optional>
        <ref name="jobDescription"/>
      </optional>
      <optional>
        <ref name="jobClasspath"/>
      </optional>
      <ref name="jobName"/>
      <optional>
        <ref name="priority"/>
      </optional>
      <optional>
        <ref name="cancelJobOnError_j"/>
      </optional>
      <optional>
        <ref name="restartTaskOnError_j"/>
      </optional>
      <optional>
        <ref name="numberOfExecution_j"/>
      </optional>
      <optional>
        <ref name="genericInformation"/>
      </optional>
      <optional>
        <ref name="projectName"/>
      </optional>
      <optional>
        <ref name="logFile"/>
      </optional>
      <optional>
        <attribute name="xsi:schemaLocation">
          <data type="anyURI"/>
        </attribute>
      </optional>
      <choice>
        <ref name="taskFlow"/>
        <ref name="proActive"/>
      </choice>
    </element>
  </define>
  <define name="jobName">
    <attribute name="name">
      <doc:documentation>Identification of this job</doc:documentation>
      <data type="string"/>
    </attribute>
  </define>
  <define name="variables">
    <element name="variables">
      <doc:documentation>Definition of variables which can be reused throughout this descriptor</doc:documentation>
      <oneOrMore>
        <ref name="variable"/>
      </oneOrMore>
    </element>
  </define>
  <define name="variable">
    <element name="variable">
      <doc:documentation>Definition of one variable, the variable can be reused (even in another following variable definition) by using the syntax ${name_of_variable}</doc:documentation>
      <ref name="variableName"/>
      <ref name="variableValue"/>
    </element>
  </define>
  <define name="variableName">
    <attribute name="name">
      <doc:documentation>Name of a variable</doc:documentation>
      <data type="NCName"/>
    </attribute>
  </define>
  <define name="variableValue">
    <attribute name="value">
      <doc:documentation>The patterns ${name_of_variable} will be replaced by this value</doc:documentation>
      <data type="string"/>
    </attribute>
  </define>
  <define name="priority">
    <attribute name="priority">
      <doc:documentation>Priority of the job</doc:documentation>
      <ref name="jobPriority"/>
    </attribute>
  </define>
  <define name="cancelJobOnError_j">
    <attribute name="cancelJobOnError">
      <doc:documentation>For each task, does the job cancel right away if a single task had an error (by opposition to a network failure, memory error, etc...) (default=false)</doc:documentation>
      <data type="boolean"/>
    </attribute>
  </define>
  <define name="restartTaskOnError_j">
    <attribute name="restartTaskOnError">
      <doc:documentation>For each task, where does the task restart if an error occurred ? (default=anywhere)</doc:documentation>
      <ref name="restartTaskType"/>
    </attribute>
  </define>
  <define name="numberOfExecution_j">
    <attribute name="maxNumberOfExecution">
      <doc:documentation>Maximum number of execution for each task (default=1)</doc:documentation>
      <data type="nonNegativeInteger"/>
    </attribute>
  </define>
  <define name="logFile">
    <attribute name="logFile">
      <doc:documentation>The path to a file where the logs of this job will be written </doc:documentation>
      <data type="anyURI"/>
    </attribute>
  </define>
  <define name="jobClasspath">
    <element name="jobClasspath">
      <doc:documentation>The classPath where to find the dependences of your job. It must contain path element</doc:documentation>
      <oneOrMore>
        <ref name="pathElement"/>
      </oneOrMore>
    </element>
  </define>
  <define name="pathElement">
    <element name="pathElement">
      <doc:documentation>Path element (one pathElement for each classpath entry)</doc:documentation>
      <ref name="pathElem"/>
    </element>
  </define>
  <define name="pathElem">
    <attribute name="path">
      <doc:documentation>The classpath content</doc:documentation>
      <data type="string"/>
    </attribute>
  </define>
  <define name="genericInformation">
    <element name="genericInformation">
      <doc:documentation>Definition of any information you would like to get in the policy</doc:documentation>
      <oneOrMore>
        <ref name="info"/>
      </oneOrMore>
    </element>
  </define>
  <define name="info">
    <element name="info">
      <doc:documentation>Information that you can get in the policy through the job content</doc:documentation>
      <ref name="infoName"/>
      <ref name="infoValue"/>
    </element>
  </define>
  <define name="infoName">
    <attribute name="name">
      <doc:documentation>Name of the information variable</doc:documentation>
      <data type="NCName"/>
    </attribute>
  </define>
  <define name="infoValue">
    <attribute name="value">
      <doc:documentation>Value of the information variable</doc:documentation>
      <data type="string"/>
    </attribute>
  </define>
  <define name="projectName">
    <attribute name="projectName">
      <doc:documentation>Name of the project related to this job. It is also used in the policy to group some jobs together</doc:documentation>
      <data type="string"/>
    </attribute>
  </define>
  <define name="jobDescription">
    <element name="description">
      <doc:documentation>Textual description of this job </doc:documentation>
      <text/>
    </element>
  </define>
  <define name="taskFlow">
    <element name="taskFlow">
      <doc:documentation>A job composed of a flow of tasks with or without dependencies </doc:documentation>
      <oneOrMore>
        <ref name="task"/>
      </oneOrMore>
    </element>
  </define>
  <define name="proActive">
    <element name="proActive">
      <doc:documentation>A job that will launch a proActive application </doc:documentation>
      <ref name="neededNodes"/>
      <ref name="taskProActive"/>
    </element>
  </define>
  <define name="neededNodes">
    <attribute name="neededNodes">
      <doc:documentation>How many resources (ProActive nodes) does this job need ? </doc:documentation>
      <data type="positiveInteger"/>
    </attribute>
  </define>
  <define name="jobPriority">
    <choice>
      <value>highest</value>
      <value>high</value>
      <value>normal</value>
      <value>low</value>
      <value>lowest</value>
    </choice>
  </define>
  <define name="restartTaskType">
    <choice>
      <value>anywhere</value>
      <value>elsewhere</value>
    </choice>
  </define>
  <!-- +++++++++++++ task -->
  <define name="task">
    <element name="task">
      <doc:documentation>A task is the smallest computation unit for the scheduler </doc:documentation>
      <ref name="taskName"/>
      <optional>
        <ref name="cancelJobOnError_t"/>
      </optional>
      <optional>
        <ref name="restartTaskOnError_t"/>
      </optional>
      <optional>
        <ref name="numberOfExecution_t"/>
      </optional>
      <optional>
        <ref name="walltime"/>
      </optional>
      <optional>
        <ref name="preciousResult"/>
      </optional>
      <optional>
        <ref name="resultPreviewClass"/>
      </optional>
      <optional>
        <ref name="taskDescription"/>
      </optional>
      <optional>
        <ref name="genericInformation"/>
      </optional>
      <optional>
        <ref name="depends"/>
      </optional>
      <optional>
        <ref name="selection"/>
      </optional>
      <optional>
        <ref name="pre"/>
      </optional>
      <ref name="executable"/>
      <optional>
        <ref name="post"/>
      </optional>
      <optional>
        <ref name="cleaning"/>
      </optional>
    </element>
  </define>
  <define name="taskProActive">
    <element name="task">
      <doc:documentation>The task ProActive is a special task that can use more than one node for execution.</doc:documentation>
      <ref name="taskName"/>
      <optional>
        <ref name="cancelJobOnError_t"/>
      </optional>
      <optional>
        <ref name="restartTaskOnError_t"/>
      </optional>
      <optional>
        <ref name="numberOfExecution_t"/>
      </optional>
      <optional>
        <ref name="resultPreviewClass"/>
      </optional>
      <optional>
        <ref name="taskDescription"/>
      </optional>
      <optional>
        <ref name="genericInformation"/>
      </optional>
      <optional>
        <ref name="selection"/>
      </optional>
      <optional>
        <ref name="pre"/>
      </optional>
      <ref name="proActiveExecutable"/>
      <optional>
        <ref name="post"/>
      </optional>
    </element>
  </define>
  <define name="taskName">
    <attribute name="name">
      <doc:documentation>Identification of this task (identifier) </doc:documentation>
      <data type="ID"/>
    </attribute>
  </define>
  <define name="taskDescription">
    <element name="description">
      <doc:documentation>Textual description of this task</doc:documentation>
      <text/>
    </element>
  </define>
  <define name="walltime">
    <attribute name="walltime">
      <doc:documentation>Defines walltime - maximum execution time of the task in second</doc:documentation>
      <ref name="walltimePattern"/>
    </attribute>
  </define>
  <define name="cancelJobOnError_t">
    <attribute name="cancelJobOnError">
      <doc:documentation>Does the job cancel right away if a single task had an error (by opposition to a network failure, memory error, etc...)</doc:documentation>
      <data type="boolean"/>
    </attribute>
  </define>
  <define name="restartTaskOnError_t">
    <attribute name="restartTaskOnError">
      <doc:documentation>Where does the task restart if an error occurred ?</doc:documentation>
      <ref name="restartTaskType"/>
    </attribute>
  </define>
  <define name="numberOfExecution_t">
    <attribute name="maxNumberOfExecution">
      <doc:documentation>Maximum number of execution for this task</doc:documentation>
      <data type="nonNegativeInteger"/>
    </attribute>
  </define>
  <define name="preciousResult">
    <attribute name="preciousResult">
      <doc:documentation>Do we keep the result among the job results  </doc:documentation>
      <data type="boolean"/>
    </attribute>
  </define>
  <define name="resultPreviewClass">
    <attribute name="resultPreviewClass">
      <doc:documentation>A class implementing the ResultPreview interface which can be used to display the result of this task</doc:documentation>
      <ref name="classPattern"/>
    </attribute>
  </define>
  <define name="depends">
    <element name="depends">
      <doc:documentation>A list of dependencies for this task </doc:documentation>
      <oneOrMore>
        <ref name="dependsTask"/>
      </oneOrMore>
    </element>
  </define>
  <define name="dependsTask">
    <element name="task">
      <doc:documentation>A task from which this task depends </doc:documentation>
      <attribute name="ref">
        <data type="IDREF"/>
      </attribute>
    </element>
  </define>
  <define name="selection">
    <element name="selection">
      <doc:documentation>A script used to select resources that can handle the task </doc:documentation>
      <oneOrMore>
        <ref name="selectionScript"/>
      </oneOrMore>
    </element>
  </define>
  <define name="pre">
    <element name="pre">
      <doc:documentation>A script launched before the task execution in the task node</doc:documentation>
      <ref name="script"/>
    </element>
  </define>
  <define name="post">
    <element name="post">
      <doc:documentation>A script launched after the task execution in the task node</doc:documentation>
      <ref name="script"/>
    </element>
  </define>
  <define name="cleaning">
    <element name="cleaning">
      <doc:documentation>A script launched by the Resource Manager after the task or post script</doc:documentation>
      <ref name="script"/>
    </element>
  </define>
  <!-- +++++++++++++ scripts -->
  <define name="script">
    <element name="script">
      <doc:documentation>Definition of a standard script </doc:documentation>
      <choice>
        <ref name="codeScript"/>
        <ref name="fileScript"/>
      </choice>
    </element>
  </define>
  <define name="selectionScript">
    <element name="script">
      <doc:documentation>Definition of a specific script which is used for resource selection </doc:documentation>
      <optional>
        <ref name="scriptType"/>
      </optional>
      <choice>
        <ref name="codeScript"/>
        <ref name="fileScript"/>
      </choice>
    </element>
  </define>
  <define name="scriptType">
    <attribute name="type">
      <doc:documentation>Type of script for the infrastructure manager (default to dynamic)  </doc:documentation>
      <choice>
        <value>dynamic</value>
        <value>static</value>
      </choice>
    </attribute>
  </define>
  <define name="codeScript">
    <element name="code">
      <doc:documentation>Definition of a script by writing directly the code inside the descriptor </doc:documentation>
      <attribute name="language">
        <data type="NCName"/>
      </attribute>
      <text/>
    </element>
  </define>
  <define name="fileScript">
    <element name="file">
      <doc:documentation>Definition of a script by loading a file </doc:documentation>
      <choice>
        <ref name="path"/>
        <ref name="url"/>
      </choice>
      <optional>
        <ref name="fileScriptArguments"/>
      </optional>
    </element>
  </define>
  <define name="path">
    <attribute name="path">
      <doc:documentation>File path to script definition  </doc:documentation>
      <data type="anyURI"/>
    </attribute>
  </define>
  <define name="url">
    <attribute name="url">
      <doc:documentation>Remote script definition, reachable at the given url </doc:documentation>
      <data type="anyURI"/>
    </attribute>
  </define>
  <define name="fileScriptArguments">
    <element name="arguments">
      <doc:documentation>A list of arguments of this script </doc:documentation>
      <oneOrMore>
        <ref name="fileScriptArgument"/>
      </oneOrMore>
    </element>
  </define>
  <define name="fileScriptArgument">
    <element name="argument">
      <doc:documentation>An argument of this script  </doc:documentation>
      <attribute name="value">
        <data type="string"/>
      </attribute>
    </element>
  </define>
  <!-- +++++++++++++ executables -->
  <define name="executable">
    <choice>
      <doc:documentation>The task executable is the actual code that will be run on the selected resource. It can be a native command or a Java class </doc:documentation>
      <ref name="nativeExecutable"/>
      <ref name="javaExecutable"/>
    </choice>
  </define>
  <define name="nativeExecutable">
    <element name="nativeExecutable">
      <doc:documentation>A native command call, it can be statically described or generated by a script </doc:documentation>
      <choice>
        <ref name="staticCommand"/>
        <ref name="dynamicCommand"/>
      </choice>
    </element>
  </define>
  <define name="staticCommand">
    <element name="staticCommand">
      <doc:documentation>A native command statically defined in the descriptor </doc:documentation>
      <attribute name="value">
        <data type="string"/>
      </attribute>
      <optional>
        <ref name="workingDir_t"/>
      </optional>
      <optional>
        <ref name="commandArguments"/>
      </optional>
    </element>
  </define>
  <define name="workingDir_t">
    <attribute name="workingDir">
      <doc:documentation>working dir for native command to execute (ie launching dir, pwd...)</doc:documentation>
      <data type="string"/>
    </attribute>
  </define>
  <define name="commandArguments">
    <element name="arguments">
      <doc:documentation>List of arguments to the native command (they will be appended at the end of the command) </doc:documentation>
      <oneOrMore>
        <ref name="commandArgument"/>
      </oneOrMore>
    </element>
  </define>
  <define name="commandArgument">
    <element name="argument">
      <attribute name="value">
        <data type="string"/>
      </attribute>
    </element>
  </define>
  <define name="dynamicCommand">
    <element name="dynamicCommand">
      <doc:documentation>A command generated dynamically </doc:documentation>
      <optional>
        <ref name="workingDir_t"/>
      </optional>
      <ref name="generation"/>
    </element>
  </define>
  <define name="generation">
    <element name="generation">
      <doc:documentation>A command generated by a script </doc:documentation>
      <ref name="script"/>
    </element>
  </define>
  <define name="javaExecutable">
    <element name="javaExecutable">
      <doc:documentation>A Java class implementing the Executable interface </doc:documentation>
      <ref name="class"/>
      <optional>
        <ref name="fork"/>
      </optional>
      <optional>
        <ref name="forkEnvironment"/>
      </optional>
      <optional>
        <ref name="javaParameters"/>
      </optional>
    </element>
  </define>
  <define name="class">
    <attribute name="class">
      <doc:documentation>The fully qualified class name </doc:documentation>
      <ref name="classPattern"/>
    </attribute>
  </define>
  <define name="fork">
    <attribute name="fork">
      <doc:documentation>Do we have to fork this task or not</doc:documentation>
      <data type="boolean"/>
    </attribute>
  </define>
  <define name="forkEnvironment">
    <element name="forkEnvironment">
      <doc:documentation>Fork environment if needed</doc:documentation>
      <optional>
        <ref name="javaHome"/>
      </optional>
      <ref name="jvmParameters"/>
    </element>
  </define>
  <define name="javaHome">
    <attribute name="javaHome">
      <doc:documentation>Path to installed java directory, to this path '/bin/java' will be added, if attribute does not exist only 'java' command will be called</doc:documentation>
      <data type="anyURI"/>
    </attribute>
  </define>
  <define name="jvmParameters">
    <attribute name="jvmParameters">
      <doc:documentation>Options passed to Java (not an application) (example: memory settings or properties) </doc:documentation>
      <data type="string"/>
    </attribute>
  </define>
  <define name="proActiveExecutable">
    <element name="proActiveExecutable">
      <doc:documentation>A ProActive application (java class) </doc:documentation>
      <ref name="class"/>
      <optional>
        <ref name="javaParameters"/>
      </optional>
    </element>
  </define>
  <define name="javaParameters">
    <element name="parameters">
      <doc:documentation>A list of parameters that will be given to the Java task through the init method </doc:documentation>
      <oneOrMore>
        <ref name="javaParameter"/>
      </oneOrMore>
    </element>
  </define>
  <define name="javaParameter">
    <element name="parameter">
      <doc:documentation>A parameter in the form of key/value pair </doc:documentation>
      <attribute name="name">
        <data type="NCName"/>
      </attribute>
      <attribute name="value">
        <data type="string"/>
      </attribute>
    </element>
  </define>
  <define name="classPattern">
    <data type="string">
      <param name="pattern">([A-Za-z_$][A-Za-z_0-9$]*\.)*[A-Za-z_$][A-Za-z_0-9$]*</param>
    </data>
  </define>
  <define name="walltimePattern">
    <data type="string">
      <param name="pattern">[0-9]*[1-9][0-9]*(:[0-5][0-9]){0,2}</param>
    </data>
  </define>
</grammar>
