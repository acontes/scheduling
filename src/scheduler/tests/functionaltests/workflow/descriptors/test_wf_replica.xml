<?xml version="1.0" encoding="UTF-8"?>
<job xmlns="urn:proactive:jobdescriptor:dev" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	 xsi:schemaLocation="urn:proactive:jobdescriptor:dev ../../src/scheduler/src/org/ow2/proactive/scheduler/common/xml/schemas/jobdescriptor/dev/schedulerjob.xsd"
	 name="test_wf_replica" priority="normal" cancelJobOnError="true">


  <taskFlow>

	<task name="split">
	  <pre>
		<script>
		  <code language="javascript"><![CDATA[
if ($IT == 0) {
	var dir = new java.io.File(new String(output.getRealURI() + "/").substring(7));
	var files = dir.listFiles();
	for (var i=0; i < files.length; i++) {
		files[i]['delete']();
	}
	
	var tmp = java.lang.System.getProperty('java.io.tmpdir');
	var name = new String(tmp + "/sched_wf_test_toNOTclean");
	var f = new java.io.File(name);
	f['delete']();
	
		var name = new String(tmp + "/sched_wf_test_toclean");
	var f = new java.io.File(name);
	f['delete']();
}
		  ]]></code>
		</script>
	  </pre>
	  <javaExecutable class="org.ow2.proactive.scheduler.examples.WaitAndPrint" />
	  <controlFlow block="start">
		<replicate>
		  <script>
			<code language='javascript'><![CDATA[
runs = 2;
			]]></code>
		  </script>
		</replicate>
	  </controlFlow>
	  <post>
		<script>
		  <code language="javascript"><![CDATA[
importPackage(org.objectweb.proactive.extensions.dataspaces.api);
importPackage(java.io);

files = ["foo_$IT_0.in", "foo_$IT_1.in", "bar_$IT_0.in", "bar_$IT_1.in"];
for (var i=0; i < files.length; i++) {
  var name = new String(output.getRealURI() + "/" + files[i]).substring(7);
  var f = new java.io.File(name);
  f['delete']();
  f.createNewFile();
  var pw = new PrintWriter(new FileOutputStream(f));
  pw.write("Content of " + name);
  pw.close();
}
		  ]]></code>
		</script>
	  </post>
      <outputFiles>
		<files includes="foo_$IT_$REP.in" accessMode="transferToOutputSpace"/>
		<files includes="bar_$IT_$REP.in" accessMode="transferToOutputSpace"/>
	  </outputFiles>
	</task>

	<task name="replica" cancelJobOnError="false" restartTaskOnError="elsewhere"
		  runAsMe="false" maxNumberOfExecution="4" preciousResult="true" walltime="10:00"
		  resultPreviewClass="foo.bar.Baz">
	  <description>
		This task will be replicated. We put as much stuff as possible in it
		to check if everything is nicely replicated
	  </description>
	  <genericInformation>
        <info name="info1" value="value1"/>
        <info name="info2" value="value2"/>
	  </genericInformation>
	  <depends>
		<task ref="split" />
	  </depends>
      <inputFiles>
		<files includes="foo_$IT_$REP.in" accessMode="transferFromOutputSpace"/>
		<files includes="bar_$IT_$REP.in" accessMode="transferFromOutputSpace"/>
	  </inputFiles>
	  <parallel numberOfNodes="2">
		<topology>
		  <singleHost/>
		</topology>
	  </parallel>
	  <selection>
		<script>
		  <code language="javascript"><![CDATA[
selected = true;
		  ]]></code>
		</script>
	  </selection>
	  <pre>
		<script>
		  <code language="javascript"><![CDATA[
print("Pre script $IT $REP");

var tmp = java.lang.System.getProperty('java.io.tmpdir');
var name = new String(tmp + "/sched_wf_test_toclean");
var f = new java.io.File(name);
f['delete']();
print("create " + f);
f.createNewFile();

var name = new String(tmp + "/sched_wf_test_toNOTclean");
var f = new java.io.File(name);
print("create " + f);
f['delete']();
f.createNewFile();
		  ]]></code>
		</script>
	  </pre>
	  <javaExecutable class="functionaltests.executables.ReplicaExec" >
		<forkEnvironment workingDir="${pa.scheduler.home}" >
		  <jvmArgs>
			<jvmArg value="-Dproactive.test=true"/>
			<jvmArg value="-Dfoo=foo_val" />
		  </jvmArgs>
		  <additionalClasspath>
			<pathElement path="${pa.scheduler.home}/classes/schedulerTests/" />
		  </additionalClasspath>
		  <envScript>
			<script>
			  <code language="python"><![CDATA[
			  forkEnvironment.addJVMArgument("-Dbar=bar_val")
			  ]]></code>
			</script>
		  </envScript>
		</forkEnvironment>
		<parameters>
		  <parameter name="foo" value="foo_$IT_$REP"/>
		  <parameter name="bar" value="bar_$IT_$REP"/>
		</parameters>
	  </javaExecutable>
	  <post>
		<script>
		  <code language="javascript"><![CDATA[
print("Post script $IT $REP");
		  ]]></code>
		</script>
	  </post>
	  <cleaning>
		<script>
		  <code language="javascript"><![CDATA[
var tmp = java.lang.System.getProperty('java.io.tmpdir');
var name = new String(tmp + "/sched_wf_test_toclean");
var f = new java.io.File(name);
print("delete " + f);
f['delete']();
		  ]]></code>
		</script>
	  </cleaning>
      <outputFiles>
		<files includes="foo_$IT_$REP.out" accessMode="transferToOutputSpace"/>
		<files includes="bar_$IT_$REP.out" accessMode="transferToOutputSpace"/>
	  </outputFiles>
	</task>

	<task name="loop">
	  <depends>
		<task ref="replica" />
	  </depends>
	  <nativeExecutable>
		<dynamicCommand>
		  <generation>
			<script>
			  <code language="javascript"><![CDATA[
var it = java.lang.System.getProperty("pas.task.iteration");
command = "echo generated hello " + it;
			  ]]></code>
			</script>
		  </generation>
		</dynamicCommand>
	  </nativeExecutable>
	  <controlFlow block="end">
		<loop target="split">
		  <script>
			<code language='javascript'><![CDATA[
loop = ($IT < 1);
			]]></code>
		  </script>
		</loop>
	  </controlFlow>
	  <post>
		<script>
		  <code language="javascript"><![CDATA[
if ($IT > 0) {
  print("in " + input.getRealURI().substring(7));
  print("out " + output.getRealURI().substring(7));
}		  
		  ]]></code>
		</script>
	  </post>
	</task>

  </taskFlow>
</job>
