
					Virtual Node Specification
					--------------------------

Definitions:
-----------


Node
	A location to execute a computation. By default a Node is created
	for each CPU reported by a Java Runtime.

Virtual Node
	A set of Nodes
	A Virtual Node is an abstraction for deploying parallel and distributed
	applications.
	
Resource Provider
	A GCM Deployment Descriptor instance. A Resource Provider is in charge
	of resources acquisition. Nodes started by a Resource Provider belong to it.

Capacity
	The number of Nodes asked by a Virtual Node or a Resource Provider 



General rules:
-------------

A Node registers itself to the deployment Runtime. This Node has to be 
attributed to a Virtual Node. A Node is said to be "Sent" to a Virtual Node
when Node properties match Virtual Node requirements.

The deployment mechanism CAN NOT ensure that a deployment will be able to 
fulfill GCM Application requirements. However, if a mapping exists the deployment
mechanism MUST satisfy requirements.

A Virtual Node is said as a "Best Effort Virtual Node" if no capacity is specified. 
A such Virtual Node will try to get as many Nodes as possible.

Virtual Nodes with strict requirements are always satisfied before Best Effort 
Virtual Node.

A round robin algorithm is applied between all Best Effort Virtual Nodes. 
The round robin DOES NOT depend on the number of Resource Provider. 

A first match policy is applied for Resource Provider. If a Node fulfill a requirement
then it is send to the Virtual Node. Ordering is not important here. 

A Virtual Node is Ready when all its requirements are fulfilled. A Best Effort Virtual
Node is ready as soon as all Resource Provider requirements are fulfilled.

If a non Best Effort Virtual Node has at least one Best Effort and one non Best Effort
Resource Provider, then all requirements must be fulfilled before using the Best Effort
Resource Providers. 


Use case 1
---------

	<virtualNode id="vn1" />

One, Best Effort, Virtual Node. All Nodes will be sent to vn1.

vn1 is always Ready.

	
Use case 2
----------
	
	<virtualNode id="vn1" capacity="X" />
	X > 0
	
One Virtual Node asking for X Nodes from any Resource Provider.
If more than X Nodes are available, remaining Nodes are dropped. If 
less than X Nodes are available, vn1 will never be Ready.

vn1 is Ready when X nodes have been sent to it.	

	
Use case 3
----------

	<virtualNode id="vn1" />
	<virtualNode id="vn2" />

Two Best Effort Virtual Nodes. Nodes will be sent to vn1 and vn2 by 
using a round robin algorithm.

Theses two Virtual Node are always Ready

	
Use case 4
----------

	<virtualNode id="vn1">
		<resourceProvider refid="RP1" />
	</virtualNode>
	
One Best Effort Virtual Node. Only Nodes from the RP1 Resource Provider are
acceptable.

vn1 is always Ready

	
Use case 5
----------

	<virtualNode id="vn1">
		<resourceProvider refid="RP1" capacity="X" />
	</virtualNode>
	x > 0

One Best Effort Virtual Node. Only X Nodes from the RP1 Resource Provider are
acceptable.

vn1 is Ready when X Nodes have been contributed by RP1.
	
	
Use case 6
----------
	
	<virtualNode id="vn1" capacity="X">
		<resourceProvider refid="RP1"/>
	</virtualNode>	
	X > 0
	
One Virtual Node asking for X Nodes. Only Nodes provided by the RP1 Resource Provider are
acceptable.

vn1 is Ready when X Nodes have been sent to it.
	
	
Use case 7
----------
	
	<virtualNode id="vn1" capacity="X">
		<resourceProvider refid="RP1" capacity="Y"/>
	</virtualNode>
	X > 0, Y > 0
	
One Virtual Node asking for X Nodes. Only Y Nodes from the RP1 Resource 
Provider are acceptable.	
This leads to three cases:

	X = Y
X Nodes will be send to vn1

vn1 is Ready when X Nodes have been sent to it and Y Nodes have been contributed by RP1.

	X > Y
Y nodes from RP1 will be send to the Virtual Node. 

Since X > Y the Virtual Node is never be ready. A warning should be printed in this case

	X < Y
X Nodes from RP1 will be send to the Virtual Node. Remaining Nodes will not be used

vn1 is Ready when X Nodes have been sent to it.	

	
Use case 8
----------
	
	<virtualNode id="vn1" capacity="X">
		<resourceProvider refid="RP1" capacity="Y"/>
		<resourceProvider refid="RP1" capacity="Z"/>
	</virtualNode>
	
Generalization of Use case 7 with X = Y + Z, X < Y + Z and X > Y + Z.

vn1 is Ready when X Nodes have been sent to it.


Use case 9
----------

	<virtualNode id="vn1" capacity="X">
		<resourceProvider refid="RP1">
		<resourceProvider refid="RP2">
	</virtualNode>
	
One Virtual Node asking for X Nodes. Only Nodes provided by the RP1 or RP2 Resource Providers 
are acceptable.

vn1 is Ready when X Nodes have been sent to it.


Use case 10
-----------

	<virtualNode id="vn1">
		<resourceProvider refid="RP1" capacity="Y" />
		<resourceProvider refid="RP2" capacity="Z" />
		<resourceProvider refid="RP3" />
	</virtualNode>

One Best Effort Virtual Node. Only Nodes provided by the RP1, RP2 or RP3 Resource Providers 
are acceptable. No more than Y and Z Nodes can be provided by RP1 and RP2 respectively. 

vn1 is Ready when Y Nodes from RP1 and Z Nodes from RP2 have been sent to it.
	
Use case 11
-----------

	<virtualNode id="vn1" capacity="X">
		<resourceProvider refid="RP1" capacity="Y" />
		<resourceProvider refid="RP2" capacity="Z" />
		<resourceProvider refid="RP3" />
	</virtualNode>

One  Virtual Node asking for X Nodes. Only Nodes provided by the RP1, RP2 or RP3 Resource Providers 
are acceptable. No more than Y and Z Nodes can be provided by RP1 and RP2 respectively. 

vn1 is Ready when X Nodes have been sent to it.



	
Real World Examples:


Hierarchical Master/Worker
--------------------------

	<virtualNode id="masters">
		<resourceProvider refid="RP1" capacity="1"/>
		<resourceProvider refid="RP2" capacity="1"/>
		<resourceProvider refid="RP3" capacity="1"/>
	</virtualNode>
	<virtualNode id="workers">
		<resourceProvider refid="RP1" />
		<resourceProvider refid="RP2" />
		<resourceProvider refid="RP3" />
	</virtualNode>	

	