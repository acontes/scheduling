/*
 * ################################################################
 *
 * ProActive: The Java(TM) library for Parallel, Distributed,
 *            Concurrent computing with Security and Mobility
 *
 * Copyright (C) 1997-2007 INRIA/University of Nice-Sophia Antipolis
 * Contact: proactive@objectweb.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version
 * 2 of the License, or any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
 * USA
 *
 *  Initial developer(s):               The ProActive Team
 *                        http://proactive.inria.fr/team_members.htm
 *  Contributor(s):
 *
 * ################################################################
 */
package org.objectweb.proactive.extra.infrastructuremanager.frontend;

import java.io.IOException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;

import org.apache.log4j.Logger;
import org.objectweb.proactive.Body;
import org.objectweb.proactive.InitActive;
import org.objectweb.proactive.api.ProActiveObject;
import org.objectweb.proactive.core.UniqueID;
import org.objectweb.proactive.core.descriptor.data.ProActiveDescriptor;
import org.objectweb.proactive.core.descriptor.data.VirtualNode;
import org.objectweb.proactive.core.node.NodeException;
import org.objectweb.proactive.core.util.log.Loggers;
import org.objectweb.proactive.core.util.log.ProActiveLogger;
import org.objectweb.proactive.core.util.wrapper.IntWrapper;
import org.objectweb.proactive.core.util.wrapper.StringWrapper;
import org.objectweb.proactive.extra.infrastructuremanager.common.IMConstants;
import org.objectweb.proactive.extra.infrastructuremanager.common.event.IMEvent;
import org.objectweb.proactive.extra.infrastructuremanager.common.event.IMEventType;
import org.objectweb.proactive.extra.infrastructuremanager.common.event.IMInitialState;
import org.objectweb.proactive.extra.infrastructuremanager.common.event.IMNodeEvent;
import org.objectweb.proactive.extra.infrastructuremanager.common.event.IMNodeSourceEvent;
import org.objectweb.proactive.extra.infrastructuremanager.core.IMCore;
import org.objectweb.proactive.extra.infrastructuremanager.core.IMCoreInterface;
import org.objectweb.proactive.extra.infrastructuremanager.imnode.IMNode;
import org.objectweb.proactive.extra.infrastructuremanager.nodesource.frontend.NodeSource;


/**
 * Active object designed for the Monitoring of the Infrastructure Manager.
 * This class provides a way for a monitor to ask at
 * Infrastructure Manager to throw events
 * generated by nodes and nodes sources management. IMMonitoring dispatch
 * events thrown by {@link IMCore} to all its monitors.
 *
 *        //TODO methods to add and remove because IM GUI is in development,
 *        so Java Doc not yet up to date for this component
 *
 * @see org.objectweb.proactive.extra.infrastructuremanager.frontend.IMEventListener
 *
 * @author ProActive team
 *
 */
public class IMMonitoringImpl implements IMMonitoring, IMEventListener,
    InitActive {
    private static final Logger logger = ProActiveLogger.getLogger(Loggers.IM_MONITORING);

    // Attributes
    private IMCoreInterface imcore;
    private HashMap<UniqueID, IMEventListener> IMListeners;
    private String MonitoringUrl = null;

    // ----------------------------------------------------------------------//
    // CONSTRUTORS

    /** ProActive empty constructor */
    public IMMonitoringImpl() {
    }

    /**
     * Creates the IMMonitoring active object.
     * @param imcore Stub of the IMCore active object.
     */
    public IMMonitoringImpl(IMCoreInterface imcore) {
        if (logger.isDebugEnabled()) {
            logger.debug("IMMonitoring constructor");
        }

        IMListeners = new HashMap<UniqueID, IMEventListener>();
        this.imcore = imcore;
    }

    /** Initialization part of the IMMonitoring active object */
    public void initActivity(Body body) {
        try {
            MonitoringUrl = "//" +
                ProActiveObject.getNode().getVMInformation().getHostName() +
                "/" + IMConstants.NAME_ACTIVE_OBJECT_IMMONITORING;
            ProActiveObject.register((IMMonitoring) ProActiveObject.getStubOnThis(),
                this.MonitoringUrl);
        } catch (IOException e) {
            e.printStackTrace();
        } catch (NodeException e) {
            e.printStackTrace();
        }
    }

    /** Register a new Infrastructure manager listener.
     * Way to a monitor object to ask at IMMonitoring to throw
     * IM events to it.
     * @param listener a listener object which implements {@link IMEventListener}
     * interface.
     * @param events list of wanted events that must be received.
     * @return IMInitialState snapshot of IM's current state : nodes and node sources.
     *  */
    public IMInitialState addIMEventListener(IMEventListener listener,
        IMEventType... events) {
        UniqueID id = ProActiveObject.getContext().getCurrentRequest()
                                     .getSourceBodyID();

        this.IMListeners.put(id, listener);
        return imcore.getIMInitialState();
    }

    /**
     * Dispatch events thrown by the IMCore to all known monitors of the IM.
     * @param methodName method name corresponding to the event.
     * @param types Object types associated with the method call.
     * @param params Object associated with the method call.
     */
    private void dispatch(IMEventType methodName, Class<?>[] types,
        Object... params) {
        try {
            Method method = IMEventListener.class.getMethod(methodName.toString(),
                    types);

            Iterator<UniqueID> iter = this.IMListeners.keySet().iterator();
            while (iter.hasNext()) {
                UniqueID id = iter.next();
                try {
                    method.invoke(IMListeners.get(id), params);
                } catch (Exception e) {
                    iter.remove();
                    logger.error(
                        "!!!!!!!!!!!!!! IM has detected that a listener is not connected anymore !");
                }
            }
        } catch (SecurityException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        }
    }

    /** echo method for test */
    public StringWrapper echo() {
        return new StringWrapper("Je suis le IMMonitoring");
    }

    /**
     * //TODO gsigety : 9 methods below to reconsider when
     * the new IM GUI will be available
     */
    public HashMap<String, ProActiveDescriptor> getListDescriptor() {
        if (logger.isDebugEnabled()) {
            logger.debug("getListDescriptor");
        }
        return null;
        //TODO Germ todo
    }

    public HashMap<String, ArrayList<VirtualNode>> getDeployedVirtualNodeByPad() {
        if (logger.isDebugEnabled()) {
            logger.debug("getDeployedVirtualNodeByPad");
        }
        return null;
        //TODO Germ todo
    }

    public ArrayList<IMNode> getListAllIMNodes() {
        if (logger.isDebugEnabled()) {
            logger.debug("getListAllIMNodes");
        }

        return imcore.getListAllNodes();
    }

    public ArrayList<IMNode> getListFreeIMNode() {
        if (logger.isDebugEnabled()) {
            logger.debug("getListFreeIMNode");
        }

        return imcore.getListFreeIMNode();
    }

    public ArrayList<IMNode> getListBusyIMNode() {
        if (logger.isDebugEnabled()) {
            logger.debug("getListBusyIMNode");
        }

        return imcore.getListBusyIMNode();
    }

    public IntWrapper getNumberOfFreeResource() {
        if (logger.isDebugEnabled()) {
            logger.debug("getNumberOfFreeResource");
        }

        return imcore.getSizeListFreeIMNode();
    }

    public IntWrapper getNumberOfBusyResource() {
        if (logger.isDebugEnabled()) {
            logger.debug("getNumberOfBusyResource");
        }

        return imcore.getSizeListBusyIMNode();
    }

    public IntWrapper getNumberOfDownResource() {
        return this.imcore.getSizeListDownIMNode();
    }

    public IntWrapper getNumberOfAllResources() {
        return this.imcore.getNbAllIMNode();
    }

    /** inherited from IMEventListener methods
     */

    /** IM has been stopped */
    public void imShutDownEvent(IMEvent evt) {
        evt.setIMUrl(this.MonitoringUrl);
        dispatch(IMEventType.SHUTDOWN, new Class<?>[] { IMEvent.class }, evt);
    }

    /** IM is shutting down */
    public void imShuttingDownEvent(IMEvent evt) {
        evt.setIMUrl(this.MonitoringUrl);
        dispatch(IMEventType.SHUTTING_DOWN, new Class<?>[] { IMEvent.class },
            evt);
    }

    /** IM has started */
    public void imStartedEvent(IMEvent evt) {
        evt.setIMUrl(this.MonitoringUrl);
        dispatch(IMEventType.STARTED, new Class<?>[] { IMEvent.class }, evt);
    }

    /** IM is shutting down */
    public void imKilledEvent(IMEvent evt) {
        evt.setIMUrl(this.MonitoringUrl);
        dispatch(IMEventType.KILLED, new Class<?>[] { IMEvent.class }, evt);
    }

    /** New node source available in IM.
     * @param ns node source event containing new {@link NodeSource} properties.
     */
    public void nodeSourceAddedEvent(IMNodeSourceEvent ns) {
        ns.setIMUrl(this.MonitoringUrl);
        dispatch(IMEventType.NODESOURCE_CREATED,
            new Class<?>[] { IMNodeSourceEvent.class }, ns);
    }

    /** node removed from IM.
     * @param ns node source event containing removed {@link NodeSource} properties.
     */
    public void nodeSourceRemovedEvent(IMNodeSourceEvent ns) {
        ns.setIMUrl(this.MonitoringUrl);
        dispatch(IMEventType.NODESOURCE_REMOVED,
            new Class<?>[] { IMNodeSourceEvent.class }, ns);
    }

    /** new node available in IM.
     * @param n node event containing new {@link IMNode} properties.
     */
    public void nodeAddedEvent(IMNodeEvent n) {
        n.setIMUrl(this.MonitoringUrl);
        dispatch(IMEventType.NODE_ADDED, new Class<?>[] { IMNodeEvent.class }, n);
    }

    /**
     * Node has ended a task.
     * becomes from busy to free state.
     * @param n node event containing {@link IMNode} properties.
     */
    public void nodeFreeEvent(IMNodeEvent n) {
        n.setIMUrl(this.MonitoringUrl);
        dispatch(IMEventType.NODE_FREE, new Class<?>[] { IMNodeEvent.class }, n);
    }

    /**
     * Node begins to perform a task.
     * becomes from free to busy state.
     * @param n node event containing {@link IMNode} properties.
     */
    public void nodeBusyEvent(IMNodeEvent n) {
        n.setIMUrl(this.MonitoringUrl);
        dispatch(IMEventType.NODE_BUSY, new Class<?>[] { IMNodeEvent.class }, n);
    }

    /**
     * Node is busy and must be released at the end of the task.
     * becomes from busy to 'to be released' state.
     * @param n node event containing {@link IMNode} properties.
     */
    public void nodeToReleaseEvent(IMNodeEvent n) {
        n.setIMUrl(this.MonitoringUrl);
        dispatch(IMEventType.NODE_TO_RELEASE,
            new Class<?>[] { IMNodeEvent.class }, n);
    }

    /**
     * Node does not answer anymore to its monitor, the node is said 'down'.
     * becomes from free, busy, 'to be released' or down state.
     * @param n node event containing {@link IMNode} properties.
     */
    public void nodeDownEvent(IMNodeEvent n) {
        n.setIMUrl(this.MonitoringUrl);
        dispatch(IMEventType.NODE_DOWN, new Class<?>[] { IMNodeEvent.class }, n);
    }

    /**
     * A Node is removed from the IM.
     * @param n node event containing the removed {@link IMNode} properties.
     */
    public void nodeRemovedEvent(IMNodeEvent n) {
        n.setIMUrl(this.MonitoringUrl);
        dispatch(IMEventType.NODE_REMOVED,
            new Class<?>[] { IMNodeEvent.class }, n);
    }

    /** Stop and remove monitoring active object */
    public void shutdown() {
        //throwing shutdown event
        imShutDownEvent(new IMEvent());
        ProActiveObject.terminateActiveObject(false);
    }
}
