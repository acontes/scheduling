default namespace = "urn:proactive:jobdescriptor:0.9"
namespace jd = "urn:proactive:jobdescriptor:0.9"
namespace xsi = "http://www.w3.org/2001/XMLSchema-instance"
namespace doc = "http://relaxng.org/ns/compatibility/annotations/1.0"
start = job

job = ## definition of a job for the scheduler 
    element job { jobDescription?, variables?, jobName , priority?, cancelOnException?, logFile?, attribute xsi:schemaLocation {xsd:anyURI}?, ( taskFlow | proActive ) }
jobName = ## name of this job
    attribute name { xsd:ID }
variables = ## definition of variables which can be reused throughout this descriptor
    element variables { variable+ }
variable = ## definition of one variable, the variable can be reused (even in another following variable definition) by using the syntax ${name_of_variable}
    element variable { variableName, variableValue}
variableName = ## name of a variable 
    attribute name  { xsd:NCName }
variableValue = ## the patterns ${name_of_variable} will be replaced by this value
    attribute value {xsd:string}

priority = ## priority of the job
    attribute priority { 'highest' | 'high' | 'normal' | 'low' | 'lowest' }
cancelOnException = ## does the job cancel right away if a single task throws an exception (by opposition to a network failure, memory error, etc...) 
    attribute cancelOnException {xsd:boolean}
logFile = ## the path to a file where the logs of this job will be written 
    attribute logFile {xsd:anyURI}
jobDescription = ## textual description of this job 
    element description { text }
taskFlow = ## a job composed of a flow of tasks with or without dependencies 
    element taskFlow { task+ }
proActive = ## a job that will launch a proactive application 
    element proActive {  neededNodes, taskProActive }
neededNodes = ## how many ressources (ProActive nodes) does this job need ? 
    attribute neededNodes { xsd:positiveInteger }


# +++++++++++++ task
task = ## a task is the smallest computation unit for the scheduler 
    element task { taskName, retries?, preciousResult?, taskDescription?, depends?, selection?, pre?, executable , post? }

taskProActive = ## the smallest computation unit for the scheduler 
    element task { taskName, retries?, taskDescription?, selection?, pre?, proActiveExecutable, post? }
taskName = ## name of this task (identifier) 
    attribute name { xsd:ID }
taskDescription = ## textual description of this task
    element description { text }
retries = ## how many times will this task be rescheduled if there is a failure 
    attribute retries { xsd:nonNegativeInteger }
preciousResult = ## do we keep the result among the job results  
    attribute preciousResult { xsd:boolean }
depends = ## a list of dependencies for this task 
    element depends { dependsTask+ }
dependsTask = ## a task from which this task depends 
    element task { attribute ref { xsd:IDREF } }
selection = ## a script used to select resources that can handle the task 
    element selection { script }
pre = ## a script launched before the task execution  
    element pre { script }
post = ## a script launched after the task execution 
    element post { script }

# +++++++++++++ scripts
script = ## definition of a standard script 
    element script { codeScript | fileScript }
selectionScript = ## definition of a specific script which is used for resource selection 
    element script { scriptType?, (codeScript | fileScript) }
scriptType = ## type of script for the infrastructure manager (default to dynamic)  
    attribute type { 'dynamic' | 'static' }
codeScript = ## definition of a script by writing directly the code inside the descriptor 
    element code { attribute language { xsd:NCName }, text }
fileScript = ## definition of a script by loading a file 
    element file { ( path | url), fileScriptArguments? }
path = ## file path to script definition  
    attribute path { xsd:anyURI }
url = ## remote script definition, reachable at the given url 
    attribute url { xsd:anyURI }
fileScriptArguments = ## a list of arguments of this script 
    element arguments { fileScriptArgument+ } 
fileScriptArgument = ## an argument of this script  
    element argument { attribute value { xsd:string } }

# +++++++++++++ executables
executable = ## the task executable is the actual code that will be run on the selected resource. It can be a native command or a Java class 
    ( nativeExecutable | javaExecutable )
nativeExecutable = ## a native command call, it can be statically described or generated by a script 
    element nativeExecutable { staticCommand | dynamicCommand }
staticCommand = ## a native command statically defined in the descriptor 
    element staticCommand { attribute value { xsd:string }, commandArguments? }
commandArguments = ## list of arguments to the native command (they will be appended at the end of the command) 
    element arguments { commandArgument+ }
commandArgument = element argument { attribute value { xsd:string } }
dynamicCommand = ## a command generated dynamically 
    element dynamicCommand { generation }
generation = ## a command generated by a script 
    element generation { script }
javaExecutable = ## a Java class implementing the Executable interface 
    element javaExecutable { class, javaParameters? }
class = ## the fully qualified class name 
    attribute class { classPattern }
proActiveExecutable = ## a ProActive application (java class) 
    element proActiveExecutable { class, javaParameters? }
javaParameters = ## a list of parameters that will be given to the Java task through the init method 
    element parameters { javaParameter+ }
javaParameter = ## a parameter in the form of key/value pair 
    element parameter { attribute name { xsd:NCName }, attribute value { xsd:string } } 

classPattern = xsd:string { pattern="([A-Za-z_$][A-Za-z_0-9$]*\.)*[A-Za-z_$][A-Za-z_0-9$]*"}