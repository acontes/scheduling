/*
 * ################################################################
 *
 * ProActive: The Java(TM) library for Parallel, Distributed,
 *            Concurrent computing with Security and Mobility
 *
 * Copyright (C) 1997-2008 INRIA/University of Nice-Sophia Antipolis
 * Contact: proactive@ow2.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version
 * 2 of the License, or any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
 * USA
 *
 *  Initial developer(s):               The ProActive Team
 *                        http://proactive.inria.fr/team_members.htm
 *  Contributor(s):
 *
 * ################################################################
 * $$PROACTIVE_INITIAL_DEV$$
 */
package org.ow2.proactive.resourcemanager.frontend;

import java.lang.management.ManagementFactory;
import java.util.HashMap;

import javax.management.MBeanServer;
import javax.management.ObjectName;

import org.apache.log4j.Logger;
import org.objectweb.proactive.Body;
import org.objectweb.proactive.InitActive;
import org.objectweb.proactive.api.PAActiveObject;
import org.objectweb.proactive.core.ProActiveException;
import org.objectweb.proactive.core.UniqueID;
import org.objectweb.proactive.core.util.log.ProActiveLogger;
import org.ow2.proactive.resourcemanager.common.RMConstants;
import org.ow2.proactive.resourcemanager.common.event.RMEvent;
import org.ow2.proactive.resourcemanager.common.event.RMEventType;
import org.ow2.proactive.resourcemanager.common.event.RMInitialState;
import org.ow2.proactive.resourcemanager.common.event.RMNodeEvent;
import org.ow2.proactive.resourcemanager.common.event.RMNodeSourceEvent;
import org.ow2.proactive.resourcemanager.core.RMCore;
import org.ow2.proactive.resourcemanager.core.RMCoreInterface;
import org.ow2.proactive.resourcemanager.core.jmx.mbean.RMWrapper;
import org.ow2.proactive.resourcemanager.core.properties.PAResourceManagerProperties;
import org.ow2.proactive.resourcemanager.exception.RMException;
import org.ow2.proactive.resourcemanager.utils.RMLoggers;


/**
 * Active object designed for the Monitoring of the Resource Manager.
 * This class provides a way for a monitor to ask at
 * Resource Manager to throw events
 * generated by nodes and nodes sources management. RMMonitoring dispatch
 * events thrown by {@link RMCore} to all its monitors.
 *
 *
 * @see org.ow2.proactive.resourcemanager.frontend.RMEventListener
 *
 * @author The ProActive Team
 * @since ProActive Scheduling 0.9
 */
public class RMMonitoringImpl implements RMMonitoring, RMEventListener, InitActive {
    private static final Logger logger = ProActiveLogger.getLogger(RMLoggers.MONITORING);

    private static final String RM_BEAN_NAME = PAResourceManagerProperties.RM_JMX_MBEAN_NAME
            .getValueAsString();

    // Attributes
    private RMCoreInterface rmcore;
    private HashMap<UniqueID, RMEventListener> RMListeners;
    private String MonitoringUrl = null;

    /** Scheduler's MBean Server */
    private MBeanServer mbs = null;

    /** Resource Manager's MBean */
    private RMWrapper rMBean = null;

    // ----------------------------------------------------------------------//
    // CONSTRUTORS

    /** ProActive empty constructor */
    public RMMonitoringImpl() {
    }

    /**
     * Creates the RMMonitoring active object.
     * @param rmcore Stub of the RMCore active object.
     */
    public RMMonitoringImpl(RMCoreInterface rmcore) {
        RMListeners = new HashMap<UniqueID, RMEventListener>();
        this.rmcore = rmcore;
        // Register the Resource Manager MBean
        registerMBean();
    }

    /**
     * @see org.objectweb.proactive.InitActive#initActivity(org.objectweb.proactive.Body)
     */
    public void initActivity(Body body) {
        try {
            PAActiveObject.registerByName(PAActiveObject.getStubOnThis(),
                    RMConstants.NAME_ACTIVE_OBJECT_RMMONITORING);
        } catch (ProActiveException e) {
            logger.debug("Cannot register RMMonitoring. Aborting...", e);
            PAActiveObject.terminateActiveObject(true);
        }
    }

    /** Register a new Resource manager listener.
     * Way to a monitor object to ask at RMMonitoring to throw
     * RM events to it.
     * @param listener a listener object which implements {@link RMEventListener}
     * interface.
     * @param events list of wanted events that must be received.
     * @return RMInitialState snapshot of RM's current state : nodes and node sources.
     *  */
    public RMInitialState addRMEventListener(RMEventListener listener, RMEventType... events) {
        UniqueID id = PAActiveObject.getContext().getCurrentRequest().getSourceBodyID();

        this.RMListeners.put(id, listener);
        return rmcore.getRMInitialState();
    }

    /**
     * Removes a listener from RMMonitoring. Only listener itself must call this method
     */
    public void removeRMEventListener() throws RMException {
        UniqueID id = PAActiveObject.getContext().getCurrentRequest().getSourceBodyID();
        if (RMListeners.containsKey(id)) {
            RMListeners.remove(id);
        } else {
            throw new RMException("Listener is unknown");
        }
    }

    /**
     * Register the Resource Manager MBean
     */
    private void registerMBean() {
        //Get the platform MBeanServer
        mbs = ManagementFactory.getPlatformMBeanServer();
        // Unique identification of Scheduler MBean
        rMBean = new RMWrapper();
        ObjectName rMName = null;
        try {
            // Uniquely identify the MBeans and register them with the platform MBeanServer 
            rMName = new ObjectName(RM_BEAN_NAME);
            mbs.registerMBean(rMBean, rMName);
            //            ServerConnector connector = new ServerConnector("ServerMonitoring");
            //            connector.start();
        } catch (Exception e) {
            logger.debug("", e);
        }
    }

    /**
     * @see org.ow2.proactive.resourcemanager.frontend.RMMonitoring#isAlive()
     */
    public boolean isAlive() {
        return true;
    }

    /** inherited from RMEventListener methods
     */
    /**
     * @see org.ow2.proactive.resourcemanager.frontend.RMEventListener#nodeEvent(org.ow2.proactive.resourcemanager.common.event.RMNodeEvent)
     */
    public void nodeEvent(RMNodeEvent event) {
        event.setRMUrl(this.MonitoringUrl);
        rMBean.nodeEvent(event);
        for (RMEventListener listener : RMListeners.values()) {
            listener.nodeEvent(event);
        }
    }

    /**
     * @see org.ow2.proactive.resourcemanager.frontend.RMEventListener#nodeSourceEvent(org.ow2.proactive.resourcemanager.common.event.RMNodeSourceEvent)
     */
    public void nodeSourceEvent(RMNodeSourceEvent event) {
        event.setRMUrl(this.MonitoringUrl);
        for (RMEventListener listener : RMListeners.values()) {
            listener.nodeSourceEvent(event);
        }
    }

    /**
     * @see org.ow2.proactive.resourcemanager.frontend.RMEventListener#rmEvent(org.ow2.proactive.resourcemanager.common.event.RMEvent)
     */
    public void rmEvent(RMEvent event) {
        event.setRMUrl(this.MonitoringUrl);
        rMBean.rmEvent(event);
        for (RMEventListener listener : RMListeners.values()) {
            listener.rmEvent(event);
        }
    }

    /** 
     * Stop and remove monitoring active object
     */
    public void shutdown() {
        //throwing shutdown event
        rmEvent(new RMEvent(RMEventType.SHUTDOWN));
        PAActiveObject.terminateActiveObject(false);
    }

    public Logger getLogger() {
        return logger;
    }
}
