<?xml version="1.0" encoding="UTF-8"?>
<grammar ns="urn:proactive:jobdescriptor:0.9" xmlns:jd="urn:proactive:jobdescriptor:0.9" xmlns:doc="http://relaxng.org/ns/compatibility/annotations/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
  <start>
    <ref name="job"/>
  </start>
  <define name="job">
    <element name="job">
      <doc:documentation>definition of a job for the scheduler </doc:documentation>
      <optional>
        <ref name="jobDescription"/>
      </optional>
      <optional>
        <ref name="variables"/>
      </optional>
      <ref name="jobName"/>
      <optional>
        <ref name="priority"/>
      </optional>
      <optional>
        <ref name="cancelOnException"/>
      </optional>
      <optional>
        <ref name="logFile"/>
      </optional>
      <optional>
        <attribute name="xsi:schemaLocation">
          <data type="anyURI"/>
        </attribute>
      </optional>
      <choice>
        <ref name="taskFlow"/>
        <ref name="proActive"/>
      </choice>
    </element>
  </define>
  <define name="jobName">
    <attribute name="name">
      <doc:documentation>name of this job</doc:documentation>
      <data type="ID"/>
    </attribute>
  </define>
  <define name="variables">
    <element name="variables">
      <doc:documentation>definition of variables which can be reused throughout this descriptor</doc:documentation>
      <oneOrMore>
        <ref name="variable"/>
      </oneOrMore>
    </element>
  </define>
  <define name="variable">
    <element name="variable">
      <doc:documentation>definition of one variable, the variable can be reused (even in another following variable definition) by using the syntax ${name_of_variable}</doc:documentation>
      <ref name="variableName"/>
      <ref name="variableValue"/>
    </element>
  </define>
  <define name="variableName">
    <attribute name="name">
      <doc:documentation>name of a variable </doc:documentation>
      <data type="NCName"/>
    </attribute>
  </define>
  <define name="variableValue">
    <attribute name="value">
      <doc:documentation>the patterns ${name_of_variable} will be replaced by this value</doc:documentation>
      <data type="string"/>
    </attribute>
  </define>
  <define name="priority">
    <attribute name="priority">
      <doc:documentation>priority of the job</doc:documentation>
      <choice>
        <value>highest</value>
        <value>high</value>
        <value>normal</value>
        <value>low</value>
        <value>lowest</value>
      </choice>
    </attribute>
  </define>
  <define name="cancelOnException">
    <attribute name="cancelOnException">
      <doc:documentation>does the job cancel right away if a single task throws an exception (by opposition to a network failure, memory error, etc...) </doc:documentation>
      <data type="boolean"/>
    </attribute>
  </define>
  <define name="logFile">
    <attribute name="logFile">
      <doc:documentation>the path to a file where the logs of this job will be written </doc:documentation>
      <data type="anyURI"/>
    </attribute>
  </define>
  <define name="jobDescription">
    <element name="description">
      <doc:documentation>textual description of this job </doc:documentation>
      <text/>
    </element>
  </define>
  <define name="taskFlow">
    <element name="taskFlow">
      <doc:documentation>a job composed of a flow of tasks with or without dependencies </doc:documentation>
      <oneOrMore>
        <ref name="task"/>
      </oneOrMore>
    </element>
  </define>
  <define name="proActive">
    <element name="proActive">
      <doc:documentation>a job that will launch a proactive application </doc:documentation>
      <ref name="neededNodes"/>
      <ref name="taskProActive"/>
    </element>
  </define>
  <define name="neededNodes">
    <attribute name="neededNodes">
      <doc:documentation>how many ressources (ProActive nodes) does this job need ? </doc:documentation>
      <data type="positiveInteger"/>
    </attribute>
  </define>
  <!-- +++++++++++++ task -->
  <define name="task">
    <element name="task">
      <doc:documentation>a task is the smallest computation unit for the scheduler </doc:documentation>
      <ref name="taskName"/>
      <optional>
        <ref name="retries"/>
      </optional>
      <optional>
      	<ref name="walltime"/>
      </optional>
      <optional>
        <ref name="preciousResult"/>
      </optional>
      <optional>
        <ref name="resultPreviewClass"/>
      </optional>
      <optional>
        <ref name="taskDescription"/>
      </optional>
      <optional>
        <ref name="depends"/>
      </optional>
      <optional>
        <ref name="selection"/>
      </optional>
      <optional>
        <ref name="pre"/>
      </optional>
      <ref name="executable"/>
      <optional>
        <ref name="post"/>
      </optional>
    </element>
  </define>
  <define name="taskProActive">
    <element name="task">
      <doc:documentation>the smallest computation unit for the scheduler </doc:documentation>
      <ref name="taskName"/>
      <optional>
        <ref name="retries"/>
      </optional>
      <optional>
        <ref name="taskDescription"/>
      </optional>
      <optional>
        <ref name="selection"/>
      </optional>
      <optional>
        <ref name="pre"/>
      </optional>
      <ref name="proActiveExecutable"/>
      <optional>
        <ref name="post"/>
      </optional>
    </element>
  </define>
  <define name="taskName">
    <attribute name="name">
      <doc:documentation>name of this task (identifier) </doc:documentation>
      <data type="ID"/>
    </attribute>
  </define>
  <define name="taskDescription">
    <element name="description">
      <doc:documentation>textual description of this task</doc:documentation>
      <text/>
    </element>
  </define>
  <define name="retries">
    <attribute name="retries">
      <doc:documentation>how many times will this task be rescheduled if there is a failure </doc:documentation>
      <data type="nonNegativeInteger"/>
    </attribute>
  </define>
  <define name="walltime">
    <attribute name="walltime">
      <doc:documentation> defines walltime - maximum execution time of the task, format "[[hh]:mm]:ss" </doc:documentation>
      <data type="string"/>
    </attribute>
  </define>  
  <define name="preciousResult">
    <attribute name="preciousResult">
      <doc:documentation>do we keep the result among the job results  </doc:documentation>
      <data type="boolean"/>
    </attribute>
  </define>
  <define name="resultPreviewClass">
    <attribute name="resultPreviewClass">
      <doc:documentation>A class implementing the ResultPreview interface which can be used to display the result of this task</doc:documentation>
      <ref name="classPattern"/>
    </attribute>
  </define>
  <define name="depends">
    <element name="depends">
      <doc:documentation>a list of dependencies for this task </doc:documentation>
      <oneOrMore>
        <ref name="dependsTask"/>
      </oneOrMore>
    </element>
  </define>
  <define name="dependsTask">
    <element name="task">
      <doc:documentation>a task from which this task depends </doc:documentation>
      <attribute name="ref">
        <data type="IDREF"/>
      </attribute>
    </element>
  </define>
  <define name="selection">
    <element name="selection">
      <doc:documentation>a script used to select resources that can handle the task </doc:documentation>
      <ref name="script"/>
    </element>
  </define>
  <define name="pre">
    <element name="pre">
      <doc:documentation>a script launched before the task execution  </doc:documentation>
      <ref name="script"/>
    </element>
  </define>
  <define name="post">
    <element name="post">
      <doc:documentation>a script launched after the task execution </doc:documentation>
      <ref name="script"/>
    </element>
  </define>
  <!-- +++++++++++++ scripts -->
  <define name="script">
    <element name="script">
      <doc:documentation>definition of a standard script </doc:documentation>
      <choice>
        <ref name="codeScript"/>
        <ref name="fileScript"/>
      </choice>
    </element>
  </define>
  <define name="selectionScript">
    <element name="script">
      <doc:documentation>definition of a specific script which is used for resource selection </doc:documentation>
      <optional>
        <ref name="scriptType"/>
      </optional>
      <choice>
        <ref name="codeScript"/>
        <ref name="fileScript"/>
      </choice>
    </element>
  </define>
  <define name="scriptType">
    <attribute name="type">
      <doc:documentation>type of script for the infrastructure manager (default to dynamic)  </doc:documentation>
      <choice>
        <value>dynamic</value>
        <value>static</value>
      </choice>
    </attribute>
  </define>
  <define name="codeScript">
    <element name="code">
      <doc:documentation>definition of a script by writing directly the code inside the descriptor </doc:documentation>
      <attribute name="language">
        <data type="NCName"/>
      </attribute>
      <text/>
    </element>
  </define>
  <define name="fileScript">
    <element name="file">
      <doc:documentation>definition of a script by loading a file </doc:documentation>
      <choice>
        <ref name="path"/>
        <ref name="url"/>
      </choice>
      <optional>
        <ref name="fileScriptArguments"/>
      </optional>
    </element>
  </define>
  <define name="path">
    <attribute name="path">
      <doc:documentation>file path to script definition  </doc:documentation>
      <data type="anyURI"/>
    </attribute>
  </define>
  <define name="url">
    <attribute name="url">
      <doc:documentation>remote script definition, reachable at the given url </doc:documentation>
      <data type="anyURI"/>
    </attribute>
  </define>
  <define name="fileScriptArguments">
    <element name="arguments">
      <doc:documentation>a list of arguments of this script </doc:documentation>
      <oneOrMore>
        <ref name="fileScriptArgument"/>
      </oneOrMore>
    </element>
  </define>
  <define name="fileScriptArgument">
    <element name="argument">
      <doc:documentation>an argument of this script  </doc:documentation>
      <attribute name="value">
        <data type="string"/>
      </attribute>
    </element>
  </define>
  <!-- +++++++++++++ executables -->
  <define name="executable">
    <choice>
      <doc:documentation>the task executable is the actual code that will be run on the selected resource. It can be a native command or a Java class </doc:documentation>
      <ref name="nativeExecutable"/>
      <ref name="javaExecutable"/>
    </choice>
  </define>
  <define name="nativeExecutable">
    <element name="nativeExecutable">
      <doc:documentation>a native command call, it can be statically described or generated by a script </doc:documentation>
      <choice>
        <ref name="staticCommand"/>
        <ref name="dynamicCommand"/>
      </choice>
    </element>
  </define>
  <define name="staticCommand">
    <element name="staticCommand">
      <doc:documentation>a native command statically defined in the descriptor </doc:documentation>
      <attribute name="value">
        <data type="string"/>
      </attribute>
      <optional>
        <ref name="commandArguments"/>
      </optional>
    </element>
  </define>
  <define name="commandArguments">
    <element name="arguments">
      <doc:documentation>list of arguments to the native command (they will be appended at the end of the command) </doc:documentation>
      <oneOrMore>
        <ref name="commandArgument"/>
      </oneOrMore>
    </element>
  </define>
  <define name="commandArgument">
    <element name="argument">
      <attribute name="value">
        <data type="string"/>
      </attribute>
    </element>
  </define>
  <define name="dynamicCommand">
    <element name="dynamicCommand">
      <doc:documentation>a command generated dynamically </doc:documentation>
      <ref name="generation"/>
    </element>
  </define>
  <define name="generation">
    <element name="generation">
      <doc:documentation>a command generated by a script </doc:documentation>
      <ref name="script"/>
    </element>
  </define>
  <define name="javaExecutable">
    <element name="javaExecutable">
      <doc:documentation>a Java class implementing the Executable interface </doc:documentation>
      <ref name="class"/>
	  <optional>
      	<attribute name="fork">
        	<data type="boolean"/>
      	</attribute>
      </optional>
      <optional>
      	<attribute name="javaHome">
      		<doc:documentation> path to directory with Java installed, to this path '/bin/java' will be added, if attribute does not exist only 'java' command will be called </doc:documentation>
        	<data type="string"/>
      	</attribute>
      </optional>
      <optional>
      	<attribute name="javaOptions">
      		<doc:documentation> options passed to Java (not an application) (example: memory settings or properties) </doc:documentation>
        	<data type="string"/>
      	</attribute>
      </optional>
      <optional>
        <ref name="javaParameters"/>
      </optional>
    </element>
  </define>
  <define name="class">
    <attribute name="class">
      <doc:documentation>the fully qualified class name </doc:documentation>
      <ref name="classPattern"/>
    </attribute>
  </define>
  <define name="proActiveExecutable">
    <element name="proActiveExecutable">
      <doc:documentation>a ProActive application (java class) </doc:documentation>
      <ref name="class"/>
      <optional>
        <ref name="javaParameters"/>
      </optional>
    </element>
  </define>
  <define name="javaParameters">
    <element name="parameters">
      <doc:documentation>a list of parameters that will be given to the Java task through the init method </doc:documentation>
      <oneOrMore>
        <ref name="javaParameter"/>
      </oneOrMore>
    </element>
  </define>
  <define name="javaParameter">
    <element name="parameter">
      <doc:documentation>a parameter in the form of key/value pair </doc:documentation>
      <attribute name="name">
        <data type="NCName"/>
      </attribute>
      <attribute name="value">
        <data type="string"/>
      </attribute>
    </element>
  </define>
  <define name="classPattern">
    <data type="string">
      <param name="pattern">([A-Za-z_$][A-Za-z_0-9$]*\.)*[A-Za-z_$][A-Za-z_0-9$]*</param>
    </data>
  </define>
</grammar>
