Installation Instructions
*************************

Basic Installation
==================

These are generic installation instructions.

The 'build ProActiveMPI' or 'build compile' command initiate the 
`configure' shell script which attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, and a
file `config.log' containing compiler output (useful mainly for
debugging `configure').

   It can also use an optional file (typically called `config.cache'
and enabled with `--cache-file=config.cache' or simply `-C') that saves
the results of its tests to speed up reconfiguring.  (Caching is
disabled by default to prevent problems with accidental use of stale
cache files.)

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README' so they can
be considered for the next release.  If you are using the cache, and at
some point `config.cache' contains results you don't want to keep, you
may remove or edit it.

   The file `configure.ac' (or `configure.in') is used to create
`configure' by a program called `autoconf'.  You only need
`configure.ac' if you want to change it or regenerate `configure' using
a newer version of `autoconf'.

The simplest way to compile this package is:

  1. `cd' to the directory 'compile' in ProActive and type
     `./build ProActiveMPI' to compile classes for the wrapping with 
     control feature and to configure the package for your system.  
     If you're using `csh' on an old version of System V, you might
     need to enter the src/org/objectweb/proactive/control/mpi/config
     directory and type`sh ./configure' instead to prevent `csh' from
     trying to execute `configure' itself.

     Running `configure' takes awhile.  While running, it prints some
     messages telling which features it is checking for.

  2. Type `make' to compile the example jacobi included in the distribution
  	 or `make mpicode=myfile' and it will generate a binary `myfile'
  	 in the bin/ directory.  
  
  5. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  

