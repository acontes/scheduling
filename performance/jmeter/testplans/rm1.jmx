<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Resource Manager Test 1" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="rmLogin" elementType="Argument">
            <stringProp name="Argument.name">rmLogin</stringProp>
            <stringProp name="Argument.value">${__P(rmLogin,admin)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rmPassword" elementType="Argument">
            <stringProp name="Argument.name">rmPassword</stringProp>
            <stringProp name="Argument.value">${__P(rmPassword,admin)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rmUrl" elementType="Argument">
            <stringProp name="Argument.name">rmUrl</stringProp>
            <stringProp name="Argument.value">${__P(rmUrl,rmi://localhost:1099/)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="nodeRequestUsers" elementType="Argument">
            <stringProp name="Argument.name">nodeRequestUsers</stringProp>
            <stringProp name="Argument.value">${__P(nodeRequestUsers,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rmListenersNumber" elementType="Argument">
            <stringProp name="Argument.name">rmListenersNumber</stringProp>
            <stringProp name="Argument.value">${__P(rmListenersNumber,0)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="requestedNodesNumber" elementType="Argument">
            <stringProp name="Argument.name">requestedNodesNumber</stringProp>
            <stringProp name="Argument.value">${__P(requestedNodesNumber,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="useSelectionScript" elementType="Argument">
            <stringProp name="Argument.name">useSelectionScript</stringProp>
            <stringProp name="Argument.value">${__P(useSelectionScript,false)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="selectionScriptAlwaysFalse" elementType="Argument">
            <stringProp name="Argument.name">selectionScriptAlwaysFalse</stringProp>
            <stringProp name="Argument.value">${__P(selectionScriptAlwaysFalse,false)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="selectionScriptDynamicContent" elementType="Argument">
            <stringProp name="Argument.name">selectionScriptDynamicContent</stringProp>
            <stringProp name="Argument.value">${__P(selectionScriptDynamicContent,true)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="selectionScriptTypeDynamic" elementType="Argument">
            <stringProp name="Argument.name">selectionScriptTypeDynamic</stringProp>
            <stringProp name="Argument.value">${__P(selectionScriptTypeDynamic,true)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sshNodeSourceUsers" elementType="Argument">
            <stringProp name="Argument.name">sshNodeSourceUsers</stringProp>
            <stringProp name="Argument.value">${__P(sshNodeSourceUsers,0)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rmTestTime" elementType="Argument">
            <stringProp name="Argument.name">rmTestTime</stringProp>
            <stringProp name="Argument.value">${__P(rmTestTime,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="createNodeSourceHosts" elementType="Argument">
            <stringProp name="Argument.name">createNodeSourceHosts</stringProp>
            <stringProp name="Argument.value">${__P(createNodeSourceHosts,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="createNodeSourceNodesPerHost" elementType="Argument">
            <stringProp name="Argument.name">createNodeSourceNodesPerHost</stringProp>
            <stringProp name="Argument.value">${__P(createNodeSourceNodesPerHost,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="createNodeSourceJavaPath" elementType="Argument">
            <stringProp name="Argument.name">createNodeSourceJavaPath</stringProp>
            <stringProp name="Argument.value">${__P(createNodeSourceJavaPath,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="createNodeSourceSchedulingPath" elementType="Argument">
            <stringProp name="Argument.name">createNodeSourceSchedulingPath</stringProp>
            <stringProp name="Argument.value">${__P(createNodeSourceSchedulingPath,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cliNodeSourceUsers" elementType="Argument">
            <stringProp name="Argument.name">cliNodeSourceUsers</stringProp>
            <stringProp name="Argument.value">${__P(cliNodeSourceUsers,0)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cliNodeDeploymentScript" elementType="Argument">
            <stringProp name="Argument.name">cliNodeDeploymentScript</stringProp>
            <stringProp name="Argument.value">${__P(cliNodeDeploymentScript,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cliNodeRemovalScript" elementType="Argument">
            <stringProp name="Argument.name">cliNodeRemovalScript</stringProp>
            <stringProp name="Argument.value">${__P(cliNodeRemovalScript,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cliUseDefaultScripts" elementType="Argument">
            <stringProp name="Argument.name">cliUseDefaultScripts</stringProp>
            <stringProp name="Argument.value">${__P(cliUseDefaultScripts,true)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="nodeRequestTopology" elementType="Argument">
            <stringProp name="Argument.name">nodeRequestTopology</stringProp>
            <stringProp name="Argument.value">${__P(nodeRequestTopology,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="nodeJavaOptions" elementType="Argument">
            <stringProp name="Argument.name">nodeJavaOptions</stringProp>
            <stringProp name="Argument.value">${__P(nodeJavaOptions,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1326736302000</longProp>
        <longProp name="ThreadGroup.end_time">1326736302000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Register listeners" enabled="true">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="rmUrl" elementType="Argument">
                <stringProp name="Argument.name">rmUrl</stringProp>
                <stringProp name="Argument.value">${rmUrl}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="rmLogin" elementType="Argument">
                <stringProp name="Argument.name">rmLogin</stringProp>
                <stringProp name="Argument.value">${rmLogin}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="rmPassword" elementType="Argument">
                <stringProp name="Argument.name">rmPassword</stringProp>
                <stringProp name="Argument.value">${rmPassword}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="rmListenersNumber" elementType="Argument">
                <stringProp name="Argument.name">rmListenersNumber</stringProp>
                <stringProp name="Argument.value">${rmListenersNumber}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">org.ow2.proactive.tests.performance.jmeter.rm.RMScenarioSetupClient</stringProp>
        </JavaSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Node Request threads" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${nodeRequestUsers}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1326895728000</longProp>
        <longProp name="ThreadGroup.end_time">1326895766000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${rmTestTime}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Request Nodes" enabled="true">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="rmUrl" elementType="Argument">
                <stringProp name="Argument.name">rmUrl</stringProp>
                <stringProp name="Argument.value">${rmUrl}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="rmLogin" elementType="Argument">
                <stringProp name="Argument.name">rmLogin</stringProp>
                <stringProp name="Argument.value">${rmLogin}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="rmPassword" elementType="Argument">
                <stringProp name="Argument.name">rmPassword</stringProp>
                <stringProp name="Argument.value">${rmPassword}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="requestedNodesNumber" elementType="Argument">
                <stringProp name="Argument.name">requestedNodesNumber</stringProp>
                <stringProp name="Argument.value">${requestedNodesNumber}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="useSelectionScript" elementType="Argument">
                <stringProp name="Argument.name">useSelectionScript</stringProp>
                <stringProp name="Argument.value">${useSelectionScript}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="selectionScriptAlwaysFalse" elementType="Argument">
                <stringProp name="Argument.name">selectionScriptAlwaysFalse</stringProp>
                <stringProp name="Argument.value">${selectionScriptAlwaysFalse}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="selectionScriptDynamicContent" elementType="Argument">
                <stringProp name="Argument.name">selectionScriptDynamicContent</stringProp>
                <stringProp name="Argument.value">${selectionScriptDynamicContent}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="selectionScriptTypeDynamic" elementType="Argument">
                <stringProp name="Argument.name">selectionScriptTypeDynamic</stringProp>
                <stringProp name="Argument.value">${selectionScriptTypeDynamic}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="nodeRequestTopology" elementType="Argument">
                <stringProp name="Argument.name">nodeRequestTopology</stringProp>
                <stringProp name="Argument.value">${nodeRequestTopology}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">org.ow2.proactive.tests.performance.jmeter.rm.NodesRequestRMClient</stringProp>
        </JavaSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Create node source threads (CLI Infrastructure )" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${cliNodeSourceUsers}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1326967157000</longProp>
        <longProp name="ThreadGroup.end_time">1326967157000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${rmTestTime}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Create Node Source (CLI Infrastructure)" enabled="true">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="rmUrl" elementType="Argument">
                <stringProp name="Argument.name">rmUrl</stringProp>
                <stringProp name="Argument.value">${rmUrl}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="rmLogin" elementType="Argument">
                <stringProp name="Argument.name">rmLogin</stringProp>
                <stringProp name="Argument.value">${rmLogin}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="rmPassword" elementType="Argument">
                <stringProp name="Argument.name">rmPassword</stringProp>
                <stringProp name="Argument.value">${rmPassword}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="createNodeSourceHosts" elementType="Argument">
                <stringProp name="Argument.name">createNodeSourceHosts</stringProp>
                <stringProp name="Argument.value">${createNodeSourceHosts}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="createNodeSourceNodesPerHost" elementType="Argument">
                <stringProp name="Argument.name">createNodeSourceNodesPerHost</stringProp>
                <stringProp name="Argument.value">${createNodeSourceNodesPerHost}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="createNodeSourceJavaPath" elementType="Argument">
                <stringProp name="Argument.name">createNodeSourceJavaPath</stringProp>
                <stringProp name="Argument.value">${createNodeSourceJavaPath}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="createNodeSourceSchedulingPath" elementType="Argument">
                <stringProp name="Argument.name">createNodeSourceSchedulingPath</stringProp>
                <stringProp name="Argument.value">${createNodeSourceSchedulingPath}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="nodeJavaOptions" elementType="Argument">
                <stringProp name="Argument.name">nodeJavaOptions</stringProp>
                <stringProp name="Argument.value">${nodeJavaOptions}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="nodeProActiveConfig" elementType="Argument">
                <stringProp name="Argument.name">nodeProActiveConfig</stringProp>
                <stringProp name="Argument.value">${nodeProActiveConfig}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cliNodeDeploymentScript" elementType="Argument">
                <stringProp name="Argument.name">cliNodeDeploymentScript</stringProp>
                <stringProp name="Argument.value">${cliNodeDeploymentScript}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cliNodeRemovalScript" elementType="Argument">
                <stringProp name="Argument.name">cliNodeRemovalScript</stringProp>
                <stringProp name="Argument.value">${cliNodeRemovalScript}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cliUseDefaultScripts" elementType="Argument">
                <stringProp name="Argument.name">cliUseDefaultScripts</stringProp>
                <stringProp name="Argument.value">${cliUseDefaultScripts}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">org.ow2.proactive.tests.performance.jmeter.rm.CLIInfrastructureNodeSourceCreateClient</stringProp>
        </JavaSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Create node source threads (SSH Infrastructure )" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${sshNodeSourceUsers}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1326968131000</longProp>
        <longProp name="ThreadGroup.end_time">1326968131000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${rmTestTime}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Create Node Source (SSH Infrastructure)" enabled="true">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="rmUrl" elementType="Argument">
                <stringProp name="Argument.name">rmUrl</stringProp>
                <stringProp name="Argument.value">${rmUrl}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="rmLogin" elementType="Argument">
                <stringProp name="Argument.name">rmLogin</stringProp>
                <stringProp name="Argument.value">${rmLogin}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="rmPassword" elementType="Argument">
                <stringProp name="Argument.name">rmPassword</stringProp>
                <stringProp name="Argument.value">${rmPassword}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="createNodeSourceHosts" elementType="Argument">
                <stringProp name="Argument.name">createNodeSourceHosts</stringProp>
                <stringProp name="Argument.value">${createNodeSourceHosts}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="createNodeSourceNodesPerHost" elementType="Argument">
                <stringProp name="Argument.name">createNodeSourceNodesPerHost</stringProp>
                <stringProp name="Argument.value">${createNodeSourceNodesPerHost}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="createNodeSourceJavaPath" elementType="Argument">
                <stringProp name="Argument.name">createNodeSourceJavaPath</stringProp>
                <stringProp name="Argument.value">${createNodeSourceJavaPath}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="createNodeSourceSchedulingPath" elementType="Argument">
                <stringProp name="Argument.name">createNodeSourceSchedulingPath</stringProp>
                <stringProp name="Argument.value">${createNodeSourceSchedulingPath}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="nodeJavaOptions" elementType="Argument">
                <stringProp name="Argument.name">nodeJavaOptions</stringProp>
                <stringProp name="Argument.value">${nodeJavaOptions}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="nodeProActiveConfig" elementType="Argument">
                <stringProp name="Argument.name">nodeProActiveConfig</stringProp>
                <stringProp name="Argument.value">${nodeProActiveConfig}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">org.ow2.proactive.tests.performance.jmeter.rm.SSHInfrastructureNodeSourceCreateClient</stringProp>
        </JavaSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
