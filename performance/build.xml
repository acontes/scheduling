<?xml version="1.0" encoding="UTF-8"?>
<project name="Scheduler and RM perofrmance">

    <property file="${basedir}/common.test.properties" />
    <property file="${basedir}/rm.test.properties" />
    <property file="${basedir}/scheduler.test.properties" />

    <dirname property="project.root.path.dirname" file="${basedir}/.." />
    <basename property="project.root.path.basename" file="${basedir}/.." />
    <property name="project.root" value="${project.root.path.dirname}/${project.root.path.basename}" />

    <property name="classes.dir" value="${project.root}/classes/performance" />

    <!-- setup jmeter ant task -->
    <property name="ant_jmeter_regexp" value="extras/ant-jmeter-*.jar" />
    <path id="ant-jmeter-path">
        <fileset dir="${jmeterhome}">
            <include name="${ant_jmeter_regexp}" />
        </fileset>
    </path>
    <property name="antJMeterJar" refid="ant-jmeter-path" />
    <available type="file" file="${antJMeterJar}" property="antJMeterJar.exists" />
    <fail message="Could not find ant-jmeter jar using regexp '${jmeterhome}/${ant_jmeter_regexp}'" unless="antJMeterJar.exists" />
    <taskdef name="jmeter" classname="org.programmerplanet.ant.taskdefs.jmeter.JMeterTask" classpath="${antJMeterJar}" />

    <path id="compile.classpath">
        <fileset dir="${project.root}/dist/lib">
            <include name="*.jar" />
        </fileset>
        <fileset dir="${basedir}/lib">
            <include name="*.jar" />
        </fileset>
    </path>

    <!-- setup stub generator task -->
    <path id="stub.generation.classpath">
        <path refid="compile.classpath" />
        <fileset dir="${project.root}/compile/lib">
            <include name="*.jar" />
        </fileset>
        <path location="${classes.dir}" />
    </path>

    <target name="clean">
        <delete dir="${classes.dir}" />
        <delete dir="${tmp}/RM_DB" />
        <delete dir="${tmp}/SCHEDULER_DB" />
        <delete dir="${project.root}/.logs" />
    </target>

    <target name="compile.tests" unless="compile.tests.disable">
        <taskdef name="stubGenerator" classname="ant.AntStubGenerator" classpathref="compile.classpath" />
        <typedef name="class" classname="ant.AntStubGeneratorClass" classpathref="compile.classpath" />
        
        <mkdir dir="${classes.dir}" />
        <javac srcdir="${basedir}/src" destdir="${classes.dir}" debug="true" includeAntRuntime="false">
            <classpath refid="compile.classpath" />
        </javac>
        <stubGenerator dstDir="${classes.dir}" srcDir="${basedir}/src" refclasspath="stub.generation.classpath">
            <class name="org.ow2.proactive.tests.performance.rm.RMTestListener" />
            <class name="org.ow2.proactive.tests.performance.scheduler.SchedulerTestListener" />
        </stubGenerator>
        <copy file="${basedir}/src/org/ow2/proactive/tests/performance/jmeter/rm/defaultSSHDeployment" todir="${classes.dir}/org/ow2/proactive/tests/performance/jmeter/rm" />
    </target>

    <target name="copy.libs.to.jmeter">
        <copy todir="${jmeterhome}/lib">
            <fileset dir="${project.root}/dist/lib" includes="*.jar" />
        </copy>
    </target>

    <path id="xslt.classpath">
        <fileset dir="${jmeterhome}/lib" includes="xalan*.jar" />
        <fileset dir="${jmeterhome}/lib" includes="serializer*.jar" />
    </path>

    <property name="allTestHosts" value="${scheduler.deploy.schedulerHost},${rm.deploy.rmHost},${rm.deploy.rmNodesHosts},${createNodeSourceHosts},${test.deploy.pamr.startNewRouter.host}" />

    <target name="kill-test-processes" depends="compile.tests" description="Kill test processes">
        <java classname="org.ow2.proactive.tests.performance.deployment.KillTestProcesses" fork="true" failonerror="false" maxmemory="512m">
            <classpath>
                <pathelement location="${classes.dir}" />
                <path refid="compile.classpath" />
            </classpath>
            <jvmarg value="-DtestHosts=${allTestHosts}" />
        </java>
    </target>

    <macrodef name="test-deployer-macro">
        <attribute name="startPamrIfNeeded" />
        <attribute name="startRM" />
        <attribute name="startScheduler" />
        <sequential>
            <java classname="org.ow2.proactive.tests.performance.deployment.SchedulerAndRMTestDeployer" fork="true" failonerror="true" maxmemory="512m">
                <classpath>
                    <pathelement location="${classes.dir}" />
                    <path refid="compile.classpath" />
                </classpath>
                <arg value="@{startPamrIfNeeded}" />
                <arg value="@{startRM}" />
                <arg value="@{startScheduler}" />
                <arg value="${basedir}/tmp/test.deploy.result.properties" />

                <!-- hosts where test processes are killed in case if deployment fails -->
                <jvmarg value="-DtestHosts=${allTestHosts}" />

                <jvmarg value="-Dtest.deploy.env.pamr=${test.deploy.env.pamr}" />
                <jvmarg value="-Dtest.deploy.env.rm=${test.deploy.env.rm}" />
                <jvmarg value="-Dtest.deploy.env.rmNodes=${test.deploy.env.rmNodes}" />
                <jvmarg value="-Dtest.deploy.env.scheduler=${test.deploy.env.scheduler}" />

                <jvmarg value="-Dtest.deploy.env.local.javaPath=${test.deploy.env.local.javaPath}" />
                <jvmarg value="-Dtest.deploy.env.local.schedulingPath=${test.deploy.env.local.schedulingPath}" />
                
                <jvmarg value="-Dtest.deploy.protocol=${test.deploy.protocol}" />

                <!-- needed if tests should use already running PAMR router -->
                <jvmarg value="-Dtest.deploy.pamr.existingRouterHost=${test.deploy.pamr.existingRouterHost}" />
                <jvmarg value="-Dtest.deploy.pamr.existingRouterPort=${test.deploy.pamr.existingRouterPort}" />

                <!-- properties used to start PAMR router -->
                <jvmarg value="-Dtest.deploy.pamr.startNewRouter.host=${test.deploy.pamr.startNewRouter.host}" />
                <jvmarg value="-Dtest.deploy.pamr.startNewRouter.port=${test.deploy.pamr.startNewRouter.port}" />
                <jvmarg value="-Dtest.deploy.pamr.startNewRouter.reservedIds=0:resource_manager,1:scheduler" />
                <jvmarg value="-Dtest.deploy.pamr.startNewRouter.args=${test.deploy.pamr.startNewRouter.args}" />
                <jvmarg value="-Drm.deploy.pamr.serverReservedId=0:resource_manager" />
                <jvmarg value="-Dscheduler.deploy.pamr.serverReservedId=1:scheduler" />

                <jvmarg value="-Drm.deploy.rmHost=${rm.deploy.rmHost}" />
                <jvmarg value="-Drm.deploy.dropDB=${rm.deploy.dropDB}" />
                <jvmarg value="-Drm.deploy.javaOpts=${rm.deploy.javaOpts}" />
                <jvmarg value="-Drm.deploy.rmNodesHosts=${rm.deploy.rmNodesHosts}" />
                <jvmarg value="-Drm.deploy.rmNodesPerHosts=${rm.deploy.rmNodesPerHosts}" />
                <jvmarg value="-Drm.deploy.testNodes=${createNodeSourceHosts}" />

                <jvmarg value="-Dscheduler.deploy.schedulerHost=${scheduler.deploy.schedulerHost}" />
                <jvmarg value="-Dscheduler.deploy.dropDB=${scheduler.deploy.dropDB}" />
                <jvmarg value="-Dscheduler.deploy.rmUrl=${scheduler.deploy.rmUrl}" />
                <jvmarg value="-Dscheduler.deploy.javaOpts=${scheduler.deploy.javaOpts}" />

                <jvmarg value="-Djava.security.policy=${basedir}/config/grant.all.java.policy" />
            </java>
            <property file="${basedir}/tmp/test.deploy.result.properties" />
        </sequential>
    </macrodef>

    <target name="deploy-rm" depends="compile.tests" description="Deploy RM">
        <test-deployer-macro startpamrifneeded="true" startrm="true" startscheduler="false" />
    </target>

    <target name="deploy-scheduler" depends="compile.tests" description="Deploy Scheduler (RM should be already started)">
        <test-deployer-macro startpamrifneeded="false" startrm="false" startscheduler="true" />
    </target>

    <target name="deploy-rm-and-scheduler" depends="compile.tests" description="Deploy RM and Scheduler">
        <test-deployer-macro startpamrifneeded="true" startrm="true" startscheduler="true" />
    </target>

    <target name="deploy-rm-and-execute-test" depends="copy.libs.to.jmeter, deploy-rm" description="Deploy RM, execute JMeter RM test and kill all test processes">
        <run-rm-jmeter-test testplan="rm1" targetRmUrl="${rm.deploy.result.serverUrl}" clientjavaoptions="${rm.deploy.result.clientJavaOptions}" clientproactiveconfig="${basedir}/tmp/RMClientProActiveConfiguration.xml"/>
        <antcall target="kill-test-processes" />
        <fail if="rm-rm1-failed" message="JMeter test failed" />
    </target>

    <target name="deploy-rm-and-scheduler-and-execute-test" depends="copy.libs.to.jmeter, deploy-rm-and-scheduler" description="Deploy RM, Scheduler, execute JMeter Scheduler test and kill all test processes">
        <run-scheduler-jmeter-test testplan="${schedulerScenario}" targetschedulerurl="${scheduler.deploy.result.serverUrl}" clientproactiveconfig="${basedir}/tmp/SchedulerClientProActiveConfiguration.xml" />
        <antcall target="kill-test-processes" />
        <fail if="scheduler-${schedulerScenario}-failed" message="JMeter test failed" />
    </target>

    <macrodef name="run-rm-jmeter-test">
        <attribute name="testplan" />
        <attribute name="targetRmUrl" />
        <attribute name="clientJavaOptions" />
        <attribute name="clientProActiveConfig" />
        <sequential>
            <delete file="${basedir}/results/@{testplan}.jtl" />
            <delete file="${basedir}/results/@{testplan}.html" />

            <jmeter failureProperty="rm-@{testplan}-failed" jmeterhome="${jmeterhome}" testplan="${basedir}/jmeter/testplans/@{testplan}.jmx" resultlog="${basedir}/results/@{testplan}.jtl">
                <jvmarg value="-Djava.security.policy=${basedir}/config/grant.all.java.policy" />
                <jvmarg value="-Dproactive.configuration=@{clientProActiveConfig}" />

                <property name="search_paths" value="${classes.dir}" />

                <property name="jmeter.save.saveservice.output_format" value="xml" />

                <property name="rmUrl" value="@{targetRmUrl}" />
                <property name="testTime" value="${testTime}" />
                <property name="stopOnError" value="${stopOnError}" />
                <property name="rmLogin" value="nsadmin" />
                <property name="rmPassword" value="pwd" />

                <jvmarg value="-Dtest.deploy.env.local.javaPath=${test.deploy.env.local.javaPath}" />
                <jvmarg value="-Dtest.deploy.env.local.schedulingPath=${test.deploy.env.local.schedulingPath}" />

                <property name="rmListenersNumber" value="${rmListenersNumber}" />

                <property name="nodeJavaOptions" value="${nodeJavaOptions} @{clientJavaOptions}" />
                <property name="nodeRequestUsers" value="${nodeRequestUsers}" />
                <property name="requestedNodesNumber" value="${requestedNodesNumber}" />
                <property name="useSelectionScript" value="${useSelectionScript}" />
                <property name="nodeRequestTopology" value="${nodeRequestTopology}" />
                <property name="selectionScriptDynamicContent" value="${selectionScriptDynamicContent}" />

                <property name="createNodeSourceHosts" value="${createNodeSourceHosts}" />
                <property name="createNodeSourceUseAllHosts" value="${createNodeSourceUseAllHosts}" />
                <property name="createNodeSourceNodesPerHost" value="${createNodeSourceNodesPerHost}" />
                
                <property name="createNodeSourceEnv" value="${test.deploy.env.rmNodes}" />

                <property name="cliNodeSourceUsers" value="${cliNodeSourceUsers}" />
                <property name="cliUseDefaultScripts" value="${cliUseDefaultScripts}" />
                <property name="cliNodeDeploymentScript" value="${cliNodeDeploymentScript}" />
                <property name="cliNodeRemovalScript" value="${cliNodeRemovalScript}" />

                <property name="sshNodeSourceUsers" value="${sshNodeSourceUsers}" />

                <jmeterarg value="-j" />
                <jmeterarg value="${basedir}/results/jmeter.log" />
                
            </jmeter>

            <xslt classpathref="xslt.classpath" in="${basedir}/results/@{testplan}.jtl" out="${basedir}/results/@{testplan}.html" style="${basedir}/jmeter/config/jmeter-results-report_21.xsl" />
            <xslt classpathref="xslt.classpath" in="${basedir}/results/@{testplan}.jtl" out="${basedir}/results/@{testplan}_detail.html" style="${basedir}/jmeter/config/jmeter-results-detail-report_21.xsl" />
        </sequential>

    </macrodef>

    <macrodef name="run-scheduler-jmeter-test">
        <attribute name="testplan" />
        <attribute name="targetSchedulerUrl" />
        <attribute name="clientProactiveConfig" />
        <sequential>
            <delete file="${basedir}/results/@{testplan}.jtl" />
            <delete file="${basedir}/results/@{testplan}.html" />
            <chmod file="${basedir}/src/org/ow2/proactive/tests/performance/jmeter/scheduler/nativeTask.sh" perm="ugo+rx" />
            <chmod file="${basedir}/src/org/ow2/proactive/tests/performance/jmeter/scheduler/sleep_forever_nativeTask.sh" perm="ugo+rx" />
            <chmod file="${basedir}/src/org/ow2/proactive/tests/performance/jmeter/scheduler/failing_nativeTask.sh" perm="ugo+rx" />

            <jmeter failureProperty="scheduler-@{testplan}-failed" jmeterhome="${jmeterhome}" testplan="${basedir}/jmeter/testplans/@{testplan}.jmx" resultlog="${basedir}/results/@{testplan}.jtl">
                <jvmarg value="-Djava.security.policy=${basedir}/config/grant.all.java.policy" />
                <jvmarg value="-Dproactive.configuration=@{clientProactiveConfig}" />

                <property name="search_paths" value="${classes.dir}" />
                <property name="jmeter.save.saveservice.output_format" value="xml" />

                <property name="schedulerUrl" value="@{targetSchedulerUrl}" />
                <property name="schedulingPath" value="${test.deploy.env.local.schedulingPath}" />
                <property name="testTime" value="${testTime}" />
                <property name="stopOnError" value="${stopOnError}" />

                <property name="schedulerListenersNumber" value="${schedulerListenersNumber}" />

                <property name="submitUseSelectionScript" value="${submitUseSelectionScript}" />
                <property name="submitSelectionScriptDynamicContent" value="${submitSelectionScriptDynamicContent}" />
                <property name="submitSelectionScriptTypeDynamic" value="${submitSelectionScriptTypeDynamic}" />

                <property name="simpleJavaTaskUsersNumber" value="${simpleJavaTaskUsersNumber}" />
                <property name="simpleNativeTaskUsersNumber" value="${simpleNativeTaskUsersNumber}" />

                <property name="multiNodeSubmitUsersNumber" value="${multiNodeSubmitUsersNumber}" />
                <property name="multiNodeSubmitTaskType" value="${multiNodeSubmitTaskType}" />
                <property name="multiNodeSubmitNodesNumber" value="${multiNodeSubmitNodesNumber}" />
                <property name="multiNodeSubmitTopology" value="${multiNodeSubmitTopology}" />

                <property name="submitDependentTasksUsersNumber" value="${submitDependentTasksUsersNumber}" />
                <property name="dependentTasksSubmitTaskType" value="${dependentTasksSubmitTaskType}" />
                <property name="dependentTasksSubmitTasksNumber" value="${dependentTasksSubmitTasksNumber}" />

                <property name="replicateTasksUsersNumber" value="${replicateTasksUsersNumber}" />
                <property name="replicateTasksSubmitChildrenNumber" value="${replicateTasksSubmitChildrenNumber}" />
                <property name="replicateTasksSubmitTaskType" value="${replicateTasksSubmitTaskType}" />

                <property name="loopTasksUsersNumber" value="${loopTasksUsersNumber}" />
                <property name="loopTasksSubmitIterationsNumber" value="${loopTasksSubmitIterationsNumber}" />
                <property name="loopTasksSubmitTaskType" value="${loopTasksSubmitTaskType}" />

                <property name="sampleJobUsersNumber" value="${sampleJobUsersNumber}" />

                <property name="failingTasksUsersNumber" value="${failingTasksUsersNumber}" />
                <property name="failingTaskSubmitTaskType" value="${failingTaskSubmitTaskType}" />
                <property name="failingTaskSubmitRestartMode" value="${failingTaskSubmitRestartMode}" />

                <property name="submitAndKillUsersNumber" value="${submitAndKillUsersNumber}" />
                <property name="submitAndKillTasksUsersNumber" value="${submitAndKillTasksUsersNumber}" />
                
                <property name="schedulerConnectUsersNumber" value="${schedulerConnectUsersNumber}" />
                
                <property name="hugeJobTasksNumber" value="${hugeJobTasksNumber}" />
                <property name="hugeJobCompleteTimeout" value="${hugeJobCompleteTimeout}" />
                
                <jmeterarg value="-j" />
                <jmeterarg value="${basedir}/results/jmeter.log" />

            </jmeter>

            <xslt classpathref="xslt.classpath" in="${basedir}/results/@{testplan}.jtl" out="${basedir}/results/@{testplan}.html" style="${basedir}/jmeter/config/jmeter-results-report_21.xsl" />
            <xslt classpathref="xslt.classpath" in="${basedir}/results/@{testplan}.jtl" out="${basedir}/results/@{testplan}_detail.html" style="${basedir}/jmeter/config/jmeter-results-detail-report_21.xsl" />
        </sequential>

    </macrodef>

    <target name="run-scheduler-test" depends="compile.tests, copy.libs.to.jmeter" description="Run JMeter Scheduler test (Scheduler should be already deployed)">
        <run-scheduler-jmeter-test testplan="scheduler1" targetSchedulerUrl="${targetSchedulerUrl}" clientproactiveconfig="${basedir}/config/DefaultClientProActiveConfiguration.xml" />
        <fail if="scheduler-scheduler1-failed" message="JMeter test failed" />
    </target>

    <target name="run-rm-test" depends="compile.tests, copy.libs.to.jmeter" description="Run JMeter RM (RM should be already deployed)">
        <run-rm-jmeter-test testplan="rm1" targetRmUrl="${rmUrl}" clientproactiveconfig="${basedir}/config/DefaultClientProActiveConfiguration.xml" clientjavaoptions="-Dpa.rm.home=${project.root} -Dproactive.configuration=${basedir}/config/DefaultClientProActiveConfiguration.xml -Dorg.ow2.proactive.tests.performance=true" />
        <fail if="rm-rm1-failed" message="JMeter test failed" />
    </target>

    <macrodef name="rsync">
        <attribute name="src" />
        <attribute name="host" />
        <attribute name="dest" />
        <element name="rsync-args" optional="yes"/>
        <sequential>
            <echo message="rsync @{src} @{host}:@{dest}" />
            <exec executable="rsync" failonerror="true">
                <arg value="--verbose" />
                <arg value="--progress" />
                <arg value="--stats" />
                <arg value="--recursive" />
                <arg value="--times" />
                <arg value="--perms" />
                <arg value="--group" />
                <arg value="--links" />
                <arg value="--delete" />
                <arg value="--exclude" />
                <arg value=".svn" />
                <rsync-args/>
                <arg value="@{src}" />
                <arg value="@{host}:@{dest}" />
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="rsyncSchedulingMacro">
        <attribute name="host" />
        <attribute name="dest" />
        <sequential>
            <rsync src="${project.root}/dist/" host="@{host}" dest="@{dest}/dist" />
            <rsync src="${project.root}/addons/" host="@{host}" dest="@{dest}/addons" />
            <rsync src="${project.root}/config/" host="@{host}" dest="@{dest}/config" />
            <rsync src="${project.root}/samples/" host="@{host}" dest="@{dest}/samples" />
            <rsync src="${project.root}/classes/performance" host="@{host}" dest="@{dest}/classes/" />
            <rsync src="${project.root}/performance/" host="@{host}" dest="@{dest}/performance">
                <rsync-args>
                    <arg value="--exclude" />
                    <arg value="tmp" />
                    <arg value="--exclude" />
                    <arg value="results" />
                </rsync-args>
            </rsync>
        </sequential>
    </macrodef>

    <target name="test-with-get-nodes-from-scheduler-remote" depends="compile.tests">
        <rsyncSchedulingMacro host="${get.hosts.from.scheduler.copySchedulingHost}" dest="${get.hosts.from.scheduler.copySchedulingPath}"/>
        <antcall target="test-with-get-nodes-from-scheduler"/>
        <mkdir dir="${project.root}/performance/results/remoteResults"/>
        <exec executable="scp" failonerror="true">
            <arg value="${get.hosts.from.scheduler.copySchedulingHost}:${get.hosts.from.scheduler.copySchedulingPath}/performance/results/*" />
            <arg value="${project.root}/performance/results/remoteResults" />
        </exec>
        <exec executable="scp" failonerror="true">
            <arg value="${get.hosts.from.scheduler.copySchedulingHost}:${get.hosts.from.scheduler.copySchedulingPath}/.logs/*" />
            <arg value="${project.root}/performance/results/remoteResults" />
        </exec>
    </target>

    <target name="test-with-get-nodes-from-scheduler" depends="compile.tests" description="Run tests using hosts provided by the existing Scheduler">
        <path id="run.with.scheduler.classpath">
            <fileset dir="${get.hosts.from.scheduler.clientSchedulingPath}/dist/lib">
                <include name="*.jar" />
            </fileset>
            <pathelement location="${classes.dir}" />
        </path>

        <java classname="org.ow2.proactive.tests.performance.deployment.gethostsfromscheduler.GetHostsFromSchedulerTestExecutor" fork="true" failonerror="false" maxmemory="512m">
            <classpath>
                <path refid="run.with.scheduler.classpath" />
            </classpath>
            <jvmarg value="-Djava.security.policy=${basedir}/config/grant.all.java.policy" />
            <jvmarg value="-Dproactive.configuration=${get.hosts.from.scheduler.clientProActiveConfig}" />

            <jvmarg value="-Dget.hosts.from.scheduler.targetToRun=${get.hosts.from.scheduler.targetToRun}" />
    
            <jvmarg value="-Dtest.deploy.env.local.javaPath=${test.deploy.env.local.javaPath}" />
            <jvmarg value="-Dtest.deploy.env.local.schedulingPath=${test.deploy.env.local.schedulingPath}" />
            <jvmarg value="-Dtest.deploy.env.rmNodes=${test.deploy.env.rmNodes}" />
            
            <jvmarg value="-Dget.hosts.from.scheduler.copySchedulingPath=${get.hosts.from.scheduler.copySchedulingPath}" />
            <jvmarg value="-Dget.hosts.from.scheduler.schedulerUrl=${get.hosts.from.scheduler.schedulerUrl}" />
            <jvmarg value="-Dget.hosts.from.scheduler.schedulerLogin=${get.hosts.from.scheduler.schedulerLogin}" />
            <jvmarg value="-Dget.hosts.from.scheduler.schedulerPassword=${get.hosts.from.scheduler.schedulerPassword}" />
            <jvmarg value="-Dget.hosts.from.scheduler.rmHostsNumber=${get.hosts.from.scheduler.rmHostsNumber}" />
            <jvmarg value="-Dget.hosts.from.scheduler.jmeterhome=${get.hosts.from.scheduler.jmeterhome}" />
            <jvmarg value="-Dget.hosts.from.scheduler.rmAdditionalHostsNumber=${get.hosts.from.scheduler.rmAdditionalHostsNumber}" />
        </java>
    </target>

</project>
