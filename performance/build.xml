<?xml version="1.0" encoding="UTF-8"?>
<project name="Scheduler and RM perofrmance">

    <property file="${basedir}/rm.test.properties" />

    <dirname property="project.root.path.dirname" file="${basedir}/.." />
    <basename property="project.root.path.basename" file="${basedir}/.." />
    <property name="project.root" value="${project.root.path.dirname}/${project.root.path.basename}" />

    <property name="classes.dir" value="${project.root}/classes/performance" />

    <!-- setup jmeter ant task -->
    <property name="ant_jmeter_regexp" value="extras/ant-jmeter-*.jar" />
    <path id="ant-jmeter-path">
        <fileset dir="${jmeterhome}">
            <include name="${ant_jmeter_regexp}" />
        </fileset>
    </path>
    <property name="antJMeterJar" refid="ant-jmeter-path" />
    <available type="file" file="${antJMeterJar}" property="antJMeterJar.exists" />
    <fail message="Could not find ant-jmeter jar using regexp '${jmeterhome}/${ant_jmeter_regexp}'" unless="antJMeterJar.exists" />
    <taskdef name="jmeter" classname="org.programmerplanet.ant.taskdefs.jmeter.JMeterTask" classpath="${antJMeterJar}" />

    <path id="compile.classpath">
        <fileset dir="${project.root}/dist/lib">
            <include name="*.jar" />
        </fileset>
        <fileset dir="${basedir}/lib">
            <include name="*.jar" />
        </fileset>
        <fileset dir="${project.root}/compile/lib">
            <include name="*.jar" />
        </fileset>
    </path>

    <!-- setup stub generator task -->
    <path id="stub.generation.classpath">
        <path refid="compile.classpath" />
        <fileset dir="${project.root}/compile/lib">
            <include name="*.jar" />
        </fileset>
        <path location="${classes.dir}" />
    </path>
    <taskdef name="stubGenerator" classname="ant.AntStubGenerator" classpathref="compile.classpath" />
    <typedef name="class" classname="ant.AntStubGeneratorClass" classpathref="compile.classpath" />

    <target name="clean">
        <delete dir="${classes.dir}" />
    </target>
        
    <target name="compile.tests">
        <mkdir dir="${classes.dir}" />
        <javac srcdir="${basedir}/src" destdir="${classes.dir}" includeAntRuntime="false">
            <classpath refid="compile.classpath" />
        </javac>
        <stubGenerator dstDir="${classes.dir}" srcDir="${basedir}/src" refclasspath="stub.generation.classpath">
            <class name="org.ow2.proactive.tests.performance.rm.RMTestListener" />
        </stubGenerator>
        <copy file="${basedir}/src/org/ow2/proactive/tests/performance/jmeter/rm/defaultSSHDeployment" todir="${classes.dir}/org/ow2/proactive/tests/performance/jmeter/rm" />
    </target>

    <target name="copy.libs.to.jmeter">
        <copy todir="${jmeterhome}/lib">
            <fileset dir="${project.root}/dist/lib" includes="*.jar" />
        </copy>
    </target>

    <path id="xslt.classpath">
        <fileset dir="${jmeterhome}/lib" includes="xalan*.jar" />
        <fileset dir="${jmeterhome}/lib" includes="serializer*.jar" />
    </path>

    <target name="deploy-rm" depends="compile.tests" description="Deploy RM">
        <java classname="org.ow2.proactive.tests.performance.deployment.rm.DeployRMForTest" fork="true" failonerror="true" maxmemory="512m">
            <classpath>
                <pathelement location="${classes.dir}" />
                <path refid="compile.classpath" />
            </classpath>
            <jvmarg value="-Drm.deploy.rmHost=${rm.deploy.rmHost}" />
            <jvmarg value="-Drm.deploy.protocol=${rm.deploy.protocol}" />
            <jvmarg value="-Drm.deploy.pamr.routerHost=${rm.deploy.pamr.routerHost}" />
            <jvmarg value="-Drm.deploy.rmNodesHosts=${rm.deploy.rmNodesHosts}" />
            <jvmarg value="-Drm.deploy.rmNodesPerHosts=${rm.deploy.rmNodesPerHosts}" />
            <jvmarg value="-Drm.deploy.testNodes=${createNodeSourceHosts}" />
            <jvmarg value="-Drm.deploy.javaPath=${rm.deploy.javaPath}" />
            <jvmarg value="-Drm.deploy.rmHomePath=${rm.deploy.rmHomePath}" />
            <jvmarg value="-Drm.deploy.deployResultPropertiesFile=${basedir}/tmp/rm.deploy.result.properties" />
            <jvmarg value="-Djava.security.policy=${basedir}/config/grant.all.java.policy" />
        </java>
        <property file="${basedir}/tmp/rm.deploy.result.properties"/>
        <echo message="RM was started on the ${rm.deploy.result.rmUrl}, client java options ${rm.deploy.result.clientJavaOptions}" />
    </target>
    
    <target name="kill-rm" depends="compile.tests" description="Kill RM">
        <java classname="org.ow2.proactive.tests.performance.deployment.KillTestProcesses" 
            fork="true" 
            failonerror="false"
            maxmemory="512m">
            <classpath>
                <pathelement location="${classes.dir}" />
                <path refid="compile.classpath" />
            </classpath>
            <jvmarg value="-DtestHosts=${rm.deploy.rmHost},${rm.deploy.rmNodesHosts},${createNodeSourceHosts},${rm.deploy.pamr.routerHost}" />
        </java>
    </target>
    
    <target name="deploy-rm-and-execute-test" depends="copy.libs.to.jmeter, deploy-rm" description="Deploy RM, execute JMeter test and kill RM">
        <run-rm-jmeter-test testplan="rm1" 
            targetRmUrl="${rm.deploy.result.rmUrl}"
            clientjavaoptions="${rm.deploy.result.clientJavaOptions}"
            clientproactiveconfig="${basedir}/tmp/ClientProActiveConfiguration.xml"/>
        <antcall target="kill-rm"/>
        <fail if="rm-rm1-failed" message="JMeter test failed" />
    </target>

    <macrodef name="run-rm-jmeter-test">
        <attribute name="testplan" />
        <attribute name="targetRmUrl" />
        <attribute name="clientJavaOptions"/>
        <attribute name="clientProactiveConfig"/>
        <sequential>
            <delete file="${basedir}/results/@{testplan}.jtl" />
            <delete file="${basedir}/results/@{testplan}.html" />

            <jmeter failureProperty="rm-@{testplan}-failed" jmeterhome="${jmeterhome}" testplan="${basedir}/jmeter/testplans/@{testplan}.jmx" resultlog="${basedir}/results/@{testplan}.jtl">
                <jvmarg value="-Djava.security.policy=${basedir}/config/grant.all.java.policy" />
                <jvmarg value="-Dproactive.configuration=@{clientProactiveConfig}" />
                
                <property name="search_paths" value="${classes.dir}" />

                <property name="jmeter.save.saveservice.output_format" value="xml" />

                <property name="rmUrl" value="@{targetRmUrl}" />
                <property name="rmTestTime" value="${rmTestTime}" />

                <property name="rmListenersNumber" value="${rmListenersNumber}" />

                <property name="nodeJavaOptions" value="${nodeJavaOptions} @{clientJavaOptions}" />
                <property name="nodeRequestUsers" value="${nodeRequestUsers}" />
                <property name="requestedNodesNumber" value="${requestedNodesNumber}" />
                <property name="useSelectionScript" value="${useSelectionScript}" />
                <property name="nodeRequestTopology" value="${nodeRequestTopology}" />
                <property name="selectionScriptDynamicContent" value="${selectionScriptDynamicContent}" />

                <property name="createNodeSourceHosts" value="${createNodeSourceHosts}" />
                <property name="createNodeSourceNodesPerHost" value="${createNodeSourceNodesPerHost}" />
                <property name="createNodeSourceJavaPath" value="${createNodeSourceJavaPath}" />
                <property name="createNodeSourceSchedulingPath" value="${project.root}" />

                <property name="cliNodeSourceUsers" value="${cliNodeSourceUsers}" />
                <property name="cliUseDefaultScripts" value="${cliUseDefaultScripts}" />
                <property name="cliNodeDeploymentScript" value="${cliNodeDeploymentScript}" />
                <property name="cliNodeRemovalScript" value="${cliNodeRemovalScript}" />

                <property name="sshNodeSourceUsers" value="${sshNodeSourceUsers}" />

                <jmeterarg value="-j ${basedir}/results/jmeter.log" />
            </jmeter>

            <xslt classpathref="xslt.classpath" in="${basedir}/results/@{testplan}.jtl" out="${basedir}/results/@{testplan}.html" style="${basedir}/jmeter/config/jmeter-results-report_21.xsl" />
            <xslt classpathref="xslt.classpath" in="${basedir}/results/@{testplan}.jtl" out="${basedir}/results/@{testplan}_detail.html" style="${basedir}/jmeter/config/jmeter-results-detail-report_21.xsl" />
        </sequential>

    </macrodef>

    <target name="run-rm-test" depends="compile.tests, copy.libs.to.jmeter" description="Run RM test against (RM should be already deployed)">
        <run-rm-jmeter-test testplan="rm1" 
            targetRmUrl="${rmUrl}"
            clientproactiveconfig="${basedir}/config/DefaultClientProActiveConfiguration.xml"
            clientjavaoptions="-Dpa.rm.home=${project.root} -Dproactive.configuration=${basedir}/config/DefaultClientProActiveConfiguration.xml -Dorg.ow2.proactive.tests.performance=true"/>
        <fail if="rm-rm1-failed" message="JMeter test failed" />
    </target>

</project>
