#!/bin/sh
# ----------------------------------------------------------------------------
#
# This variable should be set to the directory where is installed PA_SCHEDULER
#

CLASSPATH=.

# ----------------------------------------------------------------------------

JAVA_HOME=${JAVA_HOME-NULL};
if [ "$JAVA_HOME" = "NULL" ]
then
echo
echo "The environment variable JAVA_HOME must be set the current jdk distribution"
echo "installed on your computer."
echo "Use "
echo "    export JAVA_HOME=<the directory where is the JDK>"
exit 127
fi

#set Scheduler install directory env var

PA_SCHEDULER=$(cd $workingDir/../.././ || (echo "Broken Scheduler/Resource Manager installation" ; exit 1) && echo $PWD)

print_jars() {
        find "$1" -name "*.jar" | while read jar; do
            printf "%s:" "$jar"
        done
}

# ----
# Set up the classpath using classes dir or jar files
#
# Check if classes exists and is not empty
if [ -d "$PA_SCHEDULER/classes/scheduler" ]
then
    CLASSPATH=$CLASSPATH:"$PA_SCHEDULER/classes/common"
    CLASSPATH=$CLASSPATH:"$PA_SCHEDULER/classes/resource-manager"
    CLASSPATH=$CLASSPATH:"$PA_SCHEDULER/classes/scheduler"
    CP=`print_jars "$PA_SCHEDULER/lib/"`
    CLASSPATH=$CLASSPATH:$CP
else
    # Script engines must be added to classpath to be found
    # it must also placed before jars containing jar-index
    CLASSPATH=$CLASSPATH:"$PA_SCHEDULER/dist/lib/script-js.jar"
    CLASSPATH=$CLASSPATH:"$PA_SCHEDULER/dist/lib/jruby-engine.jar"
    CLASSPATH=$CLASSPATH:"$PA_SCHEDULER/dist/lib/jython-engine.jar"
    #  Needed explicitly by VFS (file transfer in pre/post script
    CLASSPATH=$CLASSPATH:"$PA_SCHEDULER/dist/lib/commons-logging-1.0.4.jar"
    # fill with ProActive.jar : use jar index for ProActive dependencies
    CLASSPATH=$CLASSPATH:"$PA_SCHEDULER/dist/lib/ProActive.jar"
    # fill with Scheduler jars : use jar index for Scheduler dependencies
    CLASSPATH=$CLASSPATH:"$PA_SCHEDULER/dist/lib/ProActive_SRM-common.jar"
    CLASSPATH=$CLASSPATH:"$PA_SCHEDULER/dist/lib/ProActive_ResourceManager.jar"
    CLASSPATH=$CLASSPATH:"$PA_SCHEDULER/dist/lib/ProActive_Scheduler-core.jar"
fi

export CLASSPATH

#log4j file
if [ "$1" = "" ]
then
	LOG4J_FILE=file:${PA_SCHEDULER}/config/log4j/log4j-client
else
	LOG4J_FILE=file:${PA_SCHEDULER}/config/log4j/$1
fi

#if log4j file is client, use standard ProActive java.security.policy file
if [ "$1" = "log4j-client" ]
then
	JAVA_POLICY=$PA_SCHEDULER/config/security.java.policy-client
else
	JAVA_POLICY=$PA_SCHEDULER/config/security.java.policy-server
fi

#Enabling full security debug (extremely verbose, prints all stack traces when any permission is checked)
#POLICY_DEBUG="-Djava.security.debug=all"
#Enabling security policy debug (quite verbose, as it's applicable for all permission checking)
#POLICY_DEBUG="-Djava.security.debug=policy"

#Enabling custom clients policy security debug (normally is enough to debug client's permissions)
#POLICY_DEBUG="-Djava.security.debug=clients"

JAVACMD="$JAVA_HOME/bin/java -Djava.security.manager -Dproactive.configuration=\"$PA_SCHEDULER/config/proactive/ProActiveConfiguration.xml\" -Djava.security.policy=\"$JAVA_POLICY\" $POLICY_DEBUG -Dlog4j.configuration=\"$LOG4J_FILE\" -Dproactive.home=\"$PA_SCHEDULER\" -Dpa.scheduler.home=\"$PA_SCHEDULER\" -Dpa.rm.home=\"$PA_SCHEDULER\""

#echo $JAVACMD

export PA_SCHEDULER
export JAVACMD

