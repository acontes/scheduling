#!/usr/bin/env bash

DIR=$(dirname $0)

stop () {
	echo "Error: $1";
	echo "Use -h to print help";
	exit 1;
}

print_help () {
	echo -e "$0 <arguments> [options]                                                     "
	echo -e "                                                                             "
	echo -e "Paths for Web Applications (REST Server and both UI) point to either         "
	echo -e "a valid .war file, or the extraction directory of a valid .war file.         "
	echo -e "                                                                             "
	echo -e "Arguments:                                                                   "
	echo -e "-A PATH   REST Server                                                        "
	echo -e "                                                                             "
	echo -e "Options:                                                                     "
	echo -e "-R PATH   RM Web UI                                                          "
	echo -e "-S PATH   Scheduler Web UI                                                   "
	echo -e "-r URL    RM Server URL                                                      "
	echo -e "-s URL    Scheduler Server URL                                               "
	echo -e "-p PORT   HTTP server port                                                   "
	echo -e "-q        quiet output                                                       "
	echo -e "-v        Output jetty logs on stdout instead of tmp file                    "
	echo -e "-Dxxx     JVM option                                                         "
	echo -e "-h        print this message                                                 "
	echo -e "                                                                             "
}

VERBOSE=true
VERBOSE_JETTY=false
PORT=8080

while [ $# -gt 0 ]; do
	case $1 in
		-q) VERBOSE=false;
			shift 1;;
		-v) VERBOSE_JETTY=true;
			shift 1;;
		-h) print_help;
			exit 0;;
		-A) [ $# -eq 1 ] && stop "-A requires an argument"
			REST=$2;
			if [ ! -f $REST ] && [ ! -d $REST ]; then
				stop "-A must point to a Web App folder or .war file"
			fi
			shift 2;;
		-R) [ $# -eq 1 ] && stop "-R requires an argument"
			RM=$2;
			if [ ! -f $RM ] && [ ! -d $RM ]; then
				stop "-R must point to a Web App folder or .war file"
			fi
			shift 2;;
		-S) [ $# -eq 1 ] && stop "-S requires an argument"
			SCHED=$2;
			if [ ! -f $SCHED ] && [ ! -d $SCHED ]; then
				stop "-S must point to a Web App folder or .war file"
			fi
			shift 2;;
		-r) [ $# -eq 1 ] && stop "-r requires an argument"
			RM_URL=$2
			shift 2;;
		-s) [ $# -eq 1 ] && stop "-s requires an argument"
			SCHED_URL=$2
			shift 2;;
		-p) [ $# -eq 1 ] && stop "-p requires an argument"
			PORT=$2;
			shift 2;;
		*)
			if [ $(echo $1 | grep '^-D.*$') ]; then
				JVM_OPTS=$JVM_OPTS" $1"
			else
				stop "Unknown option: $1"
			fi
			shift;;
	esac
done



[ ! $REST ] && stop "REST Server argument is mandatory"

REST_URL="http://localhost:${PORT}/rest/rest"

REST_DIR=$(mktemp -d)/rest/
[ $VERBOSE = true ] && echo "Deploying REST Server in $REST_DIR"
if [ "$(file $REST |grep -i "Zip archive")" ]; then
	unzip -q $REST -d $REST_DIR
elif [ -d $REST ]; then
 	mkdir $REST_DIR
 	cp -a $REST/* $REST_DIR
else
 	stop "Invalid Web Application: $REST"
fi


cp $DIR/../../config/proactive/ProActiveConfiguration.xml $REST_DIR/WEB-INF/


if [ $RM_URL ]; then
	if [ "$(grep '^[ ]*rm[.]url.*' $REST_DIR/WEB-INF/portal.properties)" ]; then
		sed -i 's|^[ ]*rm[.]url.*|rm.url='$RM_URL'|' $REST_DIR/WEB-INF/portal.properties
	else
		echo "rm.url=$RM_URL" >> $REST_DIR/WEB-INF/portal.properties
	fi
fi
if [ $SCHED_URL ]; then
	if [ "$(grep '^[ ]*scheduler[.]url.*' $REST_DIR/WEB-INF/portal.properties)" ]; then
		sed -i 's|^[ ]*scheduler[.]url.*|scheduler.url='$SCHED_URL'|' $REST_DIR/WEB-INF/portal.properties
	else
		echo "scheduler.url=$SCHED_URL" >> $REST_DIR/WEB-INF/portal.properties
	fi
fi




APPS=$REST_DIR

if [ $RM ]; then
	RM_DIR=$(mktemp -d)/rm/
	[ $VERBOSE = true ] && echo "Deploying RM UI in $RM_DIR"

	if [ "$(file $RM |grep -i "Zip archive")" ]; then
		unzip -q $RM -d $RM_DIR
	elif [ -d $RM ]; then
		mkdir $RM_DIR
		cp -a $RM/* $RM_DIR
	else
		stop "Invalid Web Application: $RM"
	fi

	if [ "$(grep '^[ ]*rm[.]rest[.]url.*' $RM_DIR/rm.conf)" ]; then
		sed -i 's|^[ ]*rm[.]rest[.]url.*|rm.rest.url='$REST_URL'|' $RM_DIR/rm.conf
	else
		echo "rm.rest.url=$REST_URL" >> $RM_DIR/rm.conf
	fi

	APPS="$APPS $RM_DIR"
fi

if [ $SCHED ]; then
	SCHED_DIR=$(mktemp -d)/sched/
	[ $VERBOSE = true ] && echo "Deploying Scheduling UI in $SCHED_DIR"

	if [ "$(file $SCHED| grep -i "Zip archive")" ]; then
		unzip -q $SCHED -d $SCHED_DIR
	elif [ -d $SCHED ]; then
		mkdir $SCHED_DIR
		cp -a $SCHED/* $SCHED_DIR
	else
		stop "Invalid Web Application: $SCHED"
	fi

	if [ "$(grep '^[ ]*sched[.]rest[.]url.*' $SCHED_DIR/scheduler.conf)" ]; then
		sed -i 's|^[ ]*sched[.]rest[.]url.*|sched.rest.url='$REST_URL'|' $SCHED_DIR/scheduler.conf
	else
		echo "sched.rest.url=$REST_URL" >> $SCHED_DIR/scheduler.conf
	fi

	APPS="$APPS $SCHED_DIR"
fi


JAVA=$JAVA_HOME/bin/java

CP=$DIR/../../dist/lib/jetty-6.1.18.jar
CP=$CP:$DIR/../../dist/lib/jetty-util-6.1.18.jar
CP=$CP:$DIR/../../dist/lib/servlet-api-2.5-6.1.11.jar
CP=$CP:$DIR/../../dist/lib/ProActive_SRM-common.jar

CLASS=org.ow2.proactive.utils.JettyLauncher


if [ $VERBOSE_JETTY = false ]; then
	LOGFILE=$(mktemp --tmpdir)
	[ $VERBOSE = true ] && echo "Jetty Launcher logs to $LOGFILE"
	LOG="-l $LOGFILE"
fi

interrupt () {
	rm -Rf $REST_DIR $SCHED_DIR $RM_DIR
	echo ""
	exit 0;
}
trap interrupt INT

POL=$(mktemp)
cat <<EOF >$POL
grant {
permission java.security.AllPermission;
};
EOF

JVM_OPTS=$JVM_OPTS" -Djava.security.manager -Djava.security.policy=$POL"

CLASSPATH=$CP
$JAVA $JVM_OPTS $CLASS -p $PORT $LOG $APPS

exit $?
