<?xml version="1.0" encoding="ISO-8859-1"?>
<refentry version="5.0-subset Scilab" xml:id="PAsolve" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns3="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:db="http://docbook.org/ns/docbook">
    <info>
        <pubdate>$LastChangedDate: 2011-07-20 18:41:39 +0100 (mer., 20 july 2011)$</pubdate>
    </info>
    <refnamediv>
        <refname>PAsolve</refname>
        <refpurpose>Executes a call to a Scilab function(macro) in parallel</refpurpose>
    </refnamediv>


    <refsynopsisdiv>
        <title>Calling Sequence</title>
        <synopsis>PAsolve(func, arg1, arg2, ..., argn)</synopsis>
        <synopsis>PAsolve(pa_task_vector_1, pa_task_vector_2, ... , pa_task_vector_n)</synopsis>
        <synopsis>PAsolve(pa_task_matrix)</synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Description</title>

                <para>
                    This call will execute the given function in parallel through the ProActive Scheduler. The scheduler
                    must be running and this Scilab session must be connected to it through a call to <link linkend="PAconnect">PAconnect</link>.
                    </para>

    </refsection>
    <refsection>
        <title>Parameters</title>
        <variablelist>
            <varlistentry>
                <term>func</term>
                <listitem>
                    <para>the function to evaluate in parallel. The function can take any number of arguments and return
                        exactly one result. There is no limitation on the arg and result type (except maybe pointers or any data which can loose its signification remotely).
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>arg1, arg2, ... , argn</term>
                <listitem>
                    <para>each "argi" can either be a single parameter or a list of parameters (in case the function func takes more than one parameter).
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>pa_task_vector_1, pa_task_vector_2, ... , pa_task_vector_n</term>
                <listitem>
                    <para>each "pa_task_vector_i" is a column vector of <emphasis>PATask</emphasis> objects. Each line of this vector will be executed successively (i.e. chain execution). The task at line j can eventually use results or files produced by the task at line j-1. Each pa_task_vector will produce a global result for the vector which is the result produced by the last PATask in the vector. Each vectors will be run independently and thus this PAsolve call will produce n independent results. See <link linkend="PATask">PATask</link> to learn how to create and use PATask objects.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>pa_task_matrix</term>
                <listitem>
                    <para>the call PAsolve(pa_task_matrix_MxN). with a matrix of M lines and N columns is equivalent to the call PAsolve(pa_task_vector_M_1, pa_task_vector_M_2, ... , pa_task_vector_M_n), with n vectors of M lines.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>


                <refsection>
                <title>Simple Use</title>
                <para>The simplest way is the syntax PAsolve(func, arg1, arg2, ..., argn).
                    It will execute func(arg1), ... , func(argn) remotely. The PAsolve call will return immediately, display the id of the job submitted and return an object of type <emphasis>PAResl</emphasis>.</para>
                    <para>When submitting via PAsolve the PAResl object will first print that the return values are "Awaited". If this object is reused later on and in the meantime some results have been received, it will update its display to show the results who have been received. This way, results are received in a "lazy" way.</para>
                    <para>Alternatively, it is possible to block Scilab execution and wait for specific results via the use of functions <link linkend="PAwaitFor">PAwaitFor</link> and <link linkend="PAwaitAny">PAwaitAny</link>.
                    Also the function <link linkend="PAisAwaited">PAisAwaited</link> can be used to know if a result is available or not.</para>
                    <para>
                    The remote output of the func(argi) call will be displayed the first time the result is retrieved. The <link linkend="PAgetLogs">PAgetLogs</link> can be used to explicitly get the logs of an available result.
>
                </para>
                <para>Example of a simple PAsolve call:</para>
                <programlisting role="example"><![CDATA[-->r=PAsolve('cosh', 1, 2, 3, 4)

 Job submitted : 10
 r  =

(1):
Awaited (J:10)
(2):
Awaited (J:10)
(3):
Awaited (J:10)
(4):
Awaited (J:10)]]></programlisting>
                    <para>Results lazy updating:</para>
                    <programlisting role="example">--><![CDATA[r=PAsolve('cosh', 1, 2, 3, 4,5,6,7,8,9,10)

 Job submitted : 13
 r  =

(1):
Awaited (J:13)
(2):
Awaited (J:13)
(3):
Awaited (J:13)
(4):
Awaited (J:13)
(5):
Awaited (J:13)
(6):
Awaited (J:13)
(7):
Awaited (J:13)
(8):
Awaited (J:13)
(9):
Awaited (J:13)
(10):
Awaited (J:13)

-->r
 r  =

(1):
Awaited (J:13)
(2):
Awaited (J:13)
(3):
Awaited (J:13)
(4):

    27.3082328360164865
(5):

    74.2099485247878476
(6):
Awaited (J:13)
(7):
Awaited (J:13)
(8):
Awaited (J:13)
(9):
Awaited (J:13)
(10):

    11013.2329201033244
 ]]></programlisting>
                </refsection>
                <refsection>
                <title>Using PATask</title>
                <para>Instead of a global function and a list of parameters, complex tasks can be defined and executed. See <link linkend="PATask">PATask</link> for more information and examples.
                </para>
                </refsection>




    <refsection>
        <title>See Also</title>
        <simplelist type="inline">
            <member>
                <link linkend="PAconnect">PAconnect</link>
            </member>
            <member>
                <link linkend="PATask">PATask</link>
            </member>
            <member>
                <link linkend="PAwaitFor">PAWaitFor</link>
            </member>
            <member>
                <link linkend="PAwaitAny">PAWaitAny</link>
            </member>
            <member>
                <link linkend="PAisAwaited">PAisAwaited</link>
            </member>
            <member>
                <link linkend="PAgetLogs">PAgetLogs</link>
            </member>
        </simplelist>
    </refsection>


    <refsection>
        <title>Authors</title>
        <variablelist>
            <varlistentry>
                <term>Fabien Viale</term>
                <listitem>
                    <para>
                        INRIA OASIS
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>


</refentry>
