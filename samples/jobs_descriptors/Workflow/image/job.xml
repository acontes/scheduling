<?xml version="1.0" encoding="UTF-8"?>
<job xmlns="urn:proactive:jobdescriptor:dev"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:schemaLocation="urn:proactive:jobdescriptor:dev ../../src/scheduler/src/org/ow2/proactive/scheduler/common/xml/schemas/jobdescriptor/dev/schedulerjob.xsd"
     name="example" priority="low" projectName="ex" cancelJobOnError="true">

  <variables>
	<variable name="root" value="${pa.scheduler.home}/samples/jobs_descriptors/Workflow/image"/>
	<variable name="imgs" value="${root}/" />
  </variables>

  <!--
	 For each image in ${imgs}, this job will split the image in
	 a number of parts depending its size, then for each split
	 image a treatment will be run in parallel before the image is merged
	-->

  <taskFlow>

    <!-- Split the image in ${imgs} corresponding the current iteration -->
    <task name="split">
      <pre>
        <script>
          <!-- if at iteration 0, removes output from previous execution -->
          <file path="${root}/clean_tmp.js">
			<arguments>
			  <argument value="${imgs}" />
			</arguments>
		  </file>
        </script>
      </pre>
	  <nativeExecutable>
		<!-- cuts one image in multiple parts -->
        <staticCommand value="${root}/cut.sh">
		  <arguments>
			<argument value="${imgs}" />
		  </arguments>
		</staticCommand>
	  </nativeExecutable>
	  <!-- start block because target of a loop -->
	  <flowControl block="start">
		<replicate>
		  <script>
			<!-- will replicate the child task X times, where X is the number
				 of images created by cut.sh -->
			<file path="${root}/dup.js">
			  <arguments>
				<argument value="${imgs}" />
			  </arguments>
			</file>
		  </script>
		</replicate>
	  </flowControl>
	</task>

    <!-- applies a filter on one single image part
		 depending the iteration (image) and replication (sub-image) number -->
	<task name="filter">
	  <depends>
		<task ref="split" />
	  </depends>
	  <nativeExecutable>
        <staticCommand value="${root}/filter.sh">
		  <arguments>
			<argument value="${imgs}/" />
		  </arguments>
		</staticCommand>
	  </nativeExecutable>
	</task>

    <!-- joins all sub-images for the current iteration and
		 puts the new image in the output folder -->
	<task name="join">
	  <depends>
		<task ref="filter" />
	  </depends>
	  <nativeExecutable>
		<!-- join.sh actually makes a mess: there is no way to
			 easily determine which image part goes where without a bit of tagging.
			 The image is poorly merged but the point is not there	  -->
        <staticCommand value="${root}/join.sh">
		  <arguments>
			<argument value="${imgs}" />
		  </arguments>
		</staticCommand>
	  </nativeExecutable>
	  <!-- end block: looped block -->
	  <flowControl block="end">
	    <!-- while some images are left untreated in the input folder,
			 make another iteration of the treatment -->
		<loop target="split">
          <script>
			<file path="${root}/loop.js">
			  <arguments>
				<argument value="${imgs}" />
			  </arguments>
			</file>
          </script>
		</loop>
	  </flowControl>
	</task>
  </taskFlow>
</job>
