<project>
<!--
		DO NOT EDIT THIS FILE UNLESS YOU ARE IN THE DOCUMENTATION PROJECT

		This file is shared by all ProActive projects. If you have to modify it,
		please refer to the INSTALL file in the root of the Documentation project
		to know how to do it properly.
-->
	<import file="doc_paths.xml" />
	
	<!-- ==================================================================== -->
	<!--      Make an archive from the files for the single html manual       -->
	<!-- ==================================================================== -->
	<macrodef name="manualSingleHtmlZip" description="Create a zip of the big html file in the manual" >
		<attribute name="include.files" />
		<sequential>
			<zip destfile="${docs.html.single.zip}" basedir="${docs.html.single.dir}" includes="@{include.files}"/>
		</sequential>
	</macrodef>
	<!-- ==================================================================== -->
	<!--      Make an archive from the published javadoc       -->
	<!-- ==================================================================== -->
	<macrodef name="javadoc.publishedZip" description="Create a zip from the published javadoc">
		<sequential>
			<zip destfile="${docs.javadoc.published.zip}" basedir="${docs.api.published.dir}" />
		</sequential>
	</macrodef>
	<!-- ==================================================================== -->
	<!--      Make an archive from the complete javadoc                       -->
	<!-- ==================================================================== -->
	<macrodef name="javadoc.completeZip" description="Create a zip from the complete javadoc">
		<sequential>
			<zip destfile="${docs.javadoc.complete.zip}" basedir="${docs.api.complete.dir}" />
		</sequential>
	</macrodef>

	
	<!-- ==================================================================== -->
	<!--   Make an archive from the files for the multiple html manual        -->
	<!-- ==================================================================== -->
	<macrodef name="manualHtmlZip" description="Create a zip of the html filed in the manual" >
		<sequential>
			<zip destfile="${docs.html.multiple.zip}" basedir="${docs.html.multiple.dir}"/>
		</sequential>
	</macrodef>
	<!-- ==================================================================== -->
	<!--          Create the snippets necessary for programlistings           -->
	<!-- ==================================================================== -->
	<macrodef name="snippetscreation">
		<sequential>
			<delete quiet="true">
				<fileset dir="${snippets.location}"/>
			</delete>
			<mkdir dir="${snippets.location}"/>
			<if name="snippets.start">
				<else>
					<property name="snippets.start" value="${snippets.start.default}" />
				</else>
			</if>
			<java classname="doc.snippets.Snippetizer" fork="true" >
				<classpath refid="docs.utils.classpath"/>
				<!-- The root for parser start, it will check all the files in the dir and subdirs-->
				<arg value="${snippets.start}" />
				<!-- The output path for snippets  -->
				<arg value="${snippets.location}" />
			</java>
		</sequential>
	</macrodef>
	
	
	
	
	<!-- ==================================================================== -->
	<!--      Converts docbook xml into ??? - uses the trax processor         -->
	<!-- ==================================================================== -->
	<macrodef name="docbookTransform">
		<attribute name="docbookInputFile"/>
		<attribute name="docbookOutputFile"/>
		<attribute name="docbookStyle" />
		<attribute name="docbook.profile" />
		<attribute name="docbookOutputDir"/>

		<sequential>
			<taskdef name="xml_validate" classname="org.apache.tools.ant.taskdefs.optional.XMLValidateTask" description="XML Validation">
				<classpath refid="docs.utils.classpath" />
			</taskdef>
			<xml_validate file="${docs.src.dir}/${docs.mainFile}"  warn="true" />
			<!-- Profiling step: keep only the tags which have the attribute os="${docbook.profile}" or no os attribute -->
			<xslt basedir="${docs.src.dir}"  in="${docs.tmp.dir}/@{docbookInputFile}" out="${docs.tmp.dir}/profiled.xml" style="${docs.xsl.profiling}" force="yes">
				<param name="profile.os" expression="@{docbook.profile}" />
				<param name="tmp.dir" expression="${docs.tmp.dir}/" />
				<param name="url.file.prefix" expression="${url.file.prefix}" />
				<classpath refid="docs.utils.classpath" />
			</xslt>
			
			<java classname="com.icl.saxon.StyleSheet" fork="true" dir="@{docbookOutputDir}">
				<classpath refid="docs.utils.classpath" />
				<jvmarg value="-Dxslthl.config=${xslthl.path}"/>
				<arg line="-o @{docbookOutputFile} ${docs.tmp.dir}/profiled.xml @{docbookStyle}"/>
				<arg value="TODAY=${TODAY}" />
				<arg value="VERSION=${version}" />
			</java>
		</sequential>
	</macrodef>

	<!-- ==================================================================== -->
	<!-- preprocessing for the manual: copy files and add tags to source code -->
	<!-- ==================================================================== -->
	<macrodef name="docbookPreProcess">
		<attribute name="output.docs.dir"/>
		<sequential>
			<!-- Call the code for generating the snippets -->
			<snippetscreation/>
			
			<!-- as this file gets edited, make sure it's a fresh copy-->
			<delete file="${docs.tmp.dir}/${docs.mainFile}" />
			
			<!-- Copy the files needed for the html files (pics and maybe others) -->
			<copy toDir="@{output.docs.dir}" includeemptydirs="no" >
				<fileset dir="${docs.src.dir}">
					<include name="**/*.png" />
					<include name="**/*.jpg" />
					<include name="**/*.svg" />
					<include name="**/*.gif" />
					<include name="${docs.html.css.name}" />
				</fileset>
			</copy>
			<!-- Copying xml files so they can be edited (beautify programlistings) -->
			<copy toDir="${docs.tmp.dir}" includeemptydirs="no">
				<fileset dir="${docs.src.dir}">
					<include name="**/*" />
					<exclude name="**/.svn" />
					<exclude name="xsl" />
				</fileset>
			</copy>
		</sequential>
	</macrodef>
	
	<!-- ==================================================================== -->
	<!--           Make only one huge html-file from the doc                  -->
	<!-- ==================================================================== -->
	<macrodef name="manualSingleHtml" description="Make only the big html file in the manual">
		<sequential>
			<docbookPreProcess output.docs.dir="${docs.html.single.dir}" />
			<docbookTransform docbookInputFile="${docs.mainFile}"
				docbookOutputFile="${docs.html.single.output}"
				docbookStyle="${docs.xsl.html.one}"
				docbook.profile="html"
				docbookOutputDir="${docs.html.single.dir}"/>
			<!-- remove temporary folder -->
			<delete dir="${docs.tmp.dir}"/>
		</sequential>
	</macrodef>

	<!-- ==================================================================== -->
	<!--               Make just the pdf files for the manual                 -->
	<!-- ==================================================================== -->
	<macrodef name="manualPdf" description="Make only the pdf files in the manual">
		<sequential>
			<docbookPreProcess output.docs.dir="${docs.pdf.dir}" />
			<!--   First translate into intermediate fo format -->
			<docbookTransform docbookInputFile="${docs.mainFile}"
					  docbookOutputFile="${docs.pdf.output}.fo" 
					  docbookStyle="${docs.xsl.pdf}" 
					 docbook.profile="pdf"
					 docbookOutputDir="${docs.pdf.dir}"/>
			<!-- declare how to transform fo xml file in pdf through a new 'fop' task -->
			<taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop" description="Official way to translate .fo (result of xml docbook translation) into .pdf">
				<classpath refid="docs.utils.classpath" />
			</taskdef>
			<!-- Then use the newly defined fop task to translate fo into pdf -->
			<fop format="application/pdf" fofile="${docs.pdf.output}.fo" outfile="${docs.pdf.output}" basedir="${docs.src.dir}" />
			
			<delete file="${fo.output}" />
			<!-- remove all files except the PDF -->

<!--  needed because docbookPreProcess copies all the files -->
			<delete includeemptydirs="true">
				<fileset dir="${docs.pdf.dir}" defaultexcludes="false"
					includes="**/*"  excludes="${docs.pdf.name}" />
			</delete>
			<!-- remove temporary folder -->
			<delete dir="${docs.tmp.dir}"/>
		</sequential>
	</macrodef>

	<!-- ==================================================================== -->
	<!--          Make just the html files for the manual                     -->
	<!-- ==================================================================== -->
	<macrodef name="manualHtml" description="Make only the html files in the manual">
		<sequential>
			<docbookPreProcess output.docs.dir="${docs.html.multiple.dir}" />
			<docbookTransform docbookInputFile="${docs.mainFile}" 
					docbookOutputFile="${docs.html.multiple.output}" 
					docbookStyle="${docs.xsl.html.chunked}" 
					docbook.profile="html" 
					docbookOutputDir="${docs.html.multiple.dir}"/>
			<!-- remove temporary folder -->
			<delete dir="${docs.tmp.dir}"/>
		</sequential>
	</macrodef>
	<!-- ==================================================================== -->
	<!--                               Clean                                  -->
	<!-- ==================================================================== -->
	<macrodef name="clean" description="Delete generated and temporary files">
		<sequential>
		      <delete dir="${docs.tmp.dir}" />
		      <delete dir="${docs.dir}/built" />
		</sequential>
	</macrodef>
	
	
	<!-- ==================================================================== -->
	<!--                            Javadoc checkstyle                        -->
	<!-- ==================================================================== -->
	<taskdef resource="checkstyletask.properties" classpath="${compile.dir}/lib/checkstyle-all-5.0-beta01.jar"/>

	<macrodef name="javadoc.checkstyle" description="Generate javadoc violation reports">
		<sequential>
			<property name="checkstyle.plain.file" value="${docs.built.dir}/${doc.name}_javadoc.txt"/>
			<property name="checkstyle.xml.file" value="${docs.built.dir}/${doc.name}_javadoc.xml"/>
			<property name="translation.severity" value="ignore"/>
			<mkdir dir="${docs.built.dir}"/>
			<checkstyle config="${checkstyle.config}" failOnViolation="false">
				<formatter type="plain"  tofile="${checkstyle.plain.file}"/>
				<formatter type="xml" tofile="${checkstyle.xml.file}"/>
				<fileset dir="${checkstyle.src.set}" includes="**/*.java"/>
			</checkstyle>
		</sequential>
	</macrodef>


   <taskdef name="xsddoc" classname="net.sf.xframe.xsddoc.Task">
        <classpath>
            <fileset dir="${docs.lib.dir}">
                   <include name="xalan-2.7.0.jar" />
                   <include name="xercesImpl-2.7.1.jar" />
                   <include name="xerces.jar" />
                   <include name="xml-apis.jar"/>
                   <include name="xsddoc.jar"/>
            </fileset>
        </classpath>
    </taskdef>

    <macrodef name="xsddoc.gcmd" description="build documentation for GCM Deployment schema using xsddoc">
        <sequential>
            <property name="gcmd.dir" value="${docs.schemas.dir}/gcmd" />
            <mkdir dir="${gcmd.dir}"/>
			<echo message="Processing GCMD schema documentation..." />
            <xsddoc out="${gcmd.dir}" 
                    title="GCM Deployment Schema" 
                    verbose="false"
                    header="&lt;img width='70%' src='${base.dir}/doc/pa/images/Logo-ProActive.png' /&gt;"
                    bottom=" "
                    file="${src.extensions.dir}/${extensions.path}/gcmdeployment/schema/ExtensionSchemas.xsd" />
        </sequential>
    </macrodef>

    <macrodef name="xsddoc.gcma" description="build documentation for GCM Application schema using xsddoc">
        <sequential>
            <property name="gcma.dir" value="${docs.schemas.dir}/gcma" />
            <mkdir dir="${gcma.dir}"/>
			<echo message="Processing GCMA schema documentation..." />
            <xsddoc out="${gcma.dir}" 
                    title="GCM Application Schema" 
                    verbose="false"
                    header="&lt;img width='70%' src='${base.dir}/doc/pa/images/Logo-ProActive.png' /&gt;"
                    bottom=" "
                    file="${src.extensions.dir}/${extensions.path}/gcmdeployment/schema/ApplicationDescriptorSchema.xsd" />
        </sequential>
    </macrodef>

    <macrodef name="schemas" description="build documentation for GCM schemas">
        <sequential>
            <xsddoc.gcmd/>
            <xsddoc.gcma/>
        </sequential>
    </macrodef>

	<macrodef name="setProperties">
		<sequential>
			<property name="docs.built.dir"			value="${docs.dir}/built/${doc.name}" />
			<property name="docs.api.complete.dir"		value="${docs.built.dir}/api_complete" />
			<property name="docs.api.published.dir"		value="${docs.built.dir}/api_published" />
			<property name="docs.html.multiple.dir"		value="${docs.built.dir}/multiple_html/" />
			<property name="docs.html.single.dir"		value="${docs.built.dir}/single_html/" />
			<property name="docs.pdf.dir"			value="${docs.built.dir}/pdf/" />
			<property name="docs.schemas.dir"          value="${docs.built.dir}/schemas/" />
			<property name="docs.pdf.name"			value="${doc.name}Manual.pdf" />
			<property name="docs.html.multiple.zip"		value="${docs.built.dir}/${doc.name}ManualMultipleHtml.zip" />
			<property name="docs.html.single.zip"		value="${docs.built.dir}/${doc.name}ManualSingleHtml.zip" />
			<property name="docs.javadoc.published.zip"	value="${docs.built.dir}/${doc.name}JavadocPublished.zip" />
			<property name="docs.javadoc.complete.zip"	value="${docs.built.dir}/${doc.name}JavadocComplete.zip" />
			<property name="docs.html.multiple.output"	value="${docs.html.multiple.dir}/empty.html" />
			<property name="docs.html.single.name"		value="${doc.name}Manual.html" />
			<property name="docs.html.single.output"	value="${docs.html.single.dir}/${docs.html.single.name}" />
			<property name="docs.pdf.output"		value="${docs.pdf.dir}/${docs.pdf.name}" />
			<property name="javadoc.title" 			value="${doc.name} "/>
			<property name="docs.javadoc.window.title" 	value="${doc.name}"/>
		</sequential>
	</macrodef>
</project>
