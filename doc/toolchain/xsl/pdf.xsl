<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
		DO NOT EDIT THIS FILE UNLESS YOU ARE IN THE DOCUMENTATION PROJECT

		This file is shared by all ProActive projects. If you have to modify it,
		please refer to the INSTALL file in the root of the Documentation project
		to know how to do it properly.
-->
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:date="http://exslt.org/dates-and-times" xmlns:destination="http://xml.apache.org/fop/extensions" xmlns:fo="http://www.w3.org/1999/XSL/Format" exclude-result-prefixes="date" version="1.0">
	<xsl:import href="../docbook-xsl/fo/docbook.xsl">
	</xsl:import>
	<xsl:import href="../docbook-xsl/common/personal-templates.xsl">
	</xsl:import>
	<xsl:import href="common.xsl">
	</xsl:import>
	<!-- Import profiled highlighting color -->
	<xsl:import href="../highlighting/xsl/fo-hl.xsl">
	</xsl:import>
	<!-- ignore the scaling values the someone might put in the XML files 
		<xsl:param name="ignore.image.scaling" select="0">1</xsl:param>-->
	<!-- numbering depth: will remove numbers from sections but still display them in TOC  
		<xsl:param name="section.autolabel.max.depth">2</xsl:param>
	-->
	<!-- Make graphics in pdf be smaller than page width, if needed-->
	<!--
		to scale images in the pdf to the page width if the image is 
		bigger than the page width and to keep it the same size if smaller use 
		scalefit="1" width="100%" contentdepth="100%" 
		on every image :(
	-->
	<!-- wraps very long lines -->
	<xsl:attribute-set name="monospace.verbatim.properties">
		<xsl:attribute name="wrap-option">
			wrap
		</xsl:attribute>
	</xsl:attribute-set>
	<!-- DOC-114 -->
	<!-- Enables examples to be cut so that they can be displayed
		 on several pages-->
	<xsl:attribute-set name="example.properties">
		<xsl:attribute name="keep-together.within-column">
			auto
		</xsl:attribute>
	</xsl:attribute-set>
	<!--  center all images in the tag figure horizontally  -->
	<xsl:attribute-set name="figure.properties">
		<xsl:attribute name="text-align">
			center
		</xsl:attribute>
	</xsl:attribute-set>
	<!--  align all images in the tag informalfigure horizontally  -->
	<xsl:attribute-set name="informalfigure.properties">
		<xsl:attribute name="text-align">
			center
		</xsl:attribute>
	</xsl:attribute-set>
	<xsl:attribute-set name="table.properties">
		<xsl:attribute name="keep-together.within-page">
			3
		</xsl:attribute>
	</xsl:attribute-set>
	<xsl:attribute-set name="informaltable.properties">
		<xsl:attribute name="font-family">
			Lucida Sans Typewriter
		</xsl:attribute>
		<xsl:attribute name="font-size">
			8pt
		</xsl:attribute>
	</xsl:attribute-set>
	<!-- xref.properties definition -->
	<!-- This attribute set defines how links will look in the pdf version -->
	<xsl:attribute-set name="xref.properties">
		<xsl:attribute name="color">
			blue
		</xsl:attribute>
		<xsl:attribute name="text-decoration">
			underline
		</xsl:attribute>
	</xsl:attribute-set>
	<!--  Changing font sizes -->
	<xsl:param name="monospace.font.family">
		Helvetica
	</xsl:param>
	<xsl:param name="ulink.show">
		1
	</xsl:param>
	<xsl:param name="ulink.footnotes">
		1
	</xsl:param>
	<!-- This avoids having "Draft" mode set on. Avoids the other two lines -->
	<xsl:param name="fop1.extensions" select="'1'">
	</xsl:param>
	<!-- <xsl:param name="draft.mode">no</xsl:param>  -->
	<!-- <xsl:param name="draft.watermark.image"></xsl:param>  -->
	<xsl:param name="draft.watermark.image">
	</xsl:param>
	<!-- Having long lines be broken up  -->
	<xsl:param name="hyphenate.verbatim">
		0
	</xsl:param>
	<!-- Have screens written on darker background -->
	<xsl:attribute-set name="verbatim.properties">
		<xsl:attribute name="background-color">
			#f1e6d7
		</xsl:attribute>
	</xsl:attribute-set>
	<!-- set this parameter to a zero width value -->
	<xsl:param name="body.start.indent">
		4pt
	</xsl:param>
	<!--  set the title.margin.left parameter to the negative value of the desired indent.  -->
	<xsl:param name="title.margin.left">
		-4pt
	</xsl:param>
	<!-- All xrefs have the numbering AND the title -->
	<xsl:param name="xref.with.number.and.title" select="'1'">
	</xsl:param>
	<!--  Paper feed -->
	<xsl:param name="paper.type">
		A4
	</xsl:param>
	<xsl:param name="page.margin.inner">
		10mm
	</xsl:param>
	<xsl:param name="page.margin.outer">
		13mm
	</xsl:param>
	<!-- http://www.mail-archive.com/docbook-apps@lists.oasis-open.org/msg09900.html -->
	<!--  usefull for : Double-sided documents are printed with a slightly wider margin on the binding edge of the page. -->
	<xsl:param name="double.sided">
		0
	</xsl:param>
	<!-- Make "compact" listitems be *very* close to each other -->
	<xsl:attribute-set name="compact.list.item.spacing">
		<xsl:attribute name="space-before.optimum">
			0em
		</xsl:attribute>
		<xsl:attribute name="space-before.minimum">
			0em
		</xsl:attribute>
		<xsl:attribute name="space-before.maximum">
			0.2em
		</xsl:attribute>
	</xsl:attribute-set>
	<!-- Make listitems close to each other -->
	<xsl:attribute-set name="list.item.spacing">
		<xsl:attribute name="space-before.optimum">
			0.25em
		</xsl:attribute>
		<xsl:attribute name="space-before.minimum">
			0.1em
		</xsl:attribute>
		<xsl:attribute name="space-before.maximum">
			0.4em
		</xsl:attribute>
	</xsl:attribute-set>
	<!-- Indent to the left all listitems, also modified space before & after -->
	<xsl:attribute-set name="list.block.spacing">
		<xsl:attribute name="margin-left">
			1em
		</xsl:attribute>
		<!--Added margin!-->
		<xsl:attribute name="space-before.optimum">
			0.5em
		</xsl:attribute>
		<xsl:attribute name="space-before.minimum">
			0.4em
		</xsl:attribute>
		<xsl:attribute name="space-before.maximum">
			0.7em
		</xsl:attribute>
		<xsl:attribute name="space-after.optimum">
			0.5em
		</xsl:attribute>
		<xsl:attribute name="space-after.minimum">
			0.4em
		</xsl:attribute>
		<xsl:attribute name="space-after.maximum">
			0.7em
		</xsl:attribute>
	</xsl:attribute-set>
	<!-- The chapter entries of the toc are in bold, the parts in bold and 11pt. -->
	<xsl:template name="toc.line">
		<xsl:variable name="id">
			<xsl:call-template name="object.id">
			</xsl:call-template>
		</xsl:variable>
		<xsl:variable name="label">
			<xsl:apply-templates mode="label.markup" select=".">
			</xsl:apply-templates>
		</xsl:variable>
		<xsl:variable name="line">
			<fo:inline keep-with-next.within-line="always">
				<xsl:choose>
					<xsl:when test="self::chapter or self::appendix or self::bibliography or self::index or self::preface">
						<xsl:attribute name="font-weight">
							bold
						</xsl:attribute>
						<xsl:attribute name="font-size">
							12pt
						</xsl:attribute>
						<xsl:attribute name="color">
							#00257E
						</xsl:attribute>
					</xsl:when>
					<xsl:when test="self::part">
						<xsl:attribute name="font-weight">
							bold
						</xsl:attribute>
						<xsl:attribute name="font-size">
							14pt
						</xsl:attribute>
						<xsl:attribute name="color">
							#FFFFFF
						</xsl:attribute>
					</xsl:when>
				</xsl:choose>
				<fo:basic-link internal-destination="{$id}">
					<xsl:variable name="toc_line_name">
						<xsl:copy-of select="name(.)">
						</xsl:copy-of>
					</xsl:variable>
					<xsl:if test="$toc_line_name = 'chapter' or $toc_line_name = 'part'  or $toc_line_name = 'appendix'">
						<xsl:call-template name="gentext">
							<xsl:with-param name="key" select="$toc_line_name" />
						</xsl:call-template>
						<xsl:call-template name="gentext.space">
						</xsl:call-template>
					</xsl:if>
					<xsl:if test="$label != ''">
						<xsl:copy-of select="$label">
						</xsl:copy-of>
						<xsl:value-of select="$autotoc.label.separator">
						</xsl:value-of>
					</xsl:if>
					<xsl:apply-templates mode="title.markup" select=".">
					</xsl:apply-templates>
					<xsl:call-template name="gentext.space">
					</xsl:call-template>
					<fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern="dots" leader-pattern-width="3pt">
					</fo:leader>
					<xsl:call-template name="gentext.space">
					</xsl:call-template>
					<fo:page-number-citation ref-id="{$id}">
					</fo:page-number-citation>
				</fo:basic-link>
			</fo:inline>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="self::part">
				<fo:block background-color="#00257E" end-indent="{$toc.indent.width}pt" last-line-end-indent="-{$toc.indent.width}pt" line-height="19pt" padding-top="2mm" space-after="2mm" space-before="8mm" text-align-last="justify">
					<xsl:copy-of select="$line">
					</xsl:copy-of>
				</fo:block>
			</xsl:when>
			<xsl:when test="self::chapter or self::appendix or self::bibliography or self::index">
				<fo:block end-indent="{$toc.indent.width}pt" last-line-end-indent="-{$toc.indent.width}pt" space-after="1mm" space-before="3mm" text-align-last="justify">
					<xsl:copy-of select="$line">
					</xsl:copy-of>
				</fo:block>
			</xsl:when>
			<xsl:when test="self::preface">
				<fo:block end-indent="{$toc.indent.width}pt" last-line-end-indent="-{$toc.indent.width}pt" space-after="0mm" space-before="8mm" text-align-last="justify">
					<xsl:copy-of select="$line">
					</xsl:copy-of>
				</fo:block>
			</xsl:when>
			<xsl:otherwise>
				<fo:block end-indent="{$toc.indent.width}pt" last-line-end-indent="-{$toc.indent.width}pt" text-align-last="justify">
					<xsl:copy-of select="$line">
					</xsl:copy-of>
				</fo:block>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<!--    Changing the appearance of ALL the section titles    -->
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<xsl:attribute-set name="section.title.properties">
		<xsl:attribute name="font-weight">
			bold
		</xsl:attribute>
		<xsl:attribute name="color">
			#0010FF
		</xsl:attribute>
		<xsl:attribute name="font-size">
			10pt
		</xsl:attribute>
		<!--All titles not reconfigured are 10pt-->
	</xsl:attribute-set>
	<!-- Extra configure for sect1 and sect2 -->
	<xsl:attribute-set name="section.title.level1.properties">
		<xsl:attribute name="font-size">
			14pt
		</xsl:attribute>
		<!--  Adding a grey box under all section1 titles -->
		<xsl:attribute name="background-color">
			#E0E0E0
		</xsl:attribute>
	</xsl:attribute-set>
	<xsl:attribute-set name="section.title.level2.properties">
		<xsl:attribute name="font-size">
			12pt
		</xsl:attribute>
	</xsl:attribute-set>
	<xsl:attribute-set name="section.title.level3.properties">
		<xsl:attribute name="font-size">
			11pt
		</xsl:attribute>
	</xsl:attribute-set>
	<xsl:attribute-set name="section.title.level4.properties">
		<xsl:attribute name="font-size">
			10pt
		</xsl:attribute>
	</xsl:attribute-set>
	<!-- Q&A title customized // How do I say "It is = to sect1 properties ?" -->
	<xsl:attribute-set name="qandadiv.title.properties">
		<xsl:attribute name="font-weight">
			bold
		</xsl:attribute>
		<xsl:attribute name="color">
			#0010FF
		</xsl:attribute>
		<xsl:attribute name="font-size">
			14pt
		</xsl:attribute>
		<xsl:attribute name="space-before">
			7mm
		</xsl:attribute>
		<xsl:attribute name="background-color">
			#E0E0E0
		</xsl:attribute>
	</xsl:attribute-set>
	<!-- Q&A title customized // How do I say "It is = to sect2 properties ?-->
	<xsl:attribute-set name="question.title.properties">
		<xsl:attribute name="font-weight">
			bold
		</xsl:attribute>
		<xsl:attribute name="color">
			#0010FF
		</xsl:attribute>
		<xsl:attribute name="font-size">
			12pt
		</xsl:attribute>
		<xsl:attribute name="space-before">
			5mm
		</xsl:attribute>
	</xsl:attribute-set>
	<!-- helper for header.table below -->
	<xsl:template name="link.myhelper">
		<xsl:param name="class" select="''">
		</xsl:param>
		<xsl:param name="level" select="''">
		</xsl:param>
		<xsl:if test="$level/@id != ''">
			<fo:block space-before="5pt">
				<fo:basic-link internal-destination="{$level/@id}">
					<xsl:if test="$class != ''">
						<xsl:call-template name="gentext">
							<xsl:with-param name="key" select="$class">
							</xsl:with-param>
						</xsl:call-template>
						<xsl:call-template name="gentext.space">
						</xsl:call-template>
						<xsl:apply-templates mode="label.markup" select="$level">
						</xsl:apply-templates>
						<xsl:text>
							:
						</xsl:text>
						<xsl:call-template name="gentext.space">
						</xsl:call-template>
					</xsl:if>
					<xsl:apply-templates mode="title.markup" select="$level">
					</xsl:apply-templates>
				</fo:basic-link>
			</fo:block>
		</xsl:if>
	</xsl:template>
	<!-- adjust the headers, recalling chapter and part numbers -->
	<xsl:template name="header.table">
		<xsl:param name="pageclass" select="''">
		</xsl:param>
		<xsl:param name="sequence" select="''">
		</xsl:param>
		<xsl:param name="gentext-key" select="''">
		</xsl:param>
		<!--  Left is the current node level if it's not chapter: it can be part/TOC/LOT  
			if current node is chapter, display part information. -->
		<xsl:variable name="leftS">
			<xsl:choose>
				<xsl:when test="$gentext-key = 'part'">
					<xsl:call-template name="link.myhelper">
						<xsl:with-param name="level" select=".">
						</xsl:with-param>
						<xsl:with-param name="class" select="$gentext-key">
						</xsl:with-param>
					</xsl:call-template>
				</xsl:when>
				<xsl:otherwise>
					<xsl:call-template name="link.myhelper">
						<xsl:with-param name="level" select="..">
						</xsl:with-param>
						<xsl:with-param name="class" select="'part'">
						</xsl:with-param>
					</xsl:call-template>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<!-- Right is only put if current node != Part -->
		<xsl:variable name="rightS">
			<xsl:if test="$gentext-key != 'part'">
				<xsl:call-template name="link.myhelper">
					<xsl:with-param name="level" select=".">
					</xsl:with-param>
					<xsl:with-param name="class">
						<xsl:if test="$gentext-key = 'chapter'">
							<xsl:copy-of select="$gentext-key">
							</xsl:copy-of>
						</xsl:if>
					</xsl:with-param>
				</xsl:call-template>
			</xsl:if>
		</xsl:variable>
		<xsl:variable name="candidate">
			<fo:table table-layout="fixed" width="100%">
				<xsl:call-template name="head.sep.rule">
					<xsl:with-param name="pageclass" select="$pageclass">
					</xsl:with-param>
					<xsl:with-param name="sequence" select="$sequence">
					</xsl:with-param>
					<xsl:with-param name="gentext-key" select="$gentext-key">
					</xsl:with-param>
				</xsl:call-template>
				<!--  fop requires one table-column per column in the table (this tag can be left empty though)  -->
				<fo:table-column column-width="proportional-column-width(1)">
				</fo:table-column>
				<fo:table-column column-width="proportional-column-width(1)">
				</fo:table-column>
				<fo:table-column column-width="proportional-column-width(1)">
				</fo:table-column>
				<fo:table-body>
					<fo:table-row height="15pt">
						<fo:table-cell display-align="before" text-align="left">
							<fo:block>
								<xsl:copy-of select="$leftS">
								</xsl:copy-of>
							</fo:block>
						</fo:table-cell>
						<fo:table-cell display-align="before" text-align="center">
							<fo:block>
								<fo:external-graphic>
									<xsl:attribute name="src">
										<xsl:call-template name="fo-external-image">
											<xsl:with-param name="filename" select="$header.image.filename">
											</xsl:with-param>
										</xsl:call-template>
									</xsl:attribute>
									<xsl:attribute name="content-height">
										14pt
									</xsl:attribute>
									<xsl:attribute name="background-color">
										#FFFFFF
									</xsl:attribute>
								</fo:external-graphic>
							</fo:block>
						</fo:table-cell>
						<fo:table-cell display-align="before" text-align="right">
							<fo:block>
								<xsl:copy-of select="$rightS">
								</xsl:copy-of>
							</fo:block>
						</fo:table-cell>
					</fo:table-row>
				</fo:table-body>
			</fo:table>
		</xsl:variable>
		<!-- Really output a header only if not one of the first pages of book -->
		<xsl:if test="$gentext-key != 'book'">
			<xsl:copy-of select="$candidate">
			</xsl:copy-of>
		</xsl:if>
	</xsl:template>
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<!--  Changing the footer, which contains the page number    -->
	<!--  This footer template's only modification concerns the  -->
	<!--     final test, ie which pages have a footer line.      -->
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<xsl:template name="footer.table">
		<xsl:param name="pageclass" select="''">
		</xsl:param>
		<xsl:param name="sequence" select="''">
		</xsl:param>
		<xsl:param name="gentext-key" select="''">
		</xsl:param>
		<xsl:choose>
			<xsl:when test="$pageclass = 'index'">
				<xsl:attribute name="margin-left">
					0pt
				</xsl:attribute>
			</xsl:when>
		</xsl:choose>
		<xsl:variable name="column1">
			<xsl:choose>
				<xsl:when test="$double.sided = 0">
					1
				</xsl:when>
				<xsl:when test="$sequence = 'first' or $sequence = 'odd'">
					1
				</xsl:when>
				<xsl:otherwise>
					3
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:variable name="column3">
			<xsl:choose>
				<xsl:when test="$double.sided = 0">
					3
				</xsl:when>
				<xsl:when test="$sequence = 'first' or $sequence = 'odd'">
					3
				</xsl:when>
				<xsl:otherwise>
					1
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:variable name="candidate">
			<fo:table table-layout="fixed" width="100%">
				<xsl:call-template name="foot.sep.rule">
					<xsl:with-param name="pageclass" select="$pageclass">
					</xsl:with-param>
					<xsl:with-param name="sequence" select="$sequence">
					</xsl:with-param>
					<xsl:with-param name="gentext-key" select="$gentext-key">
					</xsl:with-param>
				</xsl:call-template>
				<fo:table-column column-number="1">
					<xsl:attribute name="column-width">
						<xsl:text>
							proportional-column-width(
						</xsl:text>
						<xsl:call-template name="header.footer.width">
							<xsl:with-param name="location">
								footer
							</xsl:with-param>
							<xsl:with-param name="position" select="$column1">
							</xsl:with-param>
						</xsl:call-template>
						<xsl:text>
							)
						</xsl:text>
					</xsl:attribute>
				</fo:table-column>
				<fo:table-column column-number="2">
					<xsl:attribute name="column-width">
						<xsl:text>
							proportional-column-width(
						</xsl:text>
						<xsl:call-template name="header.footer.width">
							<xsl:with-param name="location">
								footer
							</xsl:with-param>
							<xsl:with-param name="position" select="2">
							</xsl:with-param>
						</xsl:call-template>
						<xsl:text>
							)
						</xsl:text>
					</xsl:attribute>
				</fo:table-column>
				<fo:table-column column-number="3">
					<xsl:attribute name="column-width">
						<xsl:text>
							proportional-column-width(
						</xsl:text>
						<xsl:call-template name="header.footer.width">
							<xsl:with-param name="location">
								footer
							</xsl:with-param>
							<xsl:with-param name="position" select="$column3">
							</xsl:with-param>
						</xsl:call-template>
						<xsl:text>
							)
						</xsl:text>
					</xsl:attribute>
				</fo:table-column>
				<fo:table-body>
					<fo:table-row height="14pt">
						<fo:table-cell display-align="after" text-align="left">
							<xsl:if test="$fop.extensions = 0">
								<xsl:attribute name="relative-align">
									baseline
								</xsl:attribute>
							</xsl:if>
							<fo:block>
								<xsl:call-template name="footer.content">
									<xsl:with-param name="pageclass" select="$pageclass">
									</xsl:with-param>
									<xsl:with-param name="sequence" select="$sequence">
									</xsl:with-param>
									<xsl:with-param name="position" select="'left'">
									</xsl:with-param>
									<xsl:with-param name="gentext-key" select="$gentext-key">
									</xsl:with-param>
								</xsl:call-template>
							</fo:block>
						</fo:table-cell>
						<fo:table-cell display-align="after" text-align="center">
							<xsl:if test="$fop.extensions = 0">
								<xsl:attribute name="relative-align">
									baseline
								</xsl:attribute>
							</xsl:if>
							<fo:block>
								<xsl:call-template name="footer.content">
									<xsl:with-param name="pageclass" select="$pageclass">
									</xsl:with-param>
									<xsl:with-param name="sequence" select="$sequence">
									</xsl:with-param>
									<xsl:with-param name="position" select="'center'">
									</xsl:with-param>
									<xsl:with-param name="gentext-key" select="$gentext-key">
									</xsl:with-param>
								</xsl:call-template>
							</fo:block>
						</fo:table-cell>
						<fo:table-cell display-align="after" text-align="right">
							<xsl:if test="$fop.extensions = 0">
								<xsl:attribute name="relative-align">
									baseline
								</xsl:attribute>
							</xsl:if>
							<fo:block>
								<xsl:call-template name="footer.content">
									<xsl:with-param name="pageclass" select="$pageclass">
									</xsl:with-param>
									<xsl:with-param name="sequence" select="$sequence">
									</xsl:with-param>
									<xsl:with-param name="position" select="'right'">
									</xsl:with-param>
									<xsl:with-param name="gentext-key" select="$gentext-key">
									</xsl:with-param>
								</xsl:call-template>
							</fo:block>
						</fo:table-cell>
					</fo:table-row>
				</fo:table-body>
			</fo:table>
		</xsl:variable>
		<!-- Really output a footer?  book titlepages have no footers at all -->
		<xsl:if test="$gentext-key != 'book'">
			<xsl:copy-of select="$candidate">
			</xsl:copy-of>
		</xsl:if>
	</xsl:template>
	<!-- - - - - - - - - - - - - - - - - -  -->
	<!-- Changing the first page appearance -->
	<!-- - - - - - - - - - - - - - - - - -  -->
	<!--  Changing the font for the authors on titlepage -->
	<xsl:template match="bookinfo/author" mode="book.titlepage.recto.mode">
		<fo:inline color="#0010FF">
			<xsl:attribute name="font-weight">
				bold
			</xsl:attribute>
			<xsl:attribute name="font-size">
				18pt
			</xsl:attribute>
			<xsl:apply-templates mode="titlepage.mode">
			</xsl:apply-templates>
		</fo:inline>
	</xsl:template>
	<!--  The appearance of the Subtitle -->
	<xsl:template match="bookinfo/subtitle" mode="book.titlepage.recto.mode">
		<!-- Main title -->
		<xsl:choose>
			<xsl:when test="@role='main'">
				<fo:block color="#0010FF" space-after="0mm" space-before="20mm">
					<xsl:attribute name="font-weight">
						bold
					</xsl:attribute>
					<xsl:attribute name="font-size">
						38pt
					</xsl:attribute>
					<xsl:apply-templates mode="titlepage.mode">
					</xsl:apply-templates>
				</fo:block>
			</xsl:when>
		</xsl:choose>
		<!-- Subtitle -->
		<xsl:choose>
			<xsl:when test="@role='submain'">
				<fo:block color="#0010FF" space-after="0mm" space-before="0mm">
					<xsl:attribute name="font-weight">
						bold
					</xsl:attribute>
					<xsl:attribute name="font-size">
						20pt
					</xsl:attribute>
					<xsl:apply-templates mode="titlepage.mode">
					</xsl:apply-templates>
				</fo:block>
			</xsl:when>
		</xsl:choose>
		<!-- motto -->
		<xsl:choose>
			<xsl:when test="@role='motto'">
				<fo:block color="#0010FF" space-after="30mm" space-before="-15mm">
					<xsl:attribute name="font-weight">
						bold
					</xsl:attribute>
					<xsl:attribute name="font-size">
						15pt
					</xsl:attribute>
					<xsl:apply-templates mode="titlepage.mode">
					</xsl:apply-templates>
				</fo:block>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<!-- Remove the copyright from the second page, as it appears in the legal notice anyways. -->
	<xsl:template match="copyright" mode="book.titlepage.verso.auto.mode">
	</xsl:template>
	<!-- WARNING : font-size="10pt" was added but should be standard para font size instead!  -->
	<xsl:template match="legalnotice" mode="titlepage.mode">
		<xsl:variable name="id">
			<xsl:call-template name="object.id">
			</xsl:call-template>
		</xsl:variable>
		<fo:block font-size="10pt" id="{$id}" xsl:use-attribute-sets="normal.para.spacing">
			<xsl:call-template name="formal.object.heading">
				<xsl:with-param name="title">
					Legal Notice
				</xsl:with-param>
			</xsl:call-template>
			<xsl:apply-templates mode="titlepage.mode">
			</xsl:apply-templates>
		</fo:block>
	</xsl:template>
	<!-- <xsl:template match="legalnotice" mode="titlepage.mode"/> -->
	<xsl:template match="legalnotice/title" mode="titlepage.mode">
	</xsl:template>
	<xsl:template match="legalnotice/title" mode="titlepage.legalnotice.title.mode">
	</xsl:template>

	<!-- Add the preface on the second page -->
	<!-- <xsl:template match="preface" mode="titlepage.mode">
		<xsl:variable name="id">
		<xsl:call-template name="object.id"/>
		</xsl:variable>
		<fo:block id="{$id}">
		<xsl:apply-templates mode="titlepage.mode"/>
		</fo:block>
		</xsl:template>-->

	<xsl:template name="book.version">
		<fo:block space-after="50mm" text-align="center" font-size="12pt" font-weight="bold">
			<xsl:text>Version</xsl:text>
			<xsl:call-template name="gentext.space" />
			<xsl:copy-of select="$VERSION" />
			<xsl:if test="not($RELEASEDATE = 'RELEASE DATE NOT SET')">
				<xsl:call-template name="gentext.space" />
				<xsl:text>-</xsl:text>
				<xsl:call-template name="gentext.space" />
				<xsl:copy-of select="$RELEASEDATE" />
			</xsl:if>
			<!--This variable is passed as a parameter in the ant task-->
		</fo:block>
	</xsl:template>

	<!--  - - - - - - - - - - - - - - - - - - -->
	<!--  How the first page should look like -->
	<!--  - - - - - - - - - - - - - - - - - - -->
	<xsl:template name="book.titlepage.recto">
		<fo:block break-after="page">
			<!-- The Main Title -->
			<fo:block space-before="-1cm" text-align="center">
				<xsl:apply-templates mode="book.titlepage.recto.mode" select="bookinfo/mediaobject">
				</xsl:apply-templates>
			</fo:block>
			<!-- The Subtitle -->
			<fo:block line-height="15mm" margin-left="0cm" margin-right="0cm" padding-top="5mm" space-before="5mm" text-align="center">
				<xsl:apply-templates mode="book.titlepage.recto.mode" select="bookinfo/subtitle">
				</xsl:apply-templates>
			</fo:block>
			<!-- The Version -->
			<fo:block text-align="center">
				<xsl:call-template name="book.version" />
			</fo:block>
			<!-- The author's name -->
			<fo:block space-before="10mm" text-align="center">
				<xsl:apply-templates mode="book.titlepage.recto.mode" select="bookinfo/author">
				</xsl:apply-templates>
			</fo:block>
			<!-- The three logos, in a 1x3 table: INRIA, UNSA, CNRS/I3S -->
			<fo:table space-before="5mm" table-layout="fixed" width="100%">
				<fo:table-column column-width="proportional-column-width(1)">
				</fo:table-column>
				<fo:table-column column-width="proportional-column-width(1)">
				</fo:table-column>
				<fo:table-column column-width="proportional-column-width(1)">
				</fo:table-column>
				<fo:table-body>
					<fo:table-row>
						<fo:table-cell>
							<fo:block text-align="center">
								<fo:external-graphic>
									<xsl:attribute name="src">
										images/png/logo-INRIA.png
									</xsl:attribute>
									<xsl:attribute name="height">
										40px
									</xsl:attribute>
									<xsl:attribute name="content-height">
										40px
									</xsl:attribute>
								</fo:external-graphic>
							</fo:block>
						</fo:table-cell>
						<fo:table-cell>
							<fo:block text-align="center">
								<fo:external-graphic>
									<xsl:attribute name="src">
										images/png/logo-UNSA.png
									</xsl:attribute>
									<xsl:attribute name="height">
										40px
									</xsl:attribute>
									<xsl:attribute name="content-height">
										40pt
									</xsl:attribute>
								</fo:external-graphic>
							</fo:block>
						</fo:table-cell>
						<fo:table-cell>
							<fo:block text-align="center">
								<fo:external-graphic>
									<xsl:attribute name="src">
										images/png/logo-CNRS.png
									</xsl:attribute>
									<xsl:attribute name="height">
										45px
									</xsl:attribute>
									<xsl:attribute name="content-height">
										45px
									</xsl:attribute>
								</fo:external-graphic>
							</fo:block>
						</fo:table-cell>
					</fo:table-row>
				</fo:table-body>
			</fo:table>
			<!-- The Revision and copyright -->
			<fo:table space-before="5mm" table-layout="fixed" width="100%">
				<fo:table-column column-width="proportional-column-width(1)" />
				<fo:table-column column-width="proportional-column-width(1)" />
				<fo:table-body>
					<fo:table-row>
						<!-- The ObjectWeb Logo -->
						<fo:table-cell>
							<fo:block space-after="15mm" text-align="center">
								<fo:external-graphic>
									<xsl:attribute name="src">
										images/png/logo-OW2.png
									</xsl:attribute>
									<xsl:attribute name="height">
										25pt
									</xsl:attribute>
									<xsl:attribute name="content-height">
										25pt
									</xsl:attribute>
								</fo:external-graphic>
							</fo:block>
						</fo:table-cell>
						<fo:table-cell>
							<fo:block space-after="15mm" text-align="center">
								<fo:external-graphic>
									<xsl:attribute name="src">
										images/png/logo-ActiveEon.png
									</xsl:attribute>
									<xsl:attribute name="height">
										35pt
									</xsl:attribute>
									<xsl:attribute name="content-height">
										35pt
									</xsl:attribute>
								</fo:external-graphic>
							</fo:block>
						</fo:table-cell>
					</fo:table-row>
				</fo:table-body>
			</fo:table>
			<fo:table space-before="5mm" table-layout="fixed" width="100%">
				<fo:table-column column-width="30%" />
				<fo:table-column column-width="70%" />
				<fo:table-body>
					<fo:table-row>
						<fo:table-cell>
							<fo:block text-align="left" font-size="10pt" font-style="italic">
								<xsl:text>Generated</xsl:text>
								<xsl:call-template name="gentext.space" />
								<xsl:text>on</xsl:text>
								<xsl:call-template name="gentext.space" />
								<xsl:copy-of select="$TODAY" />
								<!--This variable is passed as a parameter in the ant task-->
							</fo:block>
						</fo:table-cell>
						<fo:table-cell>
							<fo:block text-align="right"
								font-size="10pt" font-weight="italic">
								<xsl:apply-templates
									mode="book.titlepage.recto.mode" select="bookinfo/copyright" />
							</fo:block>
						</fo:table-cell>
					</fo:table-row>
				</fo:table-body>
			</fo:table>
		</fo:block>
	</xsl:template>
	<!--  - - - - - - - - - - - - - - - - - - -->
	<!--  How the second page should look like -->
	<!--  - - - - - - - - - - - - - - - - - - -->
	<xsl:template name="book.titlepage.verso">
		<xsl:choose>
			<xsl:when test="bookinfo/title">
				<xsl:apply-templates mode="book.titlepage.verso.auto.mode" select="bookinfo/title">
				</xsl:apply-templates>
			</xsl:when>
			<xsl:when test="info/title">
				<xsl:apply-templates mode="book.titlepage.verso.auto.mode" select="info/title">
				</xsl:apply-templates>
			</xsl:when>
			<xsl:when test="title">
				<xsl:apply-templates mode="book.titlepage.verso.auto.mode" select="title">
				</xsl:apply-templates>
			</xsl:when>
		</xsl:choose>
<!--		<xsl:apply-templates mode="book.titlepage.verso.auto.mode" select="bookinfo/corpauthor">-->
<!--		</xsl:apply-templates>-->
<!--		<xsl:apply-templates mode="book.titlepage.verso.auto.mode" select="info/corpauthor">-->
<!--		</xsl:apply-templates>-->
<!--		<xsl:apply-templates mode="book.titlepage.verso.auto.mode" select="bookinfo/authorgroup">-->
<!--		</xsl:apply-templates>-->
<!--		<xsl:apply-templates mode="book.titlepage.verso.auto.mode" select="info/authorgroup">-->
<!--		</xsl:apply-templates>-->
<!--		<xsl:apply-templates mode="book.titlepage.verso.auto.mode" select="bookinfo/author">-->
<!--		</xsl:apply-templates>-->
<!--		<xsl:apply-templates mode="book.titlepage.verso.auto.mode" select="info/author">-->
<!--		</xsl:apply-templates>-->
<!--		<xsl:apply-templates mode="book.titlepage.verso.auto.mode" select="bookinfo/othercredit">-->
<!--		</xsl:apply-templates>-->
<!--		<xsl:apply-templates mode="book.titlepage.verso.auto.mode" select="info/othercredit">-->
<!--		</xsl:apply-templates>-->
<!--		<xsl:apply-templates mode="book.titlepage.verso.auto.mode" select="bookinfo/pubdate">-->
<!--		</xsl:apply-templates>-->
<!--		<xsl:apply-templates mode="book.titlepage.verso.auto.mode" select="info/pubdate">-->
<!--		</xsl:apply-templates>-->
<!--		<xsl:apply-templates mode="book.titlepage.verso.auto.mode" select="bookinfo/copyright">-->
<!--		</xsl:apply-templates>-->
<!--		<xsl:apply-templates mode="book.titlepage.verso.auto.mode" select="info/copyright">-->
<!--		</xsl:apply-templates>-->
<!--		<xsl:apply-templates mode="book.titlepage.verso.auto.mode" select="bookinfo/abstract">-->
<!--		</xsl:apply-templates>-->
<!--		<xsl:apply-templates mode="book.titlepage.verso.auto.mode" select="info/abstract">-->
<!--		</xsl:apply-templates>-->
		<xsl:apply-templates mode="book.titlepage.verso.auto.mode" select="bookinfo/legalnotice">
		</xsl:apply-templates>
		<xsl:apply-templates mode="book.titlepage.verso.auto.mode" select="info/legalnotice">
		</xsl:apply-templates>
<!--		<xsl:apply-templates mode="titlepage.mode" select="preface"/>-->
	</xsl:template>
	<xsl:template name="book.verso.title">
		<fo:block>
			<xsl:apply-templates mode="titlepage.mode">
			</xsl:apply-templates>
		</fo:block>
<!--		<xsl:if test="following-sibling::subtitle|following-sibling::info/subtitle|following-sibling::bookinfo/subtitle">-->
<!--			<fo:block>-->
<!--				<xsl:apply-templates mode="book.verso.subtitle.mode" select="(following-sibling::subtitle|following-sibling::info/subtitle|following-sibling::bookinfo/subtitle)[1]">-->
<!--				</xsl:apply-templates>-->
<!--			</fo:block>-->
<!--		</xsl:if>-->
	</xsl:template>
	<!--<xsl:template match="title" mode="book.titlepage.verso.auto.mode">
		<fo:block xmlns:fo="http://www.w3.org/1999/XSL/Format" xsl:use-attribute-sets="book.titlepage.verso.style" font-size="14.4pt" font-weight="bold" font-family="{$title.fontset}">
		<xsl:call-template name="toto.tutu"/>
		<xsl:call-template name="book.verso.title"/>
		<xsl:call-template name="toto.tutu"/>
		</fo:block>
		</xsl:template>-->
	<!-- - - - - - - - - - - - - - - - - - - - - - - - -->
	<!--        Making Part TOC appear on part pages   -->
	<!-- - - - - - - - - - - - - - - - - - - - - - - - -->
	<!--  force PART TOCs to appear on the same page as the Part title  
		(google gmane.text.docbook.apps Bob Stayton Removing extra blank pages in fo TOC)-->
	<xsl:template name="part.titlepage.before.verso">
		<xsl:variable name="toc.params">
			<xsl:call-template name="find.path.params">
				<xsl:with-param name="table" select="normalize-space($generate.toc)">
				</xsl:with-param>
			</xsl:call-template>
		</xsl:variable>
		<xsl:if test="contains($toc.params, 'toc')">
			<xsl:call-template name="division.toc">
				<xsl:with-param name="toc.context" select=".">
				</xsl:with-param>
			</xsl:call-template>
		</xsl:if>
	</xsl:template>
	<!-- DANGER: THIS MEANS TOCS FOR PARTS ARE FORCED -->
	<!-- Turn off the traditional full part toc -->
	<xsl:template name="generate.part.toc">
	</xsl:template>
	<!-- HOW A PART TOC IS GENERATED -->
	<xsl:template match="part" mode="toc">
		<xsl:param name="toc-context" select=".">
		</xsl:param>
		<xsl:variable name="id">
			<xsl:call-template name="object.id">
			</xsl:call-template>
		</xsl:variable>
		<xsl:variable name="cid">
			<xsl:call-template name="object.id">
				<xsl:with-param name="object" select="$toc-context">
				</xsl:with-param>
			</xsl:call-template>
		</xsl:variable>
		<xsl:call-template name="toc.line">
		</xsl:call-template>
		<xsl:variable name="nodes" select="chapter|appendix|preface|reference|refentry|article|index|glossary|bibliography">
		</xsl:variable>
		<xsl:variable name="depth.from.context" select="count(ancestor::*)-count($toc-context/ancestor::*)">
		</xsl:variable>
		<xsl:if test="$toc.section.depth &gt; 0 and $toc.max.depth &gt; $depth.from.context and $nodes">
			<fo:block id="toc.{$cid}.{$id}">
				<xsl:attribute name="margin-left">
					<xsl:call-template name="set.toc.indent">
					</xsl:call-template>
				</xsl:attribute>
				<xsl:apply-templates mode="toc" select="$nodes">
					<xsl:with-param name="toc-context" select="$toc-context">
					</xsl:with-param>
				</xsl:apply-templates>
			</fo:block>
		</xsl:if>
	</xsl:template>
	<!-- qandaset bug - had to remove some ids. -->
	<xsl:template match="question">
		<xsl:variable name="id">
			<xsl:call-template name="object.id">
			</xsl:call-template>
		</xsl:variable>
		<xsl:variable name="entry.id">
			<xsl:call-template name="object.id">
				<xsl:with-param name="object" select="parent::*">
				</xsl:with-param>
			</xsl:call-template>
		</xsl:variable>
		<xsl:variable name="label_and_text">
			<xsl:apply-templates mode="label.markup" select=".">
			</xsl:apply-templates>
			<xsl:apply-templates mode="intralabel.punctuation" select=".">
			</xsl:apply-templates>
			<xsl:call-template name="gentext.space">
			</xsl:call-template>
			<xsl:apply-templates select="*[local-name(.)!='label']">
			</xsl:apply-templates>
		</xsl:variable>
		<fo:block id="{$id}" xsl:use-attribute-sets="question.title.properties">
			<xsl:value-of select="$label_and_text">
			</xsl:value-of>
		</fo:block>
	</xsl:template>
	<!-- qandaset bug - had to remove some ids. -->
	<xsl:template match="answer">
		<xsl:variable name="entry.id">
			<xsl:call-template name="object.id">
				<xsl:with-param name="object" select="parent::*">
				</xsl:with-param>
			</xsl:call-template>
		</xsl:variable>
		<xsl:variable name="deflabel">
			<xsl:value-of select="(ancestor-or-self::*[@defaultlabel])[last()]/@defaultlabel">
			</xsl:value-of>
		</xsl:variable>
		<fo:block id="{$entry.id}">
			<xsl:choose>
				<xsl:when test="$deflabel = 'none'">
					<xsl:message>
						<xsl:text>
							qandaentry: 'answer' has no text!
						</xsl:text>
						<xsl:copy-of select=".">
						</xsl:copy-of>
					</xsl:message>
					<fo:block>
					</fo:block>
				</xsl:when>
				<xsl:otherwise>
					<fo:block>
						<xsl:variable name="answer.label">
							<xsl:apply-templates mode="label.markup" select=".">
							</xsl:apply-templates>
						</xsl:variable>
						<xsl:copy-of select="$answer.label">
						</xsl:copy-of>
					</fo:block>
				</xsl:otherwise>
			</xsl:choose>
		</fo:block>
		<fo:block>
			<xsl:apply-templates select="*[local-name(.)!='label']">
			</xsl:apply-templates>
		</fo:block>
	</xsl:template>
	<!--  more Q&A specifics  -->
	<xsl:template match="qandaset">
		<xsl:variable name="id">
			<xsl:call-template name="object.id">
			</xsl:call-template>
		</xsl:variable>
		<xsl:variable name="label-width">
			<xsl:call-template name="dbfo-attribute">
				<xsl:with-param name="pis" select="processing-instruction('dbfo')">
				</xsl:with-param>
				<xsl:with-param name="attribute" select="'label-width'">
				</xsl:with-param>
			</xsl:call-template>
		</xsl:variable>
		<xsl:variable name="label-length">
			<xsl:choose>
				<xsl:when test="$label-width != ''">
					<xsl:value-of select="$label-width">
					</xsl:value-of>
				</xsl:when>
				<xsl:when test="descendant::label">
					<xsl:call-template name="longest.term">
						<xsl:with-param name="terms" select="descendant::label">
						</xsl:with-param>
						<xsl:with-param name="maxlength" select="20">
						</xsl:with-param>
					</xsl:call-template>
					<xsl:text>
						em * 0.50
					</xsl:text>
				</xsl:when>
				<xsl:otherwise>
					2.5em
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<!-- At the beginning of the qandaset, output a TOC -->
		<fo:block>
			<xsl:attribute name="margin-left">
				<xsl:call-template name="set.toc.indent">
					<xsl:with-param name="reldepth" select="2">
					</xsl:with-param>
				</xsl:call-template>
			</xsl:attribute>
			<xsl:call-template name="component.toc">
			</xsl:call-template>
			<xsl:call-template name="component.toc.separator">
			</xsl:call-template>
		</fo:block>
		<fo:block id="{$id}">
			<xsl:if test="blockinfo/title|info/title|title">
			</xsl:if>
			<xsl:apply-templates select="*[name(.) != 'title'                                  and name(.) != 'titleabbrev'                                  and name(.) != 'qandadiv'                                  and name(.) != 'qandaentry']">
			</xsl:apply-templates>
			<xsl:if test="qandadiv">
				<xsl:apply-templates select="qandadiv">
				</xsl:apply-templates>
			</xsl:if>
			<xsl:if test="qandaentry">
				<xsl:apply-templates select="qandaentry">
				</xsl:apply-templates>
			</xsl:if>
		</fo:block>
	</xsl:template>
	<!--  more Q&A specifics  -->
	<xsl:template match="qandadiv">
		<xsl:variable name="id">
			<xsl:call-template name="object.id">
			</xsl:call-template>
		</xsl:variable>
		<xsl:variable name="label-width">
			<xsl:call-template name="dbfo-attribute">
				<xsl:with-param name="pis" select="processing-instruction('dbfo')">
				</xsl:with-param>
				<xsl:with-param name="attribute" select="'label-width'">
				</xsl:with-param>
			</xsl:call-template>
		</xsl:variable>
		<xsl:variable name="label-length">
			<xsl:choose>
				<xsl:when test="$label-width != ''">
					<xsl:value-of select="$label-width">
					</xsl:value-of>
				</xsl:when>
				<xsl:when test="descendant::label">
					<xsl:call-template name="longest.term">
						<xsl:with-param name="terms" select="descendant::label">
						</xsl:with-param>
						<xsl:with-param name="maxlength" select="20">
						</xsl:with-param>
					</xsl:call-template>
					<xsl:text>
						em * 0.50
					</xsl:text>
				</xsl:when>
				<xsl:otherwise>
					2.5em
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<fo:block id="{$id}">
			<xsl:if test="blockinfo/title|info/title|title">
				<fo:block xsl:use-attribute-sets="qandadiv.title.properties">
					<xsl:apply-templates mode="label.markup" select=".">
					</xsl:apply-templates>
					<xsl:value-of select="$autotoc.label.separator">
					</xsl:value-of>
					<xsl:apply-templates mode="title.markup" select=".">
					</xsl:apply-templates>
				</fo:block>
			</xsl:if>
			<xsl:apply-templates select="*[name(.) != 'title'                                  and name(.) != 'titleabbrev'                                  and name(.) != 'qandaentry']">
			</xsl:apply-templates>
			<xsl:if test="qandaentry">
				<xsl:apply-templates select="qandaentry">
				</xsl:apply-templates>
			</xsl:if>
		</fo:block>
	</xsl:template>

	<!-- emphasis in programlistings contains color, specified by the @role -->
	<xsl:template match="emphasis">
		<xsl:variable name="depth">
			<xsl:call-template name="dot.count">
				<xsl:with-param name="string">
					<xsl:number level="multiple">
					</xsl:number>
				</xsl:with-param>
			</xsl:call-template>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="@role='bold' or @role='' or @role='strong'">
				<xsl:call-template name="inline.boldseq"/>
			</xsl:when>
			<!--  ITALICS -->
			<xsl:when test="@role='italics'">
				<xsl:call-template name="inline.italicseq">
				</xsl:call-template>
			</xsl:when>
			<!--  UNDERLINE  -->
			<xsl:when test="@role='underline'">
				<fo:inline text-decoration="underline">
					<xsl:call-template name="inline.charseq">
					</xsl:call-template>
				</fo:inline>
			</xsl:when>
			<!--  STRIKETHROUGH  -->
			<xsl:when test="@role='strikethrough'">
				<fo:inline text-decoration="line-through">
					<xsl:call-template name="inline.charseq">
					</xsl:call-template>
				</fo:inline>
			</xsl:when>
			<!--  WITHIN PROGRAMLISTINGS (not bold, but colorized)  -->
			<!--  Added this test, which can be triggered after code beautifier parsing -->
			<xsl:when test="@role='keyword' or @role='codeword' or @role='typeword' or @role='comment' or @role='string'">
				<xsl:call-template name="myinline.emphasis">
					<xsl:with-param name="role" select="@role">
					</xsl:with-param>
				</xsl:call-template>
			</xsl:when>
			<!--  SHOULD NEVER HAPPEN, role not recognized -->
			<xsl:otherwise>
				<xsl:call-template name="inline.boldseq">
				</xsl:call-template>
				<xsl:choose>
					<xsl:when test="@role">
						<xsl:message>
							<!-- This should never happen. -->
							Emphasis with role=
							<xsl:value-of select="@role">
							</xsl:value-of>
							is not allowed ==&gt;
							<xsl:value-of select="..">
							</xsl:value-of>
						</xsl:message>
					</xsl:when>
				</xsl:choose>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<!-- A way to color in the emphasis, key being the 'role' attribute in {keyword,codeword,typeword,comment,string} -->
	<xsl:template name="myinline.emphasis">
		<xsl:param name="role" select="''">
		</xsl:param>
		<xsl:param name="content">
			<xsl:apply-templates>
			</xsl:apply-templates>
		</xsl:param>
		<fo:inline>
			<xsl:if test="@id">
				<xsl:attribute name="id">
					<xsl:value-of select="@id">
					</xsl:value-of>
				</xsl:attribute>
			</xsl:if>
			<xsl:if test="@role = 'comment'">
				<xsl:attribute name="font-style">
					italic
				</xsl:attribute>
			</xsl:if>
			<xsl:attribute name="color">
				<xsl:choose>
					<xsl:when test="@role = 'comment'">
						#018101
					</xsl:when>
					<xsl:when test="@role = 'keyword'">
						#0101ff
					</xsl:when>
					<xsl:when test="@role = 'codeword'">
						#0101ff
					</xsl:when>
					<xsl:when test="@role = 'typeword'">
						#931793
					</xsl:when>
					<xsl:when test="@role = 'string'">
						#ff2aff
					</xsl:when>
					<xsl:otherwise>
						#F00000
					</xsl:otherwise>
					<!-- This should never happen. -->
				</xsl:choose>
			</xsl:attribute>
			<xsl:if test="@dir">
				<xsl:attribute name="direction">
					<xsl:choose>
						<xsl:when test="@dir = 'ltr' or @dir = 'lro'">
							ltr
						</xsl:when>
						<xsl:otherwise>
							rtl
						</xsl:otherwise>
					</xsl:choose>
				</xsl:attribute>
			</xsl:if>
			<xsl:copy-of select="$content">
			</xsl:copy-of>
		</fo:inline>
	</xsl:template>
	<!-- - - - - - - - - - - - - - - - - - - - - -  -->
	<!-- adding the questions of the FAQ in the TOC -->
	<!-- - - - - - - - - - - - - - - - - - - - - -  -->
	<!-- How to write a toc, for an appendix -->
	<xsl:template match="appendix" mode="toc">
		<xsl:param name="toc-context" select=".">
		</xsl:param>
		<xsl:variable name="id">
			<xsl:call-template name="object.id">
			</xsl:call-template>
		</xsl:variable>
		<xsl:variable name="cid">
			<xsl:call-template name="object.id">
				<xsl:with-param name="object" select="$toc-context">
				</xsl:with-param>
			</xsl:call-template>
		</xsl:variable>
		<xsl:call-template name="toc.line">
		</xsl:call-template>
		<xsl:variable name="nodes" select="section|sect1                                      |simplesect[$simplesect.in.toc != 0]                                      |refentry|qandaset|qandadiv">
		</xsl:variable>
		<xsl:variable name="depth.from.context" select="count(ancestor::*)-count($toc-context/ancestor::*)">
		</xsl:variable>
		<xsl:if test="$toc.section.depth &gt; 0 and $toc.max.depth &gt; $depth.from.context and $nodes">
			<fo:block id="toc.{$cid}.{$id}">
				<xsl:attribute name="margin-left">
					<xsl:call-template name="set.toc.indent">
					</xsl:call-template>
				</xsl:attribute>
				<xsl:apply-templates mode="toc" select="$nodes">
					<xsl:with-param name="toc-context" select="$toc-context">
					</xsl:with-param>
				</xsl:apply-templates>
			</fo:block>
		</xsl:if>
	</xsl:template>
	<xsl:template name="component.toc">
		<xsl:param name="toc-context" select=".">
		</xsl:param>
		<xsl:variable name="id">
			<xsl:call-template name="object.id">
			</xsl:call-template>
		</xsl:variable>
		<xsl:variable name="cid">
			<xsl:call-template name="object.id">
				<xsl:with-param name="object" select="$toc-context">
				</xsl:with-param>
			</xsl:call-template>
		</xsl:variable>
		<xsl:variable name="nodes" select="section|sect1|refentry|article|bibliography|glossary|appendix|index|qandaset|qandadiv">
		</xsl:variable>
		<xsl:if test="$nodes">
			<fo:block id="toc...{$id}" xsl:use-attribute-sets="toc.margin.properties">
				<xsl:call-template name="table.of.contents.titlepage">
				</xsl:call-template>
				<xsl:apply-templates mode="toc" select="$nodes">
					<xsl:with-param name="toc-context" select="$toc-context">
					</xsl:with-param>
				</xsl:apply-templates>
			</fo:block>
		</xsl:if>
	</xsl:template>
	<xsl:template match="question" mode="toc">
		<xsl:variable name="id">
			<xsl:call-template name="object.id">
			</xsl:call-template>
		</xsl:variable>
		<xsl:variable name="label">
			<xsl:apply-templates mode="label.markup" select=".">
			</xsl:apply-templates>
		</xsl:variable>
		<xsl:variable name="markup">
			<xsl:value-of select=".">
			</xsl:value-of>
		</xsl:variable>
		<fo:block end-indent="{$toc.indent.width}pt" last-line-end-indent="15pt" text-align="start" text-align-last="justify">
			<!-- Hacking the question toc line indent, to skip the qandaset gap -->
			<xsl:attribute name="margin-left">
				<xsl:call-template name="set.toc.indent">
					<xsl:with-param name="reldepth" select="3">
					</xsl:with-param>
				</xsl:call-template>
			</xsl:attribute>
			<fo:inline keep-with-next.within-line="always">
				<fo:basic-link internal-destination="{$id}">
					<xsl:if test="$label != ''">
						<xsl:copy-of select="$label">
						</xsl:copy-of>
						<xsl:value-of select="$autotoc.label.separator">
						</xsl:value-of>
					</xsl:if>
					<xsl:copy-of select="$markup">
					</xsl:copy-of>
				</fo:basic-link>
			</fo:inline>
			<fo:inline keep-together.within-line="1">
				<xsl:call-template name="gentext.space">
				</xsl:call-template>
				<fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern="dots" leader-pattern-width="3pt">
				</fo:leader>
				<xsl:call-template name="gentext.space">
				</xsl:call-template>
				<fo:basic-link internal-destination="{$id}">
					<fo:page-number-citation ref-id="{$id}">
					</fo:page-number-citation>
				</fo:basic-link>
			</fo:inline>
		</fo:block>
	</xsl:template>
	<xsl:template match="qandadiv" mode="toc">
		<xsl:call-template name="toc.line">
		</xsl:call-template>
		<!--  Should be done through a nodes scheme, but it's harder -->
		<!--  Indeed, I'm skipping out the direct sons, to have the question grandchildren only-->
		<xsl:for-each select="qandaentry/question">
			<xsl:apply-templates mode="toc" select=".">
			</xsl:apply-templates>
		</xsl:for-each>
	</xsl:template>
	<!-- Representation of a qandaset and siblings in a TOC -->
	<xsl:template match="qandaset" mode="toc">
		<xsl:param name="toc-context" select=".">
		</xsl:param>
		<xsl:variable name="id">
			<xsl:call-template name="object.id">
			</xsl:call-template>
		</xsl:variable>
		<xsl:variable name="cid">
			<xsl:call-template name="object.id">
				<xsl:with-param name="object" select="$toc-context">
				</xsl:with-param>
			</xsl:call-template>
		</xsl:variable>
		<!-- This is the line that makes qandasets appear in the TOC. Removed on purpose.  -->
		<!--   <xsl:call-template name="toc.line"/> -->
		<!-- In fact, we only want the siblings, not the qandaset -->
		<xsl:variable name="nodes" select="qandadiv|qandaentry/question">
		</xsl:variable>
		<xsl:if test="$nodes">
			<fo:block id="toc.{$cid}.{$id}">
				<!-- Removed to leave take the room not used by the hidden qandasets.
					<xsl:attribute name="margin-left">
					<xsl:call-template name="set.toc.indent"/>
					</xsl:attribute>
				-->
				<xsl:apply-templates mode="toc" select="$nodes">
					<xsl:with-param name="toc-context" select="$toc-context">
					</xsl:with-param>
				</xsl:apply-templates>
			</fo:block>
		</xsl:if>
	</xsl:template>
	<!-- Just a copy of labels.xsl, line 272 which applied to 'sect1' -->
	<!-- I also needed to skip the parent qandaset, so a ".." is turned into a "../.." -->
	<xsl:template match="qandadiv" mode="label.markup">
		<!-- if the parent is a component, maybe label that too -->
		<xsl:variable name="parent.is.component">
			<xsl:call-template name="is.component">
				<xsl:with-param name="node" select="../..">
				</xsl:with-param>
			</xsl:call-template>
		</xsl:variable>
		<xsl:variable name="component.label">
			<xsl:if test="$section.label.includes.component.label != 0                   and $parent.is.component != 0">
				<xsl:variable name="parent.label">
					<xsl:apply-templates mode="label.markup" select="../..">
					</xsl:apply-templates>
				</xsl:variable>
				<xsl:if test="$parent.label != ''">
					<xsl:apply-templates mode="label.markup" select="../..">
					</xsl:apply-templates>
					<xsl:apply-templates mode="intralabel.punctuation" select="../..">
					</xsl:apply-templates>
				</xsl:if>
			</xsl:if>
		</xsl:variable>
		<xsl:variable name="is.numbered">
			<xsl:call-template name="label.this.section">
			</xsl:call-template>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="@label">
				<xsl:value-of select="@label">
				</xsl:value-of>
			</xsl:when>
			<xsl:when test="$is.numbered != 0">
				<xsl:variable name="format">
					<xsl:call-template name="autolabel.format">
						<xsl:with-param name="format" select="$section.autolabel">
						</xsl:with-param>
					</xsl:call-template>
				</xsl:variable>
				<xsl:copy-of select="$component.label">
				</xsl:copy-of>
				<xsl:number count="qandadiv" format="{$format}">
				</xsl:number>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="question" mode="label.markup">
		<xsl:variable name="lparent" select="(ancestor::set|ancestor::book|ancestor::chapter|ancestor::appendix|ancestor::preface|ancestor::qandaset|ancestor::qandadiv|ancestor::section|ancestor::simplesect|ancestor::sect1|ancestor::sect2|ancestor::sect3|ancestor::sect4|ancestor::sect5|ancestor::refsect1|ancestor::refsect2|ancestor::refsect3)[last()]">
		</xsl:variable>
		<xsl:variable name="lparent.prefix">
			<xsl:apply-templates mode="label.markup" select="$lparent">
			</xsl:apply-templates>
		</xsl:variable>
		<xsl:variable name="prefix">
			<xsl:if test="$qanda.inherit.numeration != 0">
				<xsl:choose>
					<xsl:when test="ancestor::qandadiv">
						<xsl:apply-templates mode="label.markup" select="ancestor::qandadiv[1]">
						</xsl:apply-templates>
						<xsl:apply-templates mode="intralabel.punctuation" select="ancestor::qandadiv[1]">
						</xsl:apply-templates>
					</xsl:when>
					<xsl:when test="$lparent.prefix != ''">
						<xsl:apply-templates mode="label.markup" select="$lparent">
						</xsl:apply-templates>
						<xsl:apply-templates mode="intralabel.punctuation" select="$lparent">
						</xsl:apply-templates>
					</xsl:when>
				</xsl:choose>
			</xsl:if>
		</xsl:variable>
		<xsl:variable name="inhlabel" select="ancestor-or-self::qandadiv/@defaultlabel[1]">
		</xsl:variable>
		<xsl:variable name="deflabel">
			<xsl:choose>
				<xsl:when test="$inhlabel != ''">
					<xsl:value-of select="$inhlabel">
					</xsl:value-of>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="$qanda.defaultlabel">
					</xsl:value-of>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:variable name="label" select="label">
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="count($label)&gt;0">
				<xsl:apply-templates select="$label">
				</xsl:apply-templates>
			</xsl:when>
			<xsl:when test="$deflabel = 'number' and local-name(.) = 'question'">
				<xsl:value-of select="$prefix">
				</xsl:value-of>
				<xsl:number count="qandaentry" format="1" level="multiple">
				</xsl:number>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="legalnotice">
		<xsl:apply-templates>
		</xsl:apply-templates>
	</xsl:template>
	<!-- I like emails to be mailto: pointers  -->
	<!-- this emailF trick is contrived - I want emails in general, including in.address mode, to appear the same  -->
	<xsl:template name="emailF">
		<xsl:call-template name="inline.charseq">
			<xsl:with-param name="content">
				<fo:inline hyphenate="false" keep-together.within-line="1" color="blue">
					<fo:basic-link>
						<xsl:attribute name="external-destination">
							mailto:
							<xsl:value-of select=".">
							</xsl:value-of>
						</xsl:attribute>
						<xsl:apply-templates>
						</xsl:apply-templates>
					</fo:basic-link>
				</fo:inline>
			</xsl:with-param>
		</xsl:call-template>
	</xsl:template>
	<xsl:template match="email">
		<xsl:call-template name="emailF" />
	</xsl:template>
	<xsl:template match="email" mode="in.address">
		<fo:block>
			<xsl:text>e-mail:</xsl:text>
			<xsl:call-template name="gentext.space" />
			<xsl:call-template name="emailF" />
		</fo:block>
	</xsl:template>
	<xsl:template match="phone|fax" mode="in.address">
		<fo:block>
			<xsl:value-of select="name(.)">
			</xsl:value-of>
			<xsl:text>:</xsl:text>
			<xsl:call-template name="gentext.space" />
			<xsl:call-template name="inline.charseq">
			</xsl:call-template>
		</fo:block>
	</xsl:template>
	<!-- Created a new mode, "in.address", which adds a fo block around the contents. -->
	<xsl:template match="personname|country" mode="in.address">
		<fo:block>
			<xsl:apply-templates select="."/>
		</fo:block>
	</xsl:template>

	<xsl:template match="street" mode="in.address">
		<fo:block>
			<xsl:apply-templates select="."/>
			<xsl:if test="not(count(parent::node()/pob) = 0)">
				<xsl:text>,</xsl:text>
				<xsl:call-template name="gentext.space" />
				<xsl:apply-templates select="parent::node()/pob"/>
			</xsl:if>
		</fo:block>
	</xsl:template>

	<xsl:template match="pob" mode="in.address">
		<xsl:if test="count(parent::node()/street) = 0">
			<fo:block>
				<xsl:apply-templates select="."/>
			</fo:block>
		</xsl:if>
	</xsl:template>

	<xsl:template match="postcode" mode="in.address">
		<fo:block>
			<xsl:apply-templates select="."/>
			<xsl:if test="not(count(parent::node()/city) = 0)">
				<xsl:call-template name="gentext.space" />
				<xsl:apply-templates select="parent::node()/city"/>
			</xsl:if>
		</fo:block>
	</xsl:template>

	<xsl:template match="city" mode="in.address">
		<xsl:if test="count(parent::node()/postcode) = 0">
			<fo:block>
				<xsl:apply-templates select="."/>
			</fo:block>
		</xsl:if>
	</xsl:template>

	<!-- Address had no dedicated template, so creating one -->
	<!-- Modification of fo/verbatim.xsl Line #158 -->
	<xsl:template match="address">
		<xsl:variable name="id">
			<xsl:call-template name="object.id" />
		</xsl:variable>
		<fo:block id="{$id}" space-before="0.5em">
<!--			<fo:block>-->
<!--				<xsl:apply-templates select="personname"/>-->
<!--			</fo:block>-->
<!--			<fo:block>-->
<!--				<xsl:apply-templates select="street"/>-->
<!--				<xsl:if test="pob">-->
<!--					<xsl:text>,</xsl:text>-->
<!--					<xsl:call-template name="gentext.space" />-->
<!--					<xsl:apply-templates select="pob"/>-->
<!--				</xsl:if>-->
<!--			</fo:block>-->
<!--			<fo:block>-->
<!--				<xsl:apply-templates select="postcode"/>-->
<!--				<xsl:call-template name="gentext.space" />-->
<!--				<xsl:apply-templates select="city"/>-->
<!--			</fo:block>-->
<!--			<fo:block>-->
<!--				<xsl:apply-templates select="country"/>-->
<!--				<xsl:apply-templates select="phone|fax|email" mode="in.address" />-->
<!--			</fo:block>-->
			<xsl:apply-templates select="*" mode="in.address" />
<!--			<xsl:for-each select="*">-->
<!--				<xsl:message>-->
<!--					<xsl:text> In ADDRESS, </xsl:text><xsl:value-of select="name(.)" /> <xsl:value-of select="." /> -->
<!--				</xsl:message>-->
<!--			</xsl:for-each>-->
		</fo:block>
	</xsl:template>
	<!-- //FIXME  change ulink to uri -->
	<!-- copy of xref.xsl, line 783. The link on [url] is also clickeable-->
	<xsl:template match="ulink" name="ulink">
		<fo:basic-link xsl:use-attribute-sets="xref.properties">
			<xsl:attribute name="external-destination">
				<xsl:call-template name="fo-external-image">
					<xsl:with-param name="filename" select="@url">
					</xsl:with-param>
				</xsl:call-template>
			</xsl:attribute>
			<xsl:choose>
				<xsl:when test="count(child::node())=0">
					<xsl:call-template name="hyphenate-url">
						<xsl:with-param name="url" select="@url">
						</xsl:with-param>
					</xsl:call-template>
				</xsl:when>
				<xsl:otherwise>
					<xsl:apply-templates>
					</xsl:apply-templates>
				</xsl:otherwise>
			</xsl:choose>
			<xsl:if test="count(child::node()) != 0 and string(.) != @url and $ulink.show != 0">
				<!-- yes, show the URI -->
				<xsl:choose>
					<xsl:when test="$ulink.footnotes != 0 and not(ancestor::footnote)">
						<fo:footnote>
							<xsl:call-template name="ulink.footnote.number">
							</xsl:call-template>
							<fo:footnote-body xsl:use-attribute-sets="footnote.properties">
								<fo:block>
									<xsl:call-template name="ulink.footnote.number">
									</xsl:call-template>
									<xsl:text>
									</xsl:text>
									<fo:inline>
										<xsl:value-of select="@url">
										</xsl:value-of>
									</fo:inline>
								</fo:block>
							</fo:footnote-body>
						</fo:footnote>
					</xsl:when>
					<xsl:otherwise>
						<fo:inline hyphenate="false">
							<xsl:text>
								[
							</xsl:text>
							<xsl:call-template name="hyphenate-url">
								<xsl:with-param name="url" select="@url">
								</xsl:with-param>
							</xsl:call-template>
							<xsl:text>
								]
							</xsl:text>
						</fo:inline>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:if>
		</fo:basic-link>
	</xsl:template>
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<!--    Treat differently if @role=javaFileSrc or xmlFileSrc     -->
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<xsl:template match="xref" name="xref">
		<!--  replace all '/' by '.' in the reference name  -->
		<xsl:variable name="endRef">
			<xsl:value-of select="translate(@linkend,'/','.')">
			</xsl:value-of>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="@role='javaFileSrc' or @role='xmlFileSrc'">
				<!--<xsl:message>
					<xsl:text> file available: </xsl:text><xsl:value-of select="$endRef"/>
					</xsl:message>-->
				<xsl:call-template name="normal.xref">
					<xsl:with-param name="linkend" select="$endRef">
					</xsl:with-param>
				</xsl:call-template>
			</xsl:when>
			<xsl:otherwise>
				<xsl:call-template name="normal.xref">
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<!-- Copied from xref.xsl, first template. Modified to take role attributes into account -->
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<xsl:template name="normal.xref">
		<xsl:param name="linkend" select="@linkend">
		</xsl:param>
		<xsl:variable name="targets" select="key('id',$linkend)">
		</xsl:variable>
		<xsl:variable name="target" select="$targets[1]">
		</xsl:variable>
		<xsl:variable name="refelem" select="local-name($target)">
		</xsl:variable>
		<xsl:call-template name="check.id.unique">
			<xsl:with-param name="linkend" select="$linkend">
			</xsl:with-param>
		</xsl:call-template>
		<xsl:variable name="xrefstyle">
			<xsl:choose>
				<xsl:when test="@role and not(@xrefstyle) and $use.role.as.xrefstyle != 0">
					<xsl:value-of select="@role">
					</xsl:value-of>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="@xrefstyle">
					</xsl:value-of>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="$refelem=''">
				<xsl:message>
					<xsl:text>
						XRef to nonexistent id:
					</xsl:text>
					<xsl:value-of select="$linkend">
					</xsl:value-of>
				</xsl:message>
				<xsl:text>
					???
				</xsl:text>
			</xsl:when>
			<xsl:when test="@endterm">
				<fo:basic-link internal-destination="{$linkend}" xsl:use-attribute-sets="xref.properties">
					<xsl:variable name="etargets" select="key('id',@endterm)">
					</xsl:variable>
					<xsl:variable name="etarget" select="$etargets[1]">
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="count($etarget) = 0">
							<xsl:message>
								<xsl:value-of select="count($etargets)">
								</xsl:value-of>
								<xsl:text>
									Endterm points to nonexistent ID:
								</xsl:text>
								<xsl:value-of select="@endterm">
								</xsl:value-of>
							</xsl:message>
							<xsl:text>
								???
							</xsl:text>
						</xsl:when>
						<xsl:otherwise>
							<xsl:apply-templates mode="endterm" select="$etarget">
							</xsl:apply-templates>
						</xsl:otherwise>
					</xsl:choose>
				</fo:basic-link>
			</xsl:when>
			<xsl:when test="$target/@xreflabel">
				<fo:basic-link internal-destination="{$linkend}" xsl:use-attribute-sets="xref.properties">
					<xsl:call-template name="xref.xreflabel">
						<xsl:with-param name="target" select="$target">
						</xsl:with-param>
					</xsl:call-template>
				</fo:basic-link>
			</xsl:when>
			<xsl:otherwise>
				<xsl:if test="not(parent::citation)">
					<xsl:apply-templates mode="xref-to-prefix" select="$target">
					</xsl:apply-templates>
				</xsl:if>
				<fo:basic-link internal-destination="{$linkend}" xsl:use-attribute-sets="xref.properties">
					<xsl:apply-templates mode="xref-to" select="$target">
						<xsl:with-param name="referrer" select=".">
						</xsl:with-param>
						<xsl:with-param name="xrefstyle" select="$xrefstyle">
						</xsl:with-param>
					</xsl:apply-templates>
				</fo:basic-link>
				<xsl:if test="not(parent::citation)">
					<xsl:apply-templates mode="xref-to-suffix" select="$target">
					</xsl:apply-templates>
				</xsl:if>
			</xsl:otherwise>
		</xsl:choose>
		<!-- Add standard page reference? -->
		<xsl:if test="not(starts-with(normalize-space($xrefstyle), 'select:') and (contains($xrefstyle, 'page') or contains($xrefstyle, 'Page'))) and ( $insert.xref.page.number = 'yes' or $insert.xref.page.number = '1') or local-name($target) = 'para'">
			<xsl:apply-templates mode="page.citation" select="$target">
				<xsl:with-param name="id" select="$linkend">
				</xsl:with-param>
			</xsl:apply-templates>
		</xsl:if>
	</xsl:template>
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - -->
	<!-- - - putting the list of figures before the TOC  -->
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - -->
	<!-- use division.xsl: <xsl:template match="book"> -->
	<xsl:template name="division.toc">
		<xsl:param name="toc-context" select=".">
		</xsl:param>
		<xsl:variable name="cid">
			<xsl:call-template name="object.id">
				<xsl:with-param name="object" select="$toc-context">
				</xsl:with-param>
			</xsl:call-template>
		</xsl:variable>
		<xsl:variable name="toc.params">
			<xsl:call-template name="find.path.params">
				<xsl:with-param name="node" select=".">
				</xsl:with-param>
				<xsl:with-param name="table" select="normalize-space($generate.toc)">
				</xsl:with-param>
			</xsl:call-template>
		</xsl:variable>
		<xsl:variable name="nodes" select="$toc-context/part|$toc-context/reference|$toc-context/preface|$toc-context/chapter|$toc-context/appendix|$toc-context/article|$toc-context/bibliography|$toc-context/glossary|$toc-context/index">
		</xsl:variable>
		<xsl:if test="$nodes">
			<fo:block id="toc...{$cid}" space-after="3mm" xsl:use-attribute-sets="toc.margin.properties">
				<!-- 				<xsl:if test="$axf.extensions != 0">
					<xsl:attribute name="axf:outline-level">1</xsl:attribute>
					<xsl:attribute name="axf:outline-expand">false</xsl:attribute>
					<xsl:attribute name="axf:outline-title">
          <xsl:call-template name="gentext">
            <xsl:with-param name="key" select="'TableofContents'" />
          </xsl:call-template>
        </xsl:attribute>
				</xsl:if>  -->
				<xsl:call-template name="table.of.contents.titlepage">
				</xsl:call-template>
				<!-- Possible links to the tables of (figure table example equation procedure)  -->
				<xsl:if test="contains($toc.params,'figure') and .//figure">
					<xsl:call-template name="special.toc.line">
						<xsl:with-param name="id" select="'lot...figure...toto'">
						</xsl:with-param>
						<xsl:with-param name="label" select="'List of figures'">
						</xsl:with-param>
					</xsl:call-template>
				</xsl:if>
				<xsl:if test="contains($toc.params,'table') and .//table">
					<xsl:call-template name="special.toc.line">
						<xsl:with-param name="id" select="'lot...table...toto'">
						</xsl:with-param>
						<xsl:with-param name="label" select="'List of tables'">
						</xsl:with-param>
					</xsl:call-template>
				</xsl:if>
				<xsl:if test="contains($toc.params,'example') and .//example">
					<xsl:call-template name="special.toc.line">
						<xsl:with-param name="id" select="'lot...example...toto'">
						</xsl:with-param>
						<xsl:with-param name="label" select="'List of examples'">
						</xsl:with-param>
					</xsl:call-template>
				</xsl:if>
				<xsl:if test="contains($toc.params,'equation') and .//equation">
					<xsl:call-template name="special.toc.line">
						<xsl:with-param name="id" select="'lot...equation...toto'">
						</xsl:with-param>
						<xsl:with-param name="label" select="'List of equations'">
						</xsl:with-param>
					</xsl:call-template>
				</xsl:if>
				<xsl:if test="contains($toc.params,'procedure') and .//procedure">
					<xsl:call-template name="special.toc.line">
						<xsl:with-param name="id" select="'lot...procedure...toto'">
						</xsl:with-param>
						<xsl:with-param name="label" select="'List of procedures'">
						</xsl:with-param>
					</xsl:call-template>
				</xsl:if>
				<xsl:apply-templates mode="toc" select="$nodes">
					<xsl:with-param name="toc-context" select="$toc-context">
					</xsl:with-param>
				</xsl:apply-templates>
			</fo:block>
		</xsl:if>
	</xsl:template>
	<xsl:template name="special.toc.line">
		<xsl:param name="id" select="'???'">
		</xsl:param>
		<xsl:param name="label" select="'???'">
		</xsl:param>
		<xsl:variable name="line">
			<fo:inline keep-with-next.within-line="always">
				<xsl:attribute name="font-weight">
					bold
				</xsl:attribute>
				<xsl:attribute name="font-size">
					12pt
				</xsl:attribute>
				<xsl:attribute name="color">
					#00257E
				</xsl:attribute>
				<fo:basic-link internal-destination="{$id}">
					<xsl:copy-of select="$label">
					</xsl:copy-of>
					<xsl:call-template name="gentext.space">
					</xsl:call-template>
					<fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern="dots" leader-pattern-width="3pt">
					</fo:leader>
					<xsl:call-template name="gentext.space">
					</xsl:call-template>
					<fo:page-number-citation ref-id="{$id}">
					</fo:page-number-citation>
				</fo:basic-link>
			</fo:inline>
		</xsl:variable>
		<fo:block end-indent="{$toc.indent.width}pt" last-line-end-indent="-{$toc.indent.width}pt" margin-left="24pt" space-after="1mm" space-before="3mm" text-align-last="justify">
			<xsl:copy-of select="$line">
			</xsl:copy-of>
		</fo:block>
	</xsl:template>
	<!-- Customizing just the id of list_of_... -->
	<xsl:template name="list.of.titles">
		<xsl:param name="titles" select="'table'">
		</xsl:param>
		<xsl:param name="nodes" select=".//table">
		</xsl:param>
		<xsl:param name="toc-context" select=".">
		</xsl:param>
		<xsl:variable name="id">
			<xsl:call-template name="object.id">
			</xsl:call-template>
		</xsl:variable>
		<xsl:if test="$nodes">
			<fo:block id="lot...{$titles}...toto">
				<!--     <fo:block id="lot...{$titles}...{$id}"> -->
				<xsl:choose>
					<xsl:when test="$titles='table'">
						<xsl:call-template name="list.of.tables.titlepage">
						</xsl:call-template>
					</xsl:when>
					<xsl:when test="$titles='figure'">
						<xsl:call-template name="list.of.figures.titlepage">
						</xsl:call-template>
					</xsl:when>
					<xsl:when test="$titles='equation'">
						<xsl:call-template name="list.of.equations.titlepage">
						</xsl:call-template>
					</xsl:when>
					<xsl:when test="$titles='example'">
						<xsl:call-template name="list.of.examples.titlepage">
						</xsl:call-template>
					</xsl:when>
					<xsl:when test="$titles='procedure'">
						<xsl:call-template name="list.of.procedures.titlepage">
						</xsl:call-template>
					</xsl:when>
					<xsl:otherwise>
						<xsl:call-template name="list.of.unknowns.titlepage">
						</xsl:call-template>
					</xsl:otherwise>
				</xsl:choose>
				<xsl:apply-templates mode="toc" select="$nodes">
					<xsl:with-param name="toc-context" select="$toc-context">
					</xsl:with-param>
				</xsl:apply-templates>
			</fo:block>
		</xsl:if>
	</xsl:template>
	<xsl:template match="programlisting//text()">
		<xsl:variable name="expandedText">
			<xsl:call-template name="expandTabs">
				<xsl:with-param name="text" select=".">
				</xsl:with-param>
			</xsl:call-template>
		</xsl:variable>
		<xsl:value-of select="$expandedText">
		</xsl:value-of>
	</xsl:template>

	<xsl:template match="text()" mode="mode1">
		<xsl:param name="myName"/>
		<xsl:choose>
			<!-- This condition is true when the string is a zero-length string -->
			<xsl:when test="not(boolean(normalize-space(string(.))))">
				<xsl:apply-templates mode="mode1" select="following-sibling::node()[1]">
					<xsl:with-param name="myName" select="$myName" />
				</xsl:apply-templates>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'false'" />
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>

	<xsl:template match="*" mode="mode1">
		<xsl:param name="myName"/>
		<xsl:choose>
			<xsl:when test="name() = $myName">
				<xsl:value-of select="'true'" />
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'false'" />
			</xsl:otherwise>
		</xsl:choose>

		
	</xsl:template>

	<xsl:template name="isFollowedBySameElement"> 
		<xsl:variable name="myName" select="name()"/>
		<xsl:variable name="result">
			<xsl:apply-templates mode="mode1" select="following-sibling::node()[1]">
				<xsl:with-param name="myName" select="$myName" />
			</xsl:apply-templates>
		</xsl:variable>
		<xsl:choose>
			<!-- This condition is true when $result is a zero-length string -->
			<!-- 
				 It is in particular the case when there does not exist
				 following siblings: templates are not called and so result
				 is not set.
			-->
			<xsl:when test="not(boolean(normalize-space($result)))">
				<xsl:value-of select="'false'" />
			</xsl:when>
			<!-- In this case, result has been set, so we return it as it is -->
			<xsl:otherwise>
				<xsl:value-of select="$result" />
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>


	<xsl:template match="newline">
		<xsl:variable name="followedByNewLine">
			<xsl:call-template name="isFollowedBySameElement" />
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="$followedByNewLine = 'true'">
				<fo:block>&#160;</fo:block>
			</xsl:when>
			<xsl:otherwise>
				<fo:block
					linefeed-treatment="preserve"
					white-space-treatment="preserve"
					white-space-collapse="false">
					<fo:inline>&#010;</fo:inline>
				</fo:block>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
</xsl:stylesheet>
<!-- 
	<xsl:message>
	<xsl:text> OK, question.toc </xsl:text> <xsl:copy-of select="$id" /> 
	</xsl:message>
	
	<xsl:for-each select="./@*">
	<xsl:message>
	<xsl:text> Attribute  <xsl:value-of select="name(.)"/> = <xsl:value-of select="."/>  </xsl:text> 
	</xsl:message>
	</xsl:for-each >
-->
