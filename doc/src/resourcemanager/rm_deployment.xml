<?xml version="1.0" encoding="utf-8"?><chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="Resource_deployment"><info><title>Launch Resource Manager and deploy computing nodes</title></info>
			<para>
					In this part is explained how to launch Resource Manager, how to deploy new
					ProActive nodes and add them to the Resource Manager. Basically Resource Manager deploys computing nodes by using GCM deployment
					standard implemented in ProActive. This standard provides a way to specify in XML descriptors whole deployment
					of a distributed application. Resource Manager uses this standard to deploy computing nodes and aggregate them in a pool
					of computing nodes.
			</para>
			<section xml:id="RM_start"><info><title>Launch the Resource Manager</title></info>
				<para>  
					To start the Resource Manager, run run the <emphasis>startRM.[sh|bat]</emphasis>
					script in 'bin/[os]/' directory. By default Resource Manager will be started empty (without computing nodes).
					You can specify some arguments :
					<itemizedlist>
						<listitem> <para><emphasis>-ln</emphasis> or <emphasis>--localNodes</emphasis>,
						to start Resource manager with deploying 4 local nodes</para>
						</listitem>
						<listitem> <para><emphasis>-d</emphasis> or <emphasis>--deploy</emphasis>, followed by a list
						of GCM deployment files (GCMD, see below for GCM utilization), Resource Manager starts deploys
						these GCMD.</para>
						</listitem>
						<listitem> <para><emphasis>-h</emphasis> or <emphasis>--help</emphasis>, 
						to print command line help.</para> 
						</listitem>						
					</itemizedlist>
				</para>
			</section>
			<section xml:id="RM_GCM"><info><title>Define GCM Deployment files</title></info>
				<para>
				    ProActive Resource Manager relies on GCM Deployment standard to deploy computing nodes.
					GCM standard implies that an application could be deployed anywhere without changing the source code.
					For instance, we must be able to use various protocols, rsh, ssh, Globus, LSF, etc., for the creation
					of the JVMs needed by the application (see details in ProActive manual, chapter 19 :<emphasis>ProActive GCM Deployment</emphasis>)
				    We will present here main concepts of GCM deployment mechanism, how to write GCM Deployment descriptors,
				    and how to use it with Resource manager.
				</para>
				<para>
					There are many ways to add nodes to Resource Manager with GCM deployment.
					You can acquire already deployed nodes using various protocols, deploy nodes on Microsoft CCS cluster,
					and some other platforms/protocols. You can use bridges in GCMD if remote hosts are not directly
					reachable in your LAN.
				</para>
				
				<section xml:id="RM_GCM_concepts"><info><title>Main concepts</title></info>
					<section xml:id="RM_GCMA_GCMD"><info><title>GCM Application descriptor and GCM Deployment descriptor</title></info>	
						<para>
							GCM Deployment procedure is described in two XML files :
								<itemizedlist>
									<listitem>
									<para>
										<emphasis> GCM Application Descriptor</emphasis> (GCMA) defines the application to deploy. It
										 can be a native C/C++ application, a Java application. Any batch application can be deployed with GCM.
										</para>   
									</listitem>
									<listitem>
									<para>
										<emphasis> GCM Deployment Descriptor</emphasis> (GCMD) describes where and how the application will be launched (deployed).
										This part defines host names that will run the application, the way (protocol) to access to these computers (ssh, rsh...),
										protocol-specific parameters to access to the host, file path to access to specified libraries regarding the host, etc.
										</para>    
									</listitem>
								</itemizedlist>
						</para>
						<para>
						In the case of resource manager GCMA is always a Proactive node. The only part administrator has to define is
						GCM deployment descriptor which contains a description of computers infrastructure.
						</para>
					</section>
					<section xml:id="RM_virtual_nodes"><info><title>Virtual Node</title></info>
						<para>
						GCM deployment and ProActve is built around concept of virtual nodes which is
						an application level abstraction. At runtime a virtual node will be mapped into one or several real nodes
						but an application do not really need to know that. The mapping is performed according to GCM deployment descriptor.
						</para>
					</section>
				</section>
				<section xml:id="RM_GCMA"><info><title>Use default GCM Application descriptor</title></info>
					<para>
					As said before, the application to deploy by Resource Manager on remote computers is a ProActive node,
					i.e. a Java virtual machine with a ProActive Node (a ProActive node is a kind of container for ProActive applications),
					that will be provided to a scheduler to deploy tasks on it.
					So GCM Application descriptor is always the same and there is no need to change it.
					This GCMA is named <emphasis>GCMNodeSourceApplication.xml</emphasis>,
					stored in <emphasis>config/deployment</emphasis> directory. It is not mandatory to explore deeply the GCMA definition,
					for using GCM deployment with ProActive Resource manager.
					</para>
					<programlisting language="xml"><textobject><textdata fileref="resourcemanager/xml/gcma.xml"/></textobject></programlisting>
					<para>
					Let's exam different tags :
					</para>
					<itemizedlist>
						<listitem><para><emphasis>environment tag : </emphasis>defines variables. 
						This is a way to define variables that can be reused throughout the descriptor. 
						Inside this tag, each variable can be reused (even in another following variable definition)
						by using the syntax ${name_of_variable}. Here we use a <emphasis>JavaPropertyVariable</emphasis>, named proactive.home.
						This kind of variable is therefore a Java Property variable, so not directly defined in the descriptor, but defined by 
						the ProActive application that will use this file. The Java property proactive.home corresponds to the home directory of the ProActive application
						using this descriptor. Every ProActive application has this Java property variable defined. 
						In our case, ProActive home directory corresponds to the home directory of Resource Manager Application
						(path in your file system where Resource Manager is stored). When Resource manager performs parsing
						of this GCMApplication file, it replaces ${proactive.home} strings by Resource manager home directory.
						If you want more information concerning definition of variables in descriptors, see in ProActive Manual
						chapter 21 :<emphasis>Variable Contracts for Descriptors</emphasis>.</para>
						</listitem>
						<listitem><para><emphasis>application : </emphasis> the main tag in a GCMApplication descriptor, its describes the
						application to deploy.</para>
						</listitem>
						<listitem><para><emphasis>proactive : </emphasis>the application to deploy is then a ProActive application. The attributes <emphasis>base</emphasis>
						and <emphasis>relpath</emphasis> define the ProActive home directory of the ProActive application that will be launched on a remote host, i.e
						path in the file system on the remote host where ProActive is stored.
						Here the path of application to launch is built from the root of the file system and the path corresponds
						to the environment variable ${proactive.home} defined above. So ProActive home directory of the application to launch on remote hosts
						is the same as Resource Manager path (this path can be overridden in GCMDeployment file).</para>
						</listitem>
						<listitem><para><emphasis>configuration :</emphasis> defines configuration of ProActive application to launch. Here we define
						the Java classpath of the JVM that will be launched on a remote host. In the tag <emphasis>applicationClassPath</emphasis>
						when define tags <emphasis>pathElement</emphasis> that define path to jar files that will be added to the classpath.
						So here we add ProActive_scheduler.jar and ProActive_resourcemanager.jar to the classpath of the JVM to deploy.
						These two paths are built from the <emphasis>base</emphasis> attribute set to 'proactive', that corresponds
						to the ProActive home directory of the deployed application in a remote host (not the ProActive home directory of the Resource Manager that performs
						the deployment), suffixed with the attribute <emphasis>relpath</emphasis> that points towards dist/lib directory.   </para>
						</listitem>
						<listitem><para><emphasis>virtualNode : </emphasis> this tag is used both by Resource Manager that performs deployment and deployed nodes.
						this tag define a virtual node, with an id, that represents a set of nodes to deploy. 
						For this virtual node we define a <emphasis>nodeProvider</emphasis>, entity that does the association with a GCM Deployment descriptor. Basically							
						Resource Manager deploy all virtual nodes defined in this GCMA.</para>
						</listitem>
						<listitem><para><emphasis>resources : </emphasis>define resources that must be acquired, i.e, define association of a node Provider with a GCMDeployment file.
						We can see that file path for nodeProvider 'worker' doesn't look like a valid file path. The String <emphasis>WORKERSDEPLOYMENT</emphasis>
						is replaced automatically by a path of GCM Deployment descriptor that Administrator has asked to deploy. This line must not be modified.</para> 
						</listitem>
					</itemizedlist>
					<para>
					So this GCM application descriptor defines a ProActive application to deploy, there is one virtual node defined, called workers,
					and this virtual node will be mapped to real nodes, according to GCM Deployment files that administrator define and ask to deploy.    
					</para>					
				</section>
				<section xml:id="RM_GCMD"><info><title>Define GCM deployment descriptors</title></info>
					<para>
					Defining the GCM deployment files is the most important part in Administration of Resource Manager, because it is the way two aggregate
					all the computing resources of your infrastructure and add them to Resource Manager. In this part is presented the deployment made
					by default, on the local machine. After we will see how to deploy nodes using <emphasis>ssh</emphasis> protocol.
					This chapter is not an exhaustive presentation of GCM Deployment descriptors.  It is recommended
					to refer to ProActive manual chapter 19 :<emphasis>ProActive GCM Deployment</emphasis>.
					</para>
					<section xml:id="RM_GCMD_default"><info><title>Deployment of nodes on local machine</title></info>
						<para>
						By default Resource Manager deploys 4 ProActive nodes on the local machine. This deployment is performed by GCM deployment descriptor
						<emphasis>Local4JVMDeployment[os].xml</emphasis>, stored in <emphasis>config/deployment</emphasis> directory :
						</para>
						<programlisting language="xml"><textobject><textdata fileref="resourcemanager/xml/gcmdLocal.xml"/></textobject></programlisting>
						<para>
							<itemizedlist>
								<listitem><para><emphasis>environment</emphasis> : as in the GCMA, this tag defines variables that can
								reused in the GCMD, here we use a Java Property variable, 'user.home' that will be used later.</para>  
								</listitem>
								<listitem><para><emphasis>resources</emphasis> : describes the hierarchical structure of the available grid resources, 
								targets of deployment, and 'network route' to reach them.
								This can be seen as the topology of the grid: which hosts are part of a group, which group is behind a bridge, etc…
								Here, a host is defined directly in resource tag (without including it in a bridge or a group), so the host
								is the local host.
								In this GCMD, we define one host, that refers to id 'hLocalhost, this reference Id points to a host definition in
								the infrastructure part.</para>
								</listitem>
								<listitem><para><emphasis>infrastructure</emphasis>:  lists the grid resources on which the deployment can take place,
								in no particular order. Its purpose is to describe how these resources are deployed (i.e. through which protocols).
								in our case of local deployment, we have just one resource, i.e. one host. Inside the tag <emphasis>hosts</emphasis>, we define
								a <emphasis>host</emphasis> with an id (that is used by the resource part define above). 
								For this host, we specify in <emphasis>os</emphasis> its os type, its <emphasis>hostCapacity</emphasis> the number of
								application that can be deployed on it. And in <emphasis>VMCapacity</emphasis>, the number of ProActive nodes to create by JVM.
								Here the host capacity is four and VM capacity is one, so we deploy 4 Java virtual machines, with one computing Node in each one.
								<emphasis> homeDirectory</emphasis> defines the path in remote host from where the program will be launched. Here
								we launch the JVM from the ${user.home} variable, that corresponds to resource Manager's user.home Java property that
								initiate deployment.</para>
								</listitem>
							</itemizedlist>
						</para>
					</section>
					<section xml:id="RM_GCMD_ssh"><info><title>Deployment of nodes with ssh</title></info>
						<para>
						Here is presented a way to deploy computing nodes on remote hosts, thanks to ssh protocol. You can use this
						kind of deployment if you can perform connection by ssh between different hosts of your infrastructure.
						It's mandatory, for using ssh with GCM, that your ssh connections doesn't need any password typing or key passphrase typing 
						for authentication.
						</para>
						<para>
						You can use as a template the file <emphasis>deployment_ssh_host_list.xml</emphasis> in config/deployment directory :
						</para>
						<programlisting language="xml"><textobject><textdata fileref="resourcemanager/xml/gcmd_ssh.xml"/></textobject></programlisting>
						<para>
							<itemizedlist>
							<listitem><para>
							First we define a descriptor variable named <emphasis>HOSTS</emphasis> that contains a list of host names,
							targets of the deployment. Replace 'host1 host2 host3', by a list of hosts in your
							infrastructure that can be reached by ssh (separated by spaces).</para>
							</listitem>
							<listitem><para>
							In the <emphasis>resources</emphasis> tag, we define a group of machines reachable by ssh, that refers to ID
							'remoteThroughSSH' (this group is defined after in infrastructure part). This group contains hosts that have the
							ID 'host' (this kind of host is defined in infrastructure part too). We define just here the topology : We want to deploy
							on group of type referenced by ID remoteThroughSSH, and this group is made of hosts of type referenced by ID 'host'. Definition of the group
							and the host is just after.</para>
							</listitem>
							<listitem><para>
							In <emphasis>infrastructure part</emphasis>, we define the host for the ID 'host' declared before ;
							it's a unix host with a capacity of one (we can run one application on it), and the JVM (effective application) 
							of this node can handle one ProActive node. The application is started from the 'user.dir' descriptor environment variable.
							Then we define the group of id 'remoteThroughSSH' declared in resources part.
							With the tag <emphasis>sshGroup</emphasis>, we define a set of host reachable by ssh, and with attribute 
							<emphasis>hostList</emphasis>, our group is made of a list of computers defined in descriptor variable ${HOSTS} defined above.</para>
							</listitem>
							</itemizedlist>
						</para>
					</section>
					<section xml:id="RM_launch_with_gcmd"><info><title>Launch Resource Manager with your specific deployment descriptor</title></info>
						<para>  
						To start the Resource Manager with your own GCM deployment descriptor, run the <emphasis>startRM.[sh|bat]</emphasis>
						script in 'bin/[os]/' directory and put in paramter the file Path of your GCM Deployment file. If you want to deploy Resource Manager
						with the deployment_ssh_host_list.xml file defined above. Type in 'bin/[os]/' directory :
						<literal>startRM.sh -d ../../config/deployment/deployment_ssh_host_list.xml</literal>
						</para>
						<para>
						Resource Manager starts and deploys computing nodes on hosts defined in the GCM deployment file. You can put in parameters of this
						command several deployment descriptors. Resource Manager associates automatically GCMD files in parameters with the GCMA
						<emphasis>GCMNodeSourceApplication.xml</emphasis>, stored in <emphasis>config/deployment</emphasis> directory. 
						</para>
					</section>
					<section xml:id="RM_launch_with_gcmd_custom_path"><info><title>Customize in GCMD resource Manager Path and Java path of your
					remote hosts</title></info>
						<para>
						In examples described above, we assumed that Java command on remote hosts is automatically reachable, (i.e. is in the $PATH),
						and ProActive libraries on remote hosts are stored in the same path in file system than for resource Manager. You can define these
						paths specifically for each computing resource. These paths can be different from resource manager, and even be different between hosts
						on which you want to perform the deployment.  
						</para>
						<para>
						To illustrate this aspect, here a GCM Deployment file that deploys two computing nodes on hosts named 
						'computer1' and 'computer2', where Java executable is not installed in the same paths for the two hosts. Look the
						descriptor <emphasis>deployment_ssh.xml</emphasis> in config/deployment directory :
						</para>
						<programlisting language="xml"><textobject><textdata fileref="resourcemanager/xml/gcmd_custom.xml"/></textobject></programlisting>	
					</section>

					
				</section>
		</section>
</chapter>