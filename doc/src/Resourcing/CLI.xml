<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="CommandLineInterface">
<info><title>The command line interface</title></info>
	<para>
			This part explains how to launch the ProActive Resource Manager and interact with it using command
			line interface (CLI). In order to use this interface the <emphasis role="italics">JAVA_HOME</emphasis> environment variable has to be
			defined.
	</para>
	<section xml:id="RM_start"><info><title>Launching the resource manager</title></info>
		<para>
			To start the resource manager, run the <emphasis>rm-start[.bat]</emphasis> or
			<emphasis>rm-start-clean[.bat]</emphasis>
			script in <literal>bin/[os]/</literal> directory. The second script drops all the data from
			data base used to store the history of RM. When launching the resource manager,
			it is possible to specify few arguments:
			<itemizedlist>
				<listitem> <para><emphasis>-ln</emphasis> or <emphasis>--localNodes</emphasis>,
				start the resource manager with 4 local nodes</para>
				</listitem>
				<listitem> <para><emphasis>-d</emphasis> or <emphasis>--deploy</emphasis>, followed by a list
				of GCM deployment files (GCMD, see below for GCM utilisation) deploys ProActive nodes described
				there.</para>
				</listitem>
				<listitem> <para><emphasis>-h</emphasis> or <emphasis>--help</emphasis> -
				prints the command line help.</para>
				</listitem>
			</itemizedlist>
		</para>
	</section>
	<section xml:id="rm_admin_console"><info><title>Interacting with the resource manager</title></info>
	<para><emphasis>rm-client[.bat]</emphasis>, in <literal>bin/[os]</literal> directory, provides a way to connect to the resource manager
	and manipulate it in command line mode. This scrips supports a bunch of options:
	</para>
	<programlisting><textobject><textdata fileref="code_snippets/admin/rm-client-help.txt"/></textobject></programlisting>
	<para>
			When new node source is created custom infrastructure or policy can be specified:
	</para>
	<itemizedlist>
		<listitem>
			<para>
					<emphasis role="italics">-infrastructure</emphasis> parameter allows to list or specify an infrastructure.
					In order to see the list of supported infrastructures run
			</para>
		</listitem>
	</itemizedlist>
	<programlisting><textobject><textdata fileref="code_snippets/admin/rm-client-infrastructure.txt"/></textobject></programlisting>

		<para>
			Choose the one you need and add the corresponding parameters to the command line.
		</para>
	<itemizedlist>
		<listitem>
			<para>
					<emphasis role="italics">-policy</emphasis> parameter allows to list or specify a policy. First see the list
					of available policies:
			</para>
		</listitem>
	</itemizedlist>

	<programlisting><textobject><textdata fileref="code_snippets/admin/rm-client-policy.txt"/></textobject></programlisting>
		<para>
			Then select the appropriate one and specify it in the command line. Example:
		</para>
		<screen>>rm-client -l admin -cn myns -infrastructure org.ow2.proactive.resourcemanager.nodesource.infrastructure.DefaultInfrastructureManager rmURL -policy org.ow2.proactive.resourcemanager.nodesource.policy.StaticPolicy ALL ME</screen>

	<section xml:id="rm_admin_js_console"><info><title>Interactive mode</title></info>
	<para>
		Another way to interact with the resource manager is using the interactive mode of the
		controller. Interactive mode correspond to a JavaScript console, which is able to manage the resouce manager.
		To start it in this mode, just launch the <emphasis role="bold">bin/[os]/rm-client[.bat]</emphasis> command without any parameter.
		Once connected, type ? or help() to get the list of provided functions:
	</para>
		<screen> addnode(nodeURL, nsName)         Add node to the given node source (parameters is a string representing the node URL to add and an optional string representing the node source in which to add the node)
 removenode(nodeURL,preempt)      Remove the given node (parameter is a string representing the node URL, node is removed immediately if second parameter is true)
 createns(nsName,infr,pol)        Create a new node source with specified name, infrastructure and policy (e.g. createns('myname', ['infrastrucure', 'param1', ...], ['policy', 'param1', ...]))
 removens(nsName,preempt)         Remove the given node source (parameter is a string representing the node source name to remove, nodeSource is removed immediately if second parameter is true)
 locknode(nodeURL)                Locks the node
 unlocknode(nodeURL)              Unlocks the node
 listnodes(nodeSourceName)        List nodes for a particular or all node sources
 listns()                         List every handled node sources
 nodeinfo(nodeURL)                Displays node informations
 listinfrastructures()            List supported infrastructures
 listpolicies()                   List available node sources policies
 topology()                       Displays nodes topology
 shutdown(preempt)                Shutdown the Resource Manager (RM shutdown immediately if parameter is true)
 stats()                          Display some statistics about the Resource Manager
 myaccount()                      Display current user account information
 account(username)                Display account information by username
 reloadconfig()                   Reload the resource manager config, including permissions and log4j
 reconnect()                      Try to reconnect this console to the server
 exec(scriptFilePath)             Execute the content of the given script file (parameter is a string representing a script-file path)
 execr(path,type,[targets],args)     Execute remotely the specified script at 'path' on specified ['targets'] of 'type' [NODESOURCE_NAME, NODE_URL, HOSTNAME] with optional 'args'. For example execr('../../samples/scripts/misc/processBuilder.js','NODESOURCE_NAME',['Default'],'hostname');
 cnslhelp() or ?c                 Displays help about the console functions itself
 exit()                           Exits RM controller
</screen>

	<section xml:id="rm_admin_js_console_script"><info><title>execute actions in a Java script file</title></info>
		<para>
			You can script a sequence of commands to send to Resource Manager in a javascript file:
		</para>
		<programlisting language="java">
/* set exec mode in order to not display stack trace, and not ask for either.*/
exMode(false,false);

/* remove a node source, preemptively */
removens("my_node_source",true);

/* create a new node source with GCMD and static nodes acquisition*/
createns("my_node_source", ['org.ow2.proactive.resourcemanager.nodesource.infrastructure.GCMInfrastructure', 'rmURL', 'path_to_descriptor'], ['org.ow2.proactive.resourcemanager.nodesource.policy.StaticPolicy', 'ALL', 'ME']);

/* wait for a while */
java.lang.Thread.sleep(10000);

/* check that deployment has succeed */
listnodes();
		</programlisting>
		<para>
		Then run this script by typing in interactive mode:
		</para>
		<screen>> exec("myScript.js");</screen>
		</section>
	</section>
	</section>
</section>
