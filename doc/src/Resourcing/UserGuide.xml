<?xml version="1.0" encoding="utf-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="RM_USER_API"><info><title>User guide</title></info>
<!-- <!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V5.0//EN" "docbook.dtd">  -->
	<para>
		This chapter describes how to connect to the resource manager and request nodes to run parallel
		computations. If you use ProActive Scheduler you do not have to worry about it as scheduler
		does it for you. If you would like to run the computations directly on nodes, you
		have to do this to connect to the existing resource manager.
	</para>
	<para>
		All the code snippets described in this section can be found in the <emphasis role="italics">org.ow2.proactive.resourcemanager.examples.documentation</emphasis>
		package in the Resource Manager sources.
	</para>
	<section xml:id="RM_API_connecting"><info><title>Connecting to the resource manager</title></info>
		<para> Classes which are required to connect to the resource manager are located in
		$RM_HOME/dist/lib/ProActive_ResourceManager-client.jar. The ProActive
		library and all its dependencies are needed as well in the class path in order to communicate
		with the resource manager and nodes.
		</para>
		<programlisting language="java"><textobject><textdata fileref="automatic_snippets/UserGuide_Connect.snip"/></textobject></programlisting>
		<warning>
			<para>
				This piece of code will not work unless you have started a resource manager with at least one computing node beforehand.
				If not, go to the <literal>bin/[unix|windows]/</literal> directory and launch the <literal>rm-start[.bat]</literal> script
				with the <literal>-ln</literal> argument.
			</para>
			<screen>$ rm-start -ln</screen>
			<para>To learn more about the command line interface, please refer to <xref linkend="CommandLineInterface" />.</para>
		</warning>
		<para>
		  Connecting to the resource manager implicates using a keypair infrastructure to establish a secure channel on
		  which the credentials (username and password) will be sent securely. There are three ways to connect
		  to the Resource Manager, as described in the example above:
		  <orderedlist>
		    <listitem><para>
			Retreive the Credentials from disk: supposes the script <emphasis>create-cred[.bat]</emphasis> was previously used to generate those credentials.
			It requires knowing the location of the public key corresponding to the private key that will be used for decryption on server side.
			To obtain the key, you need to contact the administrator of the Scheduler.
		      </para>
		      <para>
			<programlisting language="sh"><![CDATA[
# use local public key to generate credentials for user 'demo'
/bin/unix $ ./create-cred -F $HOME/.proactive/rm_pubkey -o $HOME/.proactive/my_encrypted_credentials -l demo
# use rmi://example.com/RMAUTHENTICATION's public key to generate credentials for user 'admin' with pass 'admin' in non-interactive mode
/bin/unix $ ./create-cred -R rmi://example.com/RMAUTHENTICATION -o $HOME/.proactive/my_encrypted_credentials -l admin -p admin
]]></programlisting>
			Credentials can now be retreived when properly designated by the <emphasis>pa.common.auth.credentials</emphasis> property; i.e. using
			<emphasis>java -Dpa.common.auth.credentials=$HOME/.proactive/my_encrypted_credentials</emphasis>. Please type <literal>create-cred -h</literal>
			to have a complete list of possible options.
		    </para></listitem>
		    <listitem><para>
			Create the encrypted Credentials on client side: as safe as the previous method, but requires user input, which prevents automation,
			or storing clear credentials on the disk, which can result to security breaches. This method also requires knowing the public key,
			which should be offered by the Resource Manager through the Authentication object with the getPubKey() method.
			If the Resource Manager does not know the public key, it can be stored locally on client side and designated by the
			<emphasis>pa.common.auth.pubkey</emphasis> Java property; i.e. using <emphasis>java -Dpa.common.auth.pubkey=$HOME/.proactive/pub.key</emphasis>.
		    </para></listitem>
		    <listitem><para>
			If you cannot retrieve the public key, you can use the old deprecated API, which sends clear credentials on the network, and requires user input.
		    </para></listitem>
		  </orderedlist>
		</para>
		<para>
		With the ResourceManager interface, you are now able to obtain the RMMonitoring
		interface which can be used to track resources and their states.
		Once you have a reference to the ResourceManager active object, you can perform all
		actions according to your role (permissions) such as shutdown of the Resource Manager if you are an administrator.
		</para>
	</section>
	<section xml:id="RM_API_gr"><info><title>Getting and releasing nodes</title></info>
	<para>
		Now that we have a reference to the resource manager, we can get computing nodes:
	</para>
	<programlisting language="java"><textobject><textdata fileref="automatic_snippets/UserGuide_GetNodes.snip"/></textobject></programlisting>
	<para>
		In the example above, we have requested <literal>nbOfNodes</literal> nodes providing <literal>selectionScipt</literal> as criteria. The resource
		manager does not guaranty that it will find <literal>nbOfNodes</literal> nodes, but it will provide as many nodes as it can.
		<literal>selectionScript</literal> be <literal>null</literal> and in this case, no particular selection will be performed (all nodes will be accepted).
		Let us now request nodes with some criteria. Criteria are described in selection scripts
		which are executed on nodes before they are selected. All the information which is possible
		to get from JVMs could be used for selection decisions. Some examples
		are available in the resource manager distribution in the <emphasis role="italics">samples/scripts/selection</emphasis> folder.
		Here is an example of script which selects only linux machines:
	</para>
	<programlisting language="java"><textobject><textdata fileref="automatic_snippets/UserGuide_LinuxScript.snip"/></textobject></programlisting>
	<para>
		In the previous example, we have written the script directly in a String object but it is fortunatly possible to write it in a file and use this
		file for creating a SelectionScript object.
	</para>
	<programlisting language="java"><textobject><textdata fileref="automatic_snippets/UserGuide_WindowsScript.snip"/></textobject></programlisting>
	<para>
		After computations are completed, user can release nodes to make them available for other users.
	</para>
	<programlisting language="java"><textobject><textdata fileref="automatic_snippets/UserGuide_ReleaseNodes.snip"/></textobject></programlisting>
	<para>
		Finally, a user can disconnect from the resource manager as follows:
	</para>
	<programlisting language="java"><textobject><textdata fileref="automatic_snippets/UserGuide_Disconnect.snip"/></textobject></programlisting>
	<note>
		<title>
			Static and dynamic scripts
		</title>
		<para>
			There are 2 types of scripts: static and dynamic. Static scripts are executed on node
			only once and the resource manager remembers the result of execution. Next time
			it will see the same criteria in a user request, it will use this knowledge to select nodes
			without contacting them. One should prefer using static scripts for performance reasons.
			On the contrary, dynamic scripts are executed each time a request came. Dynamic
			scripts could be those which detect free memory, current system loading etc.
		</para>
	</note>

	<para>
		This was just a short overview of Resource Manager user API. For more details, see
	   <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://proactive.inria.fr/release-doc/ResourceManager/api_published/">the Resource Manager API</link>.
	</para>
	</section>
	<section xml:id="RM_API_topology"><info><title>Nodes topology</title></info>
        <para>
        If the resource manager is configured to discover nodes topology (option
        <emphasis>pa.rm.topology.enabled=true</emphasis> is specified in the config file) the user may
        request nodes not only with selection scripts but also with topology parameters.

        The following topology parameters are available:
        </para>
        <itemizedlist>
            <listitem>
                <para>
                    <emphasis>ArbitraryTopologyDescriptor</emphasis> - no constraint on node location.
                    This descriptor is used by default and provides the quickest way of finding nodes.
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis>BestProximityDescriptor</emphasis> - the set of closest nodes.
                    Could be useful for parallel communicative applications which suppose to
                    be executed on several nodes simultaneously. The resource manager has a matrix of
                    distances (latencies) between all nodes it handles. When a new selection request comes
                    the RM starts to group nodes into clusters using
                    <link xlink:href="http://en.wikipedia.org/wiki/Cluster_analysis#Agglomerative_hierarchical_clustering">agglomerative hierarchical clustering</link>.
                   The process of clustering can be driven by the function used in distances recalculation between clusters
                   while merging. For now it is possible to use only BestProximityDescriptor.MAX function that basically
                   means that the similarity of two clusters is the similarity of their most dissimilar members. It is also called
                   complete linkage clustering in which the merge criterion is non-local; the entire structure of the
                   clustering can influence merge decisions.
                 </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis>ThresholdProximityDescriptor</emphasis> - the set of nodes within a threshold proximity.
                    This descriptor guarantees that the resource manager returns a set of nodes which are
                    interconnected within specified proximity. Note that previous descriptor does not
                    guarantee this.
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis>SingleHostDescriptor</emphasis> - the set of nodes on a single host.
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis>SingleHostExclusiveDescriptor</emphasis> - the set of nodes of a single host exclusively.
                    The host with selected nodes will be reserved for the user.
	        </para>
	        <para>
					 By specifying this descriptor in <emphasis>ResourceManager.getAtMostNodes</emphasis> user may get
					 more nodes than he asked when host capacity exceeds the requested number of nodes.
					 For instance if a user requests 1 node but there is only a free host with 5 nodes on it,
					 all these 5 nodes will be provided to the user. To be more presize in the target node set
					 1 node will be presented in the main list and 4 nodes in the extra list (see <emphasis>NodeSet.getExtraNodes()</emphasis>).
					 The resource manager tries to find the optimal host minimizing the waist of resources, 
					 namely if user requested k nodes
			        <itemizedlist>
			            <listitem>
			                <para>
							   The machine with exact capacity will be selected if exists.
			                </para>
			            </listitem>
			            <listitem>
			                <para>
							   The machine with bigger capacity will be selected if exists.
							    The capacity of the selected machine will be the closest to k.
			                </para>
			            </listitem>
			            <listitem>
			                <para>
							   The machine with smaller capacity than k will be selected.
							    In this case the capacity of selected host will be the biggest among all other.
			                </para>
			            </listitem>
			        </itemizedlist>
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis>MultipleHostsExclusiveDescriptor</emphasis> - the set of nodes filled in multiple hosts.
                    Hosts with selected nodes will be reserved for the user.
	           </para>
                <para>
					 By specifying this descriptor in <emphasis>ResourceManager.getAtMostNodes</emphasis> user may get
					 more nodes than he asked if the total capacity of found hosts exceeds the requested number of nodes.

					 For example a user requests 6 nodes from the RM that handles 3 hosts with 5 nodes on each he gets
					 the reference to 6 nodes in the node set plus 4 extra nodes (see <emphasis>NodeSet.getExtraNodes()</emphasis>).

					 The resource manager tries to find the optimal host set
					 minimizing the waist of resources, namely if user requested k nodes
			        <itemizedlist>
			            <listitem>
			                <para>
							   If one machine exists with the capacity k it will be selected.
			                </para>
			            </listitem>
			            <listitem>
			                <para>
							   If not the resource manager finds the machine with closest capasity to k and
							   repeats the procedure for (k - "found host capacicy") nodes number.
			                </para>
			            </listitem>
			            <listitem>
			                <para>
							   If it not possible to find exact number of nodes but it's possible to
							    find more than they will be selected. The number of waisted resources
							    and number of machines will be minimized.
			                </para>
			            </listitem>
			            <listitem>
			                <para>
								Otherwise less nodes will be provided but as the closest as possible to k.
			                </para>
			            </listitem>
			        </itemizedlist>
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis>DifferentHostsExclusiveDescriptor</emphasis> - the set of nodes each from a different host.
                    All hosts with selected nodes will be reserved for the user.
                    For example when user asks for 5 nodes with such descriptor he will get 5 nodes from 5 different hosts
                    an all other nodes will be marked as busy and put into the extra list of the target node set.
	           </para>
                <para>
					 The resource manager tries to find the optimal host
					 minimizing the waist of resources, namely if user requested k nodes
			        <itemizedlist>
			            <listitem>
			                <para>
							   It will try to select k hosts with 1 node per host
			                </para>
			            </listitem>
			            <listitem>
			                <para>
							   If there are not enough of such hosts it will look for machines with
							   2 nodes and so on.
			                </para>
			            </listitem>
			        </itemizedlist>
                </para>
            </listitem>
        </itemizedlist>

		<para>
        Lets take a look how we apply it in practice
		<programlisting language="java"><textobject><textdata fileref="automatic_snippets/UserGuide_GetClosestNodes.snip"/></textobject></programlisting>
		</para>

    </section>

	<section xml:id="RM_API_limitations"><info><title>Limitations</title></info>
		<para>
		When the resource manager is used in standalone mode (without ProActive Scheduler)
		there are two limitations:
		</para>
		<itemizedlist>
			<listitem>
				<para>
					<emphasis>Remote class loading</emphasis> will work only with rmi protocol. So if you would like to run
					your application on remote nodes using another communication protocol, you have to take care about
					availability of your classes on each node and probably restart the node adding
					your classes to the class path.
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis>Application logs</emphasis> are forwarded to the resource manager server
					log file, not to the client side. In order to see them, you have to have an access to
					the resource manager logs directory.
				</para>
			</listitem>
		</itemizedlist>
	</section>
</chapter>
