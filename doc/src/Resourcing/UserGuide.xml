<?xml version="1.0" encoding="utf-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="RM_USER_API"><info><title>User guide</title></info>
<!-- <!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V5.0//EN" "docbook.dtd">  -->
<para>
	This chapter describes how to connect to the resource manager and request nodes to run parallel
	computations. If you use ProActive Scheduler you do not have to worry about it as scheduler
	does it for you. If you would like to run the computations directly on nodes, you
	have to do this to connect to the existing resource manager.
</para>
	<section xml:id="RM_API_connecting"><info><title>Connecting to the resource manager</title></info>
		<para> Classes which are required to connect to the resource manager are located in
		$RM_HOME/dist/lib/ProActive_ResourceManager-client.jar. The ProActive
		library and all its dependencies are needed as well in the class path in order to communicate
		with the resource manager and nodes.
		</para>
		<programlisting language="java">
RMAuthentication auth = RMConnection.join("rmi://my_rm_host");
ResourceManager resourceManager = null;
try {
    // (1) preferred authentication method (getting credentials from the disk)
	resourceManager = auth.login(Credentials.getCredentials());
} catch (KeyException e) {
    try {
        // (2) valid authentication method (creating credentials on the fly)
        PublicKey pubKey = auth.getPublicKey();
        if (pubKey == null) {
             pubKey = Credentials.getPublicKey(Credentials.getPubKeyPath());
        }

        if (pubKey != null) {
		Credentials cred = Credentials.createCredentials("username", "password", pubKey);
		resourceManager = auth.login(cred);
        }
    } catch (KeyException ex) {
        // cannot retrieve the public key
    } catch (LoginException ex) {
		// incorrect user name or password
	}
} catch (LoginException e) {
	// incorrect user name or password
}
		</programlisting>
	</section>
	<section xml:id="RM_API_gr"><info><title>Getting and releasing nodes</title></info>
	<para>
		Now we have a reference to the resource manager and can get computing nodes
	</para>
	<programlisting language="java">
// requesting nodes
NodeSet nodes = resourceManager.getAtMostNodes(10, null);

// performing some computations

...

// giving nodes back
resourceManager.freeNodes(nodes);

// disconnecting from the resource manager
resourceManager.disconnect();
	</programlisting>
	<para>
	In the example above we requested 10 nodes without providing any criteria. The resource
	manager does not guaranties that it will find 10 nodes, but anyway it provides the maximum.
	After computations are completed user releases nodes and they become available to others.
	</para>
	<para>
		Lets now request nodes with some criteria. Criteria are described in selection scripts
		which are executed on nodes before they are selected. All the information which is possible
		to get from JVM could be used for selection decision. Some examples
		are available in the resource manager distribution in samples/scripts/selection folder.
		Here is an example of script which selects only windows machines
	</para>
	<programlisting language="java">
/* Check if OS name is Windows and their is wireless connection available */
if (SelectionUtils.checkOSName("windows")){
        selected = true;
} else {
        selected = false;
}
	</programlisting>
	<para>
	There are 2 type of scripts - static and dynamic. Static script is executed on node
	only once and the resource manager remembers the result of execution. Next time
	it sees the same criteria in the user request it uses this knowledge to select nodes
	without contacting them. The script listed about more likely has to be the static.
	On the contrary dynamic scripts are executed each time the request came. Dynamic
	scripts could be those which detects free memory, current system loading etc.

	Lets see how to use them in	"ResourceManager.getAtMostNodes" request.
	</para>
	<programlisting language="java">
SelectionScript windowsSelectionScript = new SelectionScript(new File(scriptPath), new String[] {}, false);
NodeSet nodes = resourceManager.getAtMostNodes(10, windowsSelectionScript);
	</programlisting>

	<para>
		Here is just a short overview of Resource Manager user API. For details see Java documentation
	   <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://proactive.inria.fr/release-doc/ResourceManager/api_published/" />.
	</para>
	</section>
	<section xml:id="RM_API_limitations"><info><title>Limitations</title></info>
		<para>
		When the resource manager is used directly there are two limitations
		</para>
		<itemizedlist>
				<listitem>
				<para>
				<emphasis>Remote class loading</emphasis> will work only with rmi protocol. So if you would like to run
				your application on remote nodes using another communication protocol you have to take care about
				availability of your classes on each node and probably restart the node adding
				your classes to the class path.
				</para>
				</listitem>
				<listitem>
				<para>
				<emphasis>Application logs</emphasis> are forwarded to the resource manager server
				log file, not to the client side. In order to see them you have to have an access to
				the resource manager logs directory.
				</para>
				</listitem>
		</itemizedlist>
	</section>
</chapter>
