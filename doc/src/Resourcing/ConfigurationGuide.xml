<?xml version="1.0" encoding="utf-8"?>
<section xml:id="rm-config"><info><title>Configuration guide</title></info>
<section xml:id="rm-config-main"><info><title>Main configuration file</title></info>
	<para>
		The resource manager has a set of properties that can be changed regarding to your computing infrastructure and your needs.
		These properties are set in <emphasis>settings.ini</emphasis> in the <emphasis>config/rm</emphasis> directory:
	</para>
	<para>
		You can define these variables either in <emphasis>settings.ini</emphasis> in the <emphasis>config/rm</emphasis> directory
		or in the the java command line using the -D option (ex: java -Dpa.rm.node.source.ping.frequency=45000 ...).
		 Such a property can be added in the provided scripts (rm-start[.bat] for example).
	</para>
	<itemizedlist>
		<listitem>
			<para>
				<emphasis>pa.rm.node.name</emphasis>:
				defines a name of the ProActive node that contains the resource manager active objects.
				Default is <emphasis role="italics">RM_NODE</emphasis>.
			</para>
		</listitem>
		<listitem>
			<para>
				<emphasis>pa.rm.node.source.ping.frequency</emphasis>:
				the resource manager checks whether computing nodes are still alive. This property sets this verification frequency in milliseconds.
				Default is <emphasis role="italics">45000</emphasis>.
			</para>
		</listitem>
		<listitem>
			<para>
				<emphasis>pa.rm.client.ping.frequency</emphasis>:
				the resource manager checks whether clients running computations on nodes are connected.
				When they disconnect, nodes taken by this client are released. This property sets this verification frequency in milliseconds.
				Default is <emphasis role="italics">45000</emphasis>.
			</para>
		</listitem>
		<listitem>
			<para>
				<emphasis>pa.rm.aliveevent.frequency</emphasis>:
				the period of sending "alive" event to resource manager's listeners (in ms).
				Default is <emphasis role="italics">300000</emphasis>.
			</para>
		</listitem>
		<listitem>
			<para>
				<emphasis>pa.rm.select.script.timeout</emphasis>:
				max execution time of a selection script, in milliseconds. If execution time is longer than this value,
				the resource manager assumes that computing node is not suitable for this selection script.
				Default is <emphasis role="italics">45000</emphasis>.
			</para>
		</listitem>
		<listitem>
			<para>
				<emphasis>pa.rm.nodelookup.timeout</emphasis>:
				when the resource manager lookups a node there could be a delay due to the
				network latency (or sometimes firewall configuration).
				Default is <emphasis role="italics">10000</emphasis>.
			</para>
		</listitem>
		<listitem>
			<para>
				<emphasis>pa.rm.gcm.template.application.file</emphasis>:
				path of default GCM Application descriptor, used for nodes deployments in GCM based node sources.
				If this file path is a relative, path is evaluated from the resource manager directory
				(variable <emphasis role="italics">pa.rm.home</emphasis>), otherwise path is directly interpreted.
				See <xref linkend="GCM_customized"/> part.
				Default is <emphasis role="italics">config/rm/deployment/GCMNodeSourceApplication.xml</emphasis>.
			</para>
		</listitem>
		<listitem>
			<para>
				<emphasis>pa.rm.gcmd.path.property.name</emphasis>:
				string in the default GCM application that will be replaced by a path to a GCM deployment descriptor.
				See <xref linkend="GCM_customized"/> part.
				Default is <emphasis role="italics">gcmd.file</emphasis>.
			</para>
		</listitem>
		<listitem>
			<para>
				<emphasis>pa.rm.home</emphasis>:
				The resource Manager home directory.
				Default is <emphasis role="italics">.</emphasis>, but this property is overridden in Resource Manager launching scripts, rm-start[.bat],
				in order to build an absolute path of Resource Manager installation directory.
			</para>
		</listitem>
		<listitem>
			<para>
				<emphasis>pa.rm.nodesource.infrastructures</emphasis>:
				path to a file containing the list of supported infrastructures in the resource manager.
				Default is <emphasis role="italics">config/rm/nodesource/infrastructures</emphasis>.
			</para>
		</listitem>
		<listitem>
			<para>
				<emphasis>pa.rm.nodesource.policies</emphasis>:
				path to a file containing the list of supported node acquisition policies in the resource manager.
				Default is <emphasis role="italics">config/rm/nodesource/policies</emphasis>.
			</para>
		</listitem>
		<listitem>
			<para>
				<emphasis>pa.rm.nodesource.maxthreadnumber</emphasis>:
				max number of threads in node source for parallel execution of network activities
				Default is <emphasis role="italics">10</emphasis>.
			</para>
		</listitem>
		<listitem>
			<para>
				<emphasis>pa.rm.selection.maxthreadnumber</emphasis>:
				max number of threads in selection manager for parallel script execution of nodes
				Default is <emphasis role="italics">10</emphasis>.
			</para>
		</listitem>
		<listitem>
			<para>
				<emphasis>pa.rm.monitoring.maxthreadnumber</emphasis>:
				max number of threads in monitoring system to notify clients waiting for events.
				Default is <emphasis role="italics">5</emphasis>.
			</para>
		</listitem>
		<listitem>
			<para>
				<emphasis>pa.rm.jmx.connectorname</emphasis>:
				name of the JMX Connector for the RM (default is 'JMXRMAgent')
			</para>
		</listitem>
		<listitem>
			<para>
				<emphasis>pa.rm.jmx.port</emphasis>: Port number used by JMX.
				the port used for JMX service and the RMI protocol. It will create a RMI registry if needed.
			</para>
		</listitem>
		<listitem>
			<para>
				<emphasis>pa.rm.account.refreshrate</emphasis>:
				The statistics cache layer refresh rate. It is requested periodically by clients
				and in order to avoid data base contacting all the time, it is stored in dedicated structures.
				Default is <emphasis role="italics">10 secs</emphasis>.
			</para>
		</listitem>
		<listitem>
			<para>
				<emphasis>pa.rm.ec2.properties</emphasis>:
				path to the Amazon EC2 account credentials properties file,
				mandatory when using the EC2 Infrastructure.
				Default is <emphasis role="italics">config/rm/deployment/ec2.properties</emphasis>.
			</para>
		</listitem>
		<listitem>
			<para>
				<emphasis>pa.rm.auth.jaas.path</emphasis>:
				path to the Jaas configuration file which defines what modules are available for
				internal authentication.
				Default is <emphasis role="italics">config/authentication/jaas.config</emphasis>.
			</para>
		</listitem>
		<listitem>
			<para>
				<emphasis>pa.rm.auth.privkey.path</emphasis>:
				path to the Jaas configuration file which defines what modules are available for internal authentication.
				Default is <emphasis role="italics">config/authentication/keys/priv.key</emphasis>.
			</para>
		</listitem>
		<listitem>
			<para>
				<emphasis>pa.rm.auth.pubkey.path</emphasis>:
				path to the public key file which is used to encrypt credentials for authentication.
				Default is <emphasis role="italics">config/authentication/keys/pub.key</emphasis>.
			</para>
		</listitem>
		<listitem>
			<para>
				<emphasis>pa.rm.ldap.config.path</emphasis>:
				LDAP Authentication configuration file path, used to set LDAP configuration properties.
				Default is <emphasis role="italics">config/authentication/ldap.cfg</emphasis>.
			</para>
		</listitem>
		<listitem>
			<para>
				<emphasis>pa.rm.defaultloginfilename</emphasis>:
				login file name for file authentication method.
				Default is <emphasis role="italics">config/authentication/login.cfg</emphasis>.
			</para>
		</listitem>
		<listitem>
			<para>
				<emphasis>pa.rm.defaultgroupfilename</emphasis>:
				group file name for file authentication method.
				Default is <emphasis role="italics">config/authentication/group.cfg</emphasis>.
			</para>
		</listitem>
		<listitem>
			<para>
				<emphasis>pa.rm.authentication.loginMethod</emphasis>:
				property that defines the method that has to be used for logging users to the resource manager.
				Default is <emphasis role="italics">RMFileLoginMethod</emphasis>.
			</para>
		</listitem>
		<listitem>
			<para>
				<emphasis>pa.rm.db.hibernate.configuration</emphasis>:
				hibernate configuration file.
				Default is <emphasis role="italics">config/rm/database/hibernate/hibernate.cfg.xml</emphasis>.
			</para>
		</listitem>
		<listitem>
			<para>
				<emphasis>pa.rm.db.hibernate.dropdb</emphasis>:
				drop database before creating a new one.
				Default is <emphasis role="italics">false</emphasis>.
			</para>
		</listitem>
	</itemizedlist>
</section>
<section xml:id="rm_authentication"><info><title>Users authentication</title></info>
		<para> As presented before, clients of the resource manager are authenticated at connection time by
		providing their credentials incapsulating encripted login and a password.
		</para>

		<section xml:id="RM_authent_crypto"><info><title>KeyPair authentication</title></info>

		  <para>
		    Regardless of which method is actually used to perform the authentication,
		    credentials need to be passed from the client to the Resource Manager, through the network.
		    The data will be encrypted with an AES symmetric secret key to allow unlimited credentials size,
		    and the AES key itself will be encrypted with an RSA keypair.

		    <figure xml:id="RM_crypto_pic"><info><title>Credentials encryption</title></info>
		      <mediaobject>
			<imageobject>
			  <imagedata width="100%" fileref="images/png/rmCrypto.png" format="PNG"/>
			</imageobject>
		      </mediaobject>
		    </figure>
		  </para>


		  <para>
		    The Keypair can be generated with the <emphasis>key-gen[.bat]</emphasis> script:
		    <screen><![CDATA[
bin/unix $ ./key-gen -p $HOME/.proactive/priv.key -P $HOME/.proactive/pub.key
]]></screen>
		    Accordingly, the Resource Manager configuration must be set so that, when started:
		    <itemizedlist>
		      <listitem><para>
			  <emphasis>pa.rm.auth.privkey.path=</emphasis>$HOME/.proactive/priv.key
		      </para></listitem>
		      <listitem><para>
			  <emphasis>pa.rm.auth.pubkey.path=</emphasis>$HOME/.proactive/pub.key
		      </para></listitem>
		    </itemizedlist>
		    Although no encryption should be performed on server side, the public key should be known from the Resource Manager:
		    indeed, a client can request the public key to the Resource Manager so that it may encrypt its credentials to perform
		    authentication. This method does not require the Resource Manager's administrator to manually propagate public keys
		    to all its users.
		    Users can encrypt their credentials with the <emphasis>create-cred[.bat]</emphasis> script.
		    See <xref linkend="RM_API_start"/> for client-side configuration.
		  </para>
		</section>

		<section xml:id="rm_authent_select"><info><title>Select authentication method</title></info>
			<para>
			The resource manager manages users authentication and authorization, it has to store users account/password, and check login and password at connection.
			This storage of users accounts can be managed in two ways: by files, or by LDAP. A Resource Manager property (in config/rm/settings.ini)
			specifies which kind of authentication will be used:
			</para>
				<programlisting language="sh">
#Property that defines the method that has to be used for logging users to the Resource Manager
#It can be one of the following values:
#	- "RMFileLoginMethod" to use file login and group management
#	- "RMLDAPLoginMethod" to use LDAP login management
pa.rm.authentication.loginMethod=RMFileLoginMethod
				</programlisting>
			<para>
			By default, authentication method is by file (RMFileLoginMethod). If you want to use the LDAP-based authentication,
			replace the "RMFileLoginMethod" value by "RMLDAPLoginMethod".
			</para>
		</section>

		<section xml:id="file_rm_authent"><info><title>Configure file-based authentication</title></info>
			<para> By default, the resource manager stores users accounts, passwords, and group memberships (user or admin), in two files:
			</para>
			<itemizedlist>
				<listitem><para><emphasis>config/authentication/login.cfg</emphasis> stores users and passwords accounts.
				Each line has to look like <emphasis>user:passwd</emphasis>.
				The default login.cfg file is given hereafter:</para>
				<programlisting language="java">
admin:admin
user:pwd
demo:demo</programlisting>
				</listitem>
				<listitem><para><emphasis>config/authentication/group.cfg</emphasis> stores users membership. For each
				user registered in login.cfg, a group membership has to be defined in this file.
				Each line has to look like <emphasis>user:group</emphasis>. Group has to be <emphasis>user</emphasis> to have user
				rights, or <emphasis>admin</emphasis> to have administrator rights.
				Default group.cfg is like this:</para>
				<programlisting language="java">
admin:admin
demo:admin
user:user</programlisting>
				</listitem>
			</itemizedlist>
			<para>You can change the default paths of these two files. Edit file <emphasis>config/rm/settings.ini</emphasis> and change
			the two properties:
			</para>
			<itemizedlist>
				<listitem><para><emphasis>pa.rm.defaultloginfilename</emphasis> - To define a user/password file, change this line as follows:
				<emphasis role="bold">pa.rm.defaultloginfilename=/etc/rm/mylogins.cfg</emphasis></para>
				</listitem>
				<listitem><para><emphasis>pa.rm.defaultgroupfilenamee</emphasis> - To define a group membership file, change the line as follows:
				<emphasis role="bold">pa.rm.defaultloginfilename=/etc/rm/mygroups.cfg</emphasis></para>
				</listitem>
			</itemizedlist>
		</section>

		<section xml:id="LDAP_RM_authent"><info><title>Configure LDAP-based authentication</title></info>
			<para>
				The resource manager is able to connect to an existing LDAP, to check users login/password and verify users group membership.
				This authentication method can be used with existing LDAP server which is already configured.
				In order to use it, few parameters have to be configured, such as path in LDAP tree users,
				LDAP groups that define user and admin group membership,
				URL of the LDAP server, LDAP binding method used by connection
				and configuration of SSL/TLS if you want a secured connection between the resource manager and LDAP.
			</para>
			<para>
				We assume that LDAP server is configured in the way that:
				<itemizedlist>
					<listitem><para>
						all existing users and groups are located under single domain
					</para></listitem>
					<listitem><para>
						users have object class specified in parameter "pa.ldap.user.objectclass"
					</para></listitem>
					<listitem><para>
						groups have object class  specified in parameter "pa.ldap.group.objectclass"
					</para></listitem>
					<listitem><para>
						user and group name is defined in cn (Common Name) attribute
					</para></listitem>
				</itemizedlist>

				<programlisting language="sh">
# EXAMPLE of user entry
#
# dn: cn=jdoe,dc=example,dc=com
# cn: jdoe
# firstName: John
# lastName: Doe
# objectClass: inetOrgPerson

# EXAMPLE of group entry
#
# dn: cn=mygroup,dc=example,dc=com
# cn: mygroup
# firstName: John
# lastName: Doe
# uniqueMember: cn=djoe,dc=example,dc=com
# objectClass: groupOfUniqueNames</programlisting>
			</para>
			<para>
			<emphasis>settings.ini</emphasis> in <emphasis>config/rm</emphasis> directory, defines a path to a configuration file that contains all LDAP connection and authentication properties.
			Default value for this property defines a default configuration file: <emphasis>config/authentication/ldap.cfg</emphasis>. Specify your LDAP properties in this file. Properties are explained below.
			</para>
			<section xml:id="RM_LDAP_users_URL"><info><title>Set LDAP url</title></info>
				<para> First, you have to define the LDAP's URL of your organisation. This address corresponds to the property: <emphasis>pa.ldap.url</emphasis>.
				 You have to put a standard LDAP-like URL, for example <emphasis>ldap://myLdap</emphasis>. You can also set an URL with secure access: <emphasis>ldaps://myLdap:636</emphasis>.
				 See <xref linkend="RM_LDAP_SSL"/> for SSL/TLS configuration.
				 </para>
			</section>
			<section xml:id="RM_LDAP_users_subtree"><info><title>Define object class of user and group entities</title></info>
				<para>Then you need to define how to differ user and group entities in LDAP tree.
				The users object class is defined by property <emphasis>pa.ldap.user.objectclass</emphasis> and by default is <emphasis role="italics">"inetOrgPerson"</emphasis>.
				For groups, the property <emphasis>pa.ldap.group.objectclass</emphasis> has a default value <emphasis role="italics">"groupOfUniqueNames"</emphasis> which could
				be changed.
				</para>
			</section>
			<section xml:id="RM_LDAP_binding_method"><info><title>Configure LDAP authentication parameters</title></info>
				<para>
				By default, the resouce manager binds to LDAP in anonymous mode. You can change this authentication method by modifying the property <emphasis>pa.ldap.authentication.method</emphasis>.
				This property can have several values:
				<itemizedlist>
					<listitem><para><emphasis>none</emphasis> (default value) - the resource manager performs connection to LDAP in anonymous mode.</para>
					</listitem>
					<listitem><para><emphasis>simple</emphasis> - the resource manager performs connection to LDAP with a specified login/password (see below for user password setting).</para>
					</listitem>
					<listitem><para>You can also specify a SASL mechanism for LDAPv3. There are many SASL available mechanisms:
					<emphasis>cram-md5</emphasis>, <emphasis>digest-md5</emphasis>, <emphasis>kerberos4</emphasis>... Just put <emphasis>sasl</emphasis> to this property
					to let the resource manager JVM choose SASL authentication mechanism.</para>
					</listitem>
				</itemizedlist>
				</para>
				<para>
				If you specify an authentication method different from 'none' (anonymous connection to LDAP),
				you must specify a login/password for authentication. There are two properties to set in LDAP configuration file:
				<itemizedlist>
					<listitem><para><emphasis>pa.ldap.bind.login</emphasis> - sets user name for authentication.</para>
					</listitem>
					<listitem><para><emphasis>pa.ldap.bind.pwd</emphasis> - sets password for authentication.</para>
					</listitem>
				</itemizedlist>
				</para>
		</section>
		<section xml:id="RM_LDAP_SSL"><info><title>Set SSL/TLS parameters</title></info>
			<para>
				The ProActive Resource Manager is able to communicate with LDAP with a secured SSL/TLS layer. It can be useful if your network is not trusted, and critical information are transmitted
				between the rm server and LDAP, such as user passwords.
				First, set the LDAP URL property <emphasis>pa.ldap.url</emphasis> to a URL of type <emphasis role="italics">ldaps://myLdap</emphasis>.
				Then set <emphasis>pa.ldap.authentication.method</emphasis> to <emphasis role="italics">none</emphasis> so as to delegate authentication to SSL.
				</para>
				<para>For using SSL properly, you have to specify your certificate and public keys for SSL handshake. Java stores
				certificates in a keyStore and public keys in a trustStore. In most of the cases, you just have to define a trustStore with public
				key part of LDAP's certificate. Put certificate in a keyStore, and public keys in a trustStore
				with the keytool command (keytool command is distributed with standard java platforms):
				</para>
				<screen>keytool -import -alias myAlias -file myCertificate -keystore myKeyStore</screen>
				<para>
				<emphasis>myAlias</emphasis> is the alias name of your certificate, <emphasis>myCertificate</emphasis> is your private certificate file and
				<emphasis>myKeyStore</emphasis> is the new keyStore file produced in output. This command asks you to enter a password for your keyStore.
				</para>
				<para>
				Put LDAP certificate's public key in a trustStore, with the keytool command:
				</para>
				<screen>keytool -import -alias myAlias -file myPublicKey -keystore myTrustStore</screen>
				<para>
				<emphasis>myAlias</emphasis> is the alias name of your certificate's public key, <emphasis>myPublicKey</emphasis> is your certificate's public
				key file and <emphasis>myTrustore</emphasis> is the new trustStore file produced in output. This command asks you to enter a password for your trustStore.
				</para>
				<para>
				Finally, in <emphasis>config/authentication/ldap.cfg</emphasis>, set keyStore and trustStore created before to their respective passwords:
				</para>
				<itemizedlist>
					<listitem><para>
					Set <emphasis>pa.ldap.keystore.path</emphasis> to the path of your keyStore.</para>
					</listitem>
					<listitem><para>
					Set <emphasis>pa.ldap.keystore.passwd</emphasis> to the password defined previously for keyStore.</para>
					</listitem>
					<listitem><para>
					Set <emphasis>pa.ldap.truststore.path</emphasis> to the path of your trustStore.</para>
					</listitem>
					<listitem><para>
					Set <emphasis>pa.ldap.truststore.passwd</emphasis> to the password defined previously for trustStore.</para>
					</listitem>
				</itemizedlist>
			</section>
			<section xml:id="RM_LDAP_fall-back"><info><title>Use fall back to file authentication</title></info>
				<para>You can use simultaneously file-based authentication and LDAP-based authentication.
				Then Resource Manager can check user password and group membership in login and group files, as performed in FileLogin method,
				if user or group is not found in LDAP. It uses <emphasis role="bold">pa.rm.defaultloginfilename</emphasis>  and
				<emphasis role="bold">pa.rm.defaultgroupfilename</emphasis> files to authenticate user and check group membership.
				There are two rules:
				</para>
				<itemizedlist>
					<listitem><para>
					If LDAP group membership checking fails, fall back to group membership checking with group file.
					To activate this behavior set <emphasis>pa.ldap.group.membership.fallback</emphasis>
					to <emphasis>true</emphasis>, in LDAP configuration file.</para>
					</listitem>
					<listitem><para>
					If a user is not found in LDAP, fall back to authentication and group membership checking with login and group files.
					To activate this behavior, set <emphasis>pa.ldap.authentication.fallback</emphasis> to <emphasis>true</emphasis>, in
					LDAP configuration file.</para>
					</listitem>
				</itemizedlist>
			</section>
		</section>
</section>
<section xml:id="rm-jaas"><info><title>User authorization</title></info>
<para>
	All users authenticated in the resource manager have they own role according to granted permissions.
	In the resource manager, we use standard Java Authentication and Authorization Service (JAAS)
	to address these needs. Security support on the method call level is provided by ProActive
	programming. This mechanism will not be discussed here and is described in details in the
	<link xlink:href="http://proactive.inria.fr/trunk/Programming/AdvancedFeatures/multiple_html/Security.html">ProActive Programming documentation</link>.
</para>
<para>
	On the resource manager, level permissions allow to:
	<itemizedlist>
		<listitem><para>
			perform user actions, like get/release nodes, add/remove node, etc.
		</para>
		</listitem>
		<listitem><para>
			access node sources and limit nodes utilization to particular user/group
		</para>
		</listitem>
	</itemizedlist>
</para>
<para>
	Users are organized in groups and after authentication each of them has a single UserPrincipal
	and some GroupPrincipals (may not have them). Using this principals, the permissions are granted in
	the security policy file, like the following:
	<programlisting language="java">
grant principal org.ow2.proactive.authentication.principals.UserNamePrincipal "john" {
    permission org.ow2.proactive.permissions.MethodCallPermission "org.ow2.proactive.resourcemanager.core.RMCore.getAtMostNodes";
    permission org.ow2.proactive.permissions.MethodCallPermission "org.ow2.proactive.resourcemanager.core.RMCore.releaseNodes";
};
	</programlisting>
	This means that user "john" can request nodes for computations and release them. It
	cannot perform any administrative actions (they have to be listed explicitly).
</para>
<para>
	Permissions could be granted to groups and in this case will be applicable to all group members. For example,
	we may define a group of users who provides computing resourses. We allow them to call add/remove nodes methods,
	so that they will be able to add their nodes to the resource manager.
	<programlisting language="java">
grant principal org.ow2.proactive.authentication.principals.GroupNamePrincipal "providers" {
    permission org.ow2.proactive.permissions.MethodCallPermission "org.ow2.proactive.resourcemanager.core.RMCore.getAtMostNodes";
    permission org.ow2.proactive.permissions.MethodCallPermission "org.ow2.proactive.resourcemanager.core.RMCore.getExactlyNodes";
    permission org.ow2.proactive.permissions.MethodCallPermission "org.ow2.proactive.resourcemanager.core.RMCore.releaseNode";
    permission org.ow2.proactive.permissions.MethodCallPermission "org.ow2.proactive.resourcemanager.core.RMCore.releaseNodes";

    permission org.ow2.proactive.permissions.MethodCallPermission "org.ow2.proactive.resourcemanager.core.RMCore.addNode";
    permission org.ow2.proactive.permissions.MethodCallPermission "org.ow2.proactive.resourcemanager.core.RMCore.removeNode";

    permission org.ow2.proactive.permissions.MethodCallPermission "org.ow2.proactive.resourcemanager.core.RMCore.getNodesList";
    permission org.ow2.proactive.permissions.MethodCallPermission "org.ow2.proactive.resourcemanager.core.RMCore.getNodeSourcesList";
    permission org.ow2.proactive.permissions.MethodCallPermission "org.ow2.proactive.resourcemanager.core.RMCore.getFreeNodesNumber";
    permission org.ow2.proactive.permissions.MethodCallPermission "org.ow2.proactive.resourcemanager.core.RMCore.getTotalNodesNumber";
    permission org.ow2.proactive.permissions.MethodCallPermission "org.ow2.proactive.resourcemanager.core.RMCore.getTotalAliveNodesNumber";
    permission org.ow2.proactive.permissions.MethodCallPermission "org.ow2.proactive.resourcemanager.core.RMCore.getRMState";
    permission org.ow2.proactive.permissions.MethodCallPermission "org.ow2.proactive.resourcemanager.core.RMCore.getState";
    permission org.ow2.proactive.permissions.MethodCallPermission "org.ow2.proactive.resourcemanager.core.RMCore.isActive";
    permission org.ow2.proactive.permissions.MethodCallPermission "org.ow2.proactive.resourcemanager.core.RMCore.isAlive";
    permission org.ow2.proactive.permissions.MethodCallPermission "org.ow2.proactive.resourcemanager.core.RMCore.getMonitoring";

    permission org.ow2.proactive.permissions.MethodCallPermission "org.ow2.proactive.resourcemanager.core.RMCore.disconnect";
};
	</programlisting>
	But having the permission of add/remove method call is not enough to actually add nodes. As all the nodes
	in the resource manager are organized in node sources user has to have the node source administration permission.
	This permission cannot be granted in java security policy file and defines at
	node source creation time by specifying which group or user will use nodes from this source and
	administrate them.
</para>
<para>
	There is a permission which authorized to perform any actions. For this needs, we have implemented
	custom <emphasis role="italics">org.ow2.proactive.permissions.AllPermission</emphasis> to seperate an absulute freedom inside
	the resource manager from JVM. The following is the usage of this permission in group
	of administrators:
	<programlisting language="java">
grant principal org.ow2.proactive.authentication.principals.GroupNamePrincipal "admin" {
    permission org.ow2.proactive.permissions.AllPermission;
};
	</programlisting>
	The longest security check is at the moment of removing node. Here we verify that the user
	<itemizedlist>
		<listitem><para>
			can call <emphasis role="italics">removeNode</emphasis> method
		</para>
		</listitem>
		<listitem><para>
			can administrate the node source where the node is
		</para>
		</listitem>
		<listitem><para>
			is the one who added the node (or has AllPermission)
		</para>
		</listitem>
	</itemizedlist>
</para>
<para>
	In order to use JMX monotoring interface, the standart <emphasis role="italics">javax.management.MBeanPermission</emphasis> has to be granted.
	Through JMX, we expose an account data as well and for non-admin users we show them only their accounts
	<programlisting language="java">
grant principal org.ow2.proactive.authentication.principals.GroupNamePrincipal "user" {
	...
    // AuthPermission is requires for those who would like to access any mbean
    permission javax.security.auth.AuthPermission "getSubject";
    permission javax.management.MBeanPermission "-#-[-]", "queryNames";
    permission javax.management.MBeanPermission "javax.management.MBeanServerDelegate#-[JMImplementation:type=MBeanServerDelegate]", "addNotificationListener";
    permission javax.management.MBeanPermission "org.ow2.proactive.scheduler.core.jmx.mbean.MyAccountMBeanImpl#*[*:*]", "*";
    permission javax.management.MBeanPermission "org.ow2.proactive.resourcemanager.core.jmx.mbean.MyAccountMBeanImpl#*[*:*]", "*";
    permission javax.management.MBeanPermission "org.ow2.proactive.resourcemanager.core.jmx.mbean.RuntimeDataMBeanImpl#*[*:*]", "*";
    ...
};
	</programlisting>
</para>
<para>
	The default java security file used with the resource manager is located in config directory
	<emphasis role="bold">$RM_HOME/config/security.java.policy-server</emphasis>.
</para>
</section>
</section>
