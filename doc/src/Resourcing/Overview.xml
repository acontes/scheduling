<?xml version="1.0" encoding="utf-8"?><chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="Resource_Manager"><info><title>Overview</title></info>

		<section xml:id="Introduction"><info><title>Overview</title></info>
			<para>
				The ProActive Resource Manager is the software for coupling distributed resources
				in order to solve large-scale problems. The distributed resources are represented
				by Java virtual machines (JVM) which can be launched on desktop computers, clusters
				or clouds. The resource manager provides a single point of access to all resources
				enabling an effective way of selecting them for computations with the criteria you need.
			</para>
			<para>
				More precisely, the resource manager does the following:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						Deploys nodes (launch JVMs) automatically to different types of infrastructure
						(i.e. grid, cloud, another resource manager, etc).
					</para>
				</listitem>
				<listitem>
					<para>
						Maintains and monitors the list of resources and manages their states
						(i.e. free, busy, down).
					</para>
				</listitem>
				<listitem>
					<para>
						Supplies computing nodes to users based on user criteria
						(i.e. specific operating system, available resources or licenses and many others).
					</para>
				</listitem>
			</itemizedlist>
			<note>
				<para>
					In the following sections, the term "ProActive Resource Manager" will be used to describe the whole application (including
					the client interface for using the provided nodes) whereas the term "resource manager" will be used only to describe
					the server part (for managing resources) of the ProActive Resource Manager.
				</para>
			</note>
		</section>
		<section xml:id="architecture"><info><title>Basic concepts</title></info>

			<section xml:id="sc"><info><title>Server and client parts</title></info>

				<para>
					ProActive Resource Manager is a client/server application where each part
					can be described as follows:
				</para>
				<itemizedlist>
					<listitem>
						<para>
							<emphasis>Server</emphasis> -
							The server part of ProActive Resource Manager,
							called just "resource manager" from now on, selects nodes
							according to user requests, restricts an access to these
							nodes to other users, monitors nodes states and provides
							up-to-date information about resources utilization. Once
							nodes are selected and given to a user, it has a direct
							access to them. When user finishes its computation it releases
							nodes by contacting the resource manager.
						</para>
					</listitem>
					<listitem>
						<para>
							<emphasis>Client</emphasis> -
							The person or entity requesting nodes for computation from
							the resource manager. The main client example is ProActive
							Scheduler which requests nodes when it has jobs to execute.
							However, it could be anyone who wants to directly run
							a distributed application on already existing nodes having
							an exclusive access to them. Clients also may trigger automatic
							nodes deployment, manually add and remove nodes to the resource manager.
						</para>
					</listitem>
				</itemizedlist>
			</section>
			<section xml:id="cn"><info><title>Computing node</title></info>
				<itemizedlist>
				<listitem>
					<para>
						<emphasis>Node</emphasis> -
						The resource manager is written in JAVA using ProActive Parallel Suite
						and is able to communicate with remote JVMs that are also
						running ProActive (the same version of ProActive that is used
						in the resource manager). A node inside such a JVM is just a
						logical container for activities and it can be seen as an entry point
						to the JVM. Each ProActive JVM may have one or more
						nodes to perform computations and it is just a matter of how the JVM is
						exposed to the external world (in term of number of entry points).
						The number of running JVMs per host and
						nodes per JVM are up to the resource providers but here there is always
						a tradeoff between performance and reliability. The maximum performance
						can be achieved when only one JVM is running on host and all users
						run their computation on this JVM simultaneously having an access to the
						same address space in memory. If it is not acceptable, only one node per JVM can be
						exposed. In this case, two users cannot run their computation
						in parallel on a single JVM.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>Nodes deployment</emphasis> -
						The process of launching JVMs with ProActive nodes for further utilization
						for computations. At this moment, users can configure proper number of JVMs per host
						and nodes per JVM and many other parameters like infrastructure type.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>Adding nodes</emphasis> -
						Once the JVMs launched, all nodes have to be registered in the
						resource manager in order to be used. To do that, they send a request to add them
						providing their urls.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>Acquiring nodes</emphasis> -
						When the resource manager receives the request of adding nodes,
						it contacts them and obtains the basic information about
						each node.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>Getting nodes</emphasis> -
						When a client of the resource manager needs to run computations, it
						asks for nodes providing nodes criteria. Nodes which are found, are marked as
						busy which means that other clients cannot use them.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>Releasing nodes</emphasis> -
						Once the computations completed, client releases nodes and they become available for
						others.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>Removing nodes</emphasis> -
						At any time, nodes could be removed from the resource manager. At this moment, JVM
						will be killed unless there is some activity still running there. Administrator can also
						remove nodes preemptively without waiting for computations to be completed.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>Nodes states</emphasis> -
						In order to provide an access to shared resources, the resource manager
						maintains different node states:
					</para>
						<itemizedlist>
							<listitem>
								<para>
									<emphasis>Free</emphasis> -
									Node is available for computations.
								</para>
							</listitem>
							<listitem>
								<para>
									<emphasis>Busy</emphasis> -
									Node has been given to user to execute computations.
								</para>
							</listitem>
							<listitem>
								<para>
									<emphasis>To be removed</emphasis> -
									Node is busy but requested to be removed. So it
									will be removed once the client will release it.
								</para>
							</listitem>
							<listitem>
								<para>
									<emphasis>Down</emphasis> -
									Node is unreachable or down and
									cannot be used anymore.
								</para>
							</listitem>
						</itemizedlist>
				</listitem>
				</itemizedlist>
			</section>
			<section xml:id="ns"><info><title>Node source</title></info>
				<itemizedlist>
				<listitem>
					<para>
						<emphasis>Node Source</emphasis> -
						A node source is defined by an infrastructure and a policy. All the nodes belonging to the same
						node source will be launched on the same infrastructure, with the same manner (protocol, job submission, ...) and at the time
						defined by the policy (for details see <xref linkend="nodes_sources"/>).
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>Infrastructure manager</emphasis> - The part of node source responsible for
						node deployment to the particular infrastructure. For instance, it may launch JVM over ssh
						or by submitting a specific job to the native scheduler of the system.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>Policy</emphasis> - The part of node source defining rules and limitations
						of node source utilization. All policies require to define administrator of the
						node source and a set of its users, so that you can limit nodes utilization.
						Beside, the policy defines rules of nodes deployment, like static deployment
						(all nodes are launched at the moment of node source creation and never removed) or time slot
						deployment (nodes are deployed for particular time) or others.
					</para>
				</listitem>
				</itemizedlist>
			</section>
		</section>
		<section xml:id="arch"><info><title>Architecture</title></info>
				<para>
					Basically, the ProActive Resource Manager is a client/server application. Clients are remote
					and may administrate or monitor the resource manager state by means of command line and
					graphical user interface. They also may request nodes for computations using Java API. The
					communication between clients, server and nodes are performed by ProActive.
					Administrative actions, like node deployment, are delegated by the resource manager core
					to node sources and infrastructure managers. User requests of getting nodes are processed by selection manager
					which may contact nodes at the request time and execute some code there in order to know
					whether the node is suitable. Once user has obtained nodes, he contacts them
					directly without involving the resource manager. Yet, it is required that a user who
					runs computations on nodes remains connected to the resource manager, otherwise these nodes will be released.
				</para>
				<figure xml:id="RM_architecture"><info><title>The ProActive Resource Manager architecture</title></info>

					<mediaobject>
						<imageobject>
							<imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/rm_overview.png" format="PNG"/>
						</imageobject>
					</mediaobject>
				</figure>
		</section>
</chapter>
