<?xml version="1.0" encoding="utf-8"?><section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="RM_API"><info><title>Administration with Java API</title></info>
<!-- <!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V5.0//EN" "docbook.dtd">  -->

	<para>
	The ProActive Resource Manager can be used directly from the Java code through its Java API. This chapter explains
	how to do that, namely how to start and stop the resource manager, add existing nodes and deploy
	new nodes with GCM deployment descriptors.
	</para>
	<section xml:id="RM_API_start"><info><title>Start and stop the resource manager</title></info>
		<para>
			Resource Manager can be started locally using a static method of RMFactory class:
		</para>
		<programlisting language="java"><textobject><textdata fileref="automatic_snippets/JavaAPIAdmin_RM_Start.snip"/></textobject></programlisting>
		<para>
		In order to perform any operations with the Resource Manager, you have to authorize and
		acquire ResourceManager interface. This action is the same as the one we saw in <xref linkend="RM_API_connecting"/>.
		Refer to that section to know how to get a reference towards the resource manager in order to be able to perform
		actions authorized by your permissions. For example, as an administrator, you are able to shutdown the resource manager:
		</para>
		<programlisting language="java"><textobject><textdata fileref="automatic_snippets/JavaAPIAdmin_Shutdown.snip"/></textobject></programlisting>
		<para>
		This method terminates all RM's active objects and stops JVM where RMCore is running on. The boolean parameter that it takes in argument
		defines whether the Resource Manager stops immediately, even if there are some busy
		nodes (i.e. some nodes have been provided to an application) or waits until applications
		give them back.
		</para>
	</section>

	<section xml:id="RM_API_add_node"><info><title>Register an existing node</title></info>
		<para>
			ResourceManager provides a way to add ProActive nodes that are already deployed. Nodes are added using their URLs.
		</para>
		<programlisting language="java"><textobject><textdata fileref="automatic_snippets/JavaAPIAdmin_AddNode.snip"/></textobject></programlisting>
		<note>
			<para>To start a node, you can use the <literal>rm-start-node</literal> script:</para>
			<screen>$RM_HOME/bin/[os]> rm-start-node rmi://kisscool.inria.fr:1099/MyNode</screen>
		</note>
	</section>
	<section xml:id="RM_API_remove_node"><info><title>Remove a node from the resource manager</title></info>
		<para>
		You can remove a node from Resource Manager with the code:
		</para>
		<programlisting language="java"><textobject><textdata fileref="automatic_snippets/JavaAPIAdmin_RemoveNode.snip"/></textobject></programlisting>
		<para>
			The first parameter is the URL of the node to remove and the second one is a boolean.
			If this boolean is set to true, the resource manager removes immediately the node even if it is busy.
			If this boolean is set to false and the node is busy, the resource manager waits until
			the user using the node releases it. Once the node is released the RM removes it.
		</para>
	</section>
	<section xml:id="RM_API_custom_node_source"><info><title>Create a node source</title></info>
		<para>
			You can create different node sources using the ResourceManager interface.
			Let us take a look at the following example to know how to create one of them:
		</para>
		<programlisting language="java"><textobject><textdata fileref="automatic_snippets/JavaAPIAdmin_NodeSource.snip"/></textobject></programlisting>
		<para>
			The node source is created with the ssh infrastructure manager and a static policy. The ssh infrastructure takes 6 parameters:
			the path to the java executable, the Resource Manager home directory, the protocol and the port that will be used to access created nodes,
			the list of Java options and finally, the list of hosts. For the static policy, 2 parameters has to be provided:
			the permission for node utilization and the permission for providing nodes. The provider permission specifies users who can add nodes to this node
			source and is one of the followings: "ME", "MY_GROUPS", "ALL". The utilization permission defines who can obtain nodes for
			computations from this node source and must be one
			of the followings: "ME" (node source creator), "MY_GROUPS", "PROVIDER", "PROVIDER_GROUPS", "ALL".
			In the previous example, only the user who has
			created the node source, that is "admin", can add nodes to it but every user belonging to his groups can use them.
		</para>

		<note>
			<para>
				In order to know the needed parameters for every infrastructure type and policy, you can use the command line interface. Please read
				<xref linkend="rm_admin_console" />
			</para>
		</note>
	</section>
</section>
