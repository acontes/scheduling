// Returns a ProActiveDescriptor object from the xml 
// descriptor file name 
ProActiveDescriptor pad = PADeployment.getProActiveDescriptor(String File); 

// Activates the given Virtual Node: launches or acquires 
// all the JVMs the VN is mapped onto
pad.activateMapping(String VN); 

// Activates all VNs defined in the ProActiveDescriptor 
pad.activateMappings(); 

// Created  at once a group of AO of type 'A' in the JVMs specified 
// by the given VN. The Virtual Node is automatically activated if not 
// explicitly done before 
VirtualNode vn = pad.getVirtualNode(String) 

// Returns all nodes mapped to the target Virtual Node 
Node[] n = vn.getNodes(); 

// Returns a reference to all AOs deployed on the target Node 
Object[] n[0].getActiveObjects(); 

// Returns a reference to the ProActive Runtime (the JVM) where the 
// node has been created 
ProActiveRuntime part = n[0].getProActiveRuntime(); 

// Kills all the JVMs deployed with the descriptor 
// not softly(false): all JVMs are killed abruptly 
// softly(true): all JVMs that originated the creation of a RMI registry 
// wait until the registry is empty before dying
pad.killall(boolean softly); 
