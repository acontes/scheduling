<?xml version="1.0" encoding="UTF-8"?>
<project default="deploy.common" basedir=".">
	<!--
		Available properties are:
			-Dtest='unitTests/**/*.class'		Override the default testsuite for junit* targets
			-Dversion="3.2.1"					Tag a build with this version
	-->

	<!--
		Create a timestamp for this build
		If ${version} is defined its value is used as string version for this build
		Otherwise the timestamp is used
	-->

	<!-- Version setting example-->
	<!-- <property name="version" value="2.0.0" /> -->
	<!-- Release date -->
	<!-- <property name="release.date" value="17 Dec. 2009" /> -->

	<!-- ************
		Imports
	-->

	<property file="${user.home}/.proactive/build.properties" />
	<import file="common-env.xml" />


	<!-- ************
		Taskdefs
	-->

	<taskdef name="if" classname="ise.antelope.tasks.IfTask" />

	<!-- ************
		MacroDef Stub generator and checker
	-->

    <macrodef name="generateorcheck_stub_for_class">
        <attribute name="targetedClasspath"/>
        <attribute name="srcDir"/>
        <attribute name="class"/>
        <attribute name="mode"/>
        <element name="extra.exclusion.pattern" optional="yes"/>
        <sequential>
        	<if>
        		<bool>
        		   <equals arg1="@{mode}" arg2="check"/>
        		</bool>
	        		<java classname="org.objectweb.proactive.ext.util.StubChecker" fork="true">
	                    <classpath path="${proactive.jar}" />
	                    <arg value="-class"/>
	                    <arg value="@{class}"/>
						<arg value="-rootDirV1"/>
					    <arg value="${base.dir}"/>
	                    <arg value="-rootDirV2"/>
	                    <arg value="${rootDirV2}"/>
	                </java>
        		<else>
                    <java classname="org.objectweb.proactive.ext.util.StubGenerator" fork="true" failonerror="true">
                        <classpath refid="@{targetedClasspath}" />
                        <arg value="-srcDir"/>
                        <arg value="@{srcDir}"/>
                        <arg value="-class"/>
                        <arg value="@{class}"/>
                        <arg value="-verbose"/>
                    </java>
        		</else>
        	</if>
        </sequential>
    </macrodef>
	
	<!-- ************
		Classpath
	-->

	<tstamp>
		<format property="TODAY" pattern="yyyy-MM-dd" />
	</tstamp>

	<if name="version">
		<property name="isRelease" value="true" />

		<else>
			<property name="version" value="${TODAY}" />
		</else>
	</if>

	<!-- ************
		Compilation
	-->

	 <target name="compile.common" description="Compile commmon stuffs">
 		<taskdef name="stubGenerator" classname="ant.AntStubGenerator" classpath="${proactive.utils.jar}" />
 		<typedef name="class" classname="ant.AntStubGeneratorClass" classpath="${proactive.utils.jar}" />
       
	 	<mkdir dir="${cl.common.dir}"/>

		<copy toDir="${cl.common.dir}">
				<fileset dir="${src.common}" excludes="**/*.java"/>
		</copy>

        <javac
                srcdir="${src.common}"
                destdir="${cl.common.dir}"
                deprecation="on"
                source="${source}"
                debug="${debug}"  >

                <classpath refid="common.libs"/>
                <include name="**/*.java"/>
        </javac>

	 	<stubGenerator srcDir="${cl.common.dir}" refclasspath="common.classpath">
	 		<class name="org.ow2.proactive.scripting.ScriptHandler" />
	 		<class name="org.ow2.proactive.jmx.provider.ro.ROServerImpl" />
			<class name="org.ow2.proactive.jmx.provider.ro.ROConnection" />
	 		<class name="org.ow2.proactive.utils.NodeSet" />
	 		<class name="org.ow2.proactive.scripting.ScriptResult" />
		</stubGenerator>
      </target>
	
    <!-- ************
		Deploy
	-->

	<target name="-deployCopy" >
		<mkdir dir="${deploy.lib.dir}"/>
		<copy todir="${deploy.lib.dir}" flatten="yes">
			<fileset dir="${lib.dir}" includes="**/*.jar"/>
        </copy>
        <copy todir="${deploy.lib.dir}" flatten="no">
            <fileset dir="${lib.dir}/matsci" includes="**/*.so"/>
            <fileset dir="${lib.dir}/matsci" includes="**/*.dll"/>
        </copy>
		<copy todir="${deploy.lib.dir}" flatten="no">
            <fileset dir="${lib.dir}/ProActive" includes="*.dll"/>
        </copy>
        <copy todir="${deploy.dir}/scripts">
		   <fileset dir="${scripts.dir}"/>
		</copy>
		<chmod perm="755">
                <fileset dir="${deploy.dir}/scripts" />
                <include name="**/*.sh" />
				<include name="processbuilder/linux/suer32" />
				<include name="processbuilder/linux/suer64" />
		</chmod>
    </target>

	<target name="deploy.common" depends="-deployCopy, compile.common" description="Creates common core jar">
		<jar destfile="${deploy.lib.dir}/${srm.common.jar}" manifest="${basedir}/common-Manifest-base.mf" index="true">
			<fileset dir="${cl.common.dir}" includes="**" />
			<indexjars>
				<fileset refid="jar.index.fileset" />
			</indexjars>
        </jar>
	</target>

	<target name="deploy.common.client" depends="-deployCopy, compile.common" description="Creates common client jar">
			<jar destfile="${deploy.lib.dir}/${srm.common.client.jar}" manifest="${basedir}/common-Manifest-base.mf" index="true">
				<fileset dir="${cl.common.dir}">
					<include name="org/ow2/proactive/Main.class" />
					<include name="org/ow2/proactive/authentication/Loggable.class" />
					<include name="org/ow2/proactive/authentication/Connection.class" />
					<include name="org/ow2/proactive/authentication/Authentication.class" />
					<include name="org/ow2/proactive/authentication/AuthenticationImpl.class" />
					<include name="org/ow2/proactive/authentication/crypto/**" />
					<include name="org/ow2/proactive/jmx/**" />
					<include name="org/ow2/proactive/db/types/**" />
					<include name="org/ow2/proactive/topology/**" />
					<include name="org/ow2/proactive/scripting/**" />
					<include name="org/ow2/proactive/permissions/**" />
					<include name="org/ow2/proactive/account/**" />
					<include name="org/ow2/proactive/utils/**" />
					<include name="pa/stub/**" />
				</fileset>
				<indexjars>
					<fileset refid="jar.index.fileset" />
				</indexjars>
	        </jar>
		</target>

	<!-- ************
		ing
	-->
	<if name="proactive.test.fork">
		<property name="fork_mode" value="-Dproactive.test.fork"/>
		<else>
			<property name="fork_mode" value="-Dproactive.test.nofork"/>
		</else>
	</if>
	
	<if name="proactive.test.runAsMe">
		<property name="runAsMe_mode" value="-Dproactive.test.runAsMe"/>
		<else>
			<property name="runAsMe_mode" value="-Dproactive.test.notRunAsMe"/>
		</else>
	</if>
	
	<if name="proactive.test.login.user">
		<property name="userlogin" value="-Dproactive.test.login.user=${proactive.test.login.user}"/>
		<else>
			<property name="userlogin" value="-Dproactive.test.noLoginSpecified.user"/>
		</else>
	</if>
	
	<if name="proactive.test.password.user">
		<property name="userpassword" value="-Dproactive.test.password.user=${proactive.test.password.user}"/>
		<else>
			<property name="userpassword" value="-Dproactive.test.noPasswordSpecified.user"/>
		</else>
	</if>
	
	<if name="proactive.test.login.admin">
			<property name="adminlogin" value="-Dproactive.test.login.admin=${proactive.test.login.admin}"/>
			<else>
				<property name="adminlogin" value="-Dproactive.test.noLoginSpecified.admin"/>
			</else>
		</if>
		
		<if name="proactive.test.password.admin">
			<property name="adminpassword" value="-Dproactive.test.password.admin=${proactive.test.password.admin}"/>
			<else>
				<property name="adminpassword" value="-Dproactive.test.noPasswordSpecified.admin"/>
			</else>
		</if>
	
	<if name="pas.launcher.forkas.method">
		<property name="forkas_method" value="-Dpas.launcher.forkas.method=${pas.launcher.forkas.method}"/>
		<else>
			<property name="forkas_method" value="-Dproactive.test.noForkasMethod"/>
		</else>
	</if>
	
	<macrodef name="junitMacro">
		<attribute name="testsuite"/>
		<attribute name="testclasspath"/>
		<attribute name="log4jconfig"/>
		<element name="jvmargs" optional="yes" />
		<element name="additionalClasspath" optional="yes" />

		<sequential>
			<delete dir="${base.dir}/SCHEDULER_DB" />
			<mkdir dir="${junit.dir}" />
			<junit printsummary="yes" forkmode="perTest" showoutput="${junit.showoutput}" timeout="1920000">
				<jvmarg value="-Dproactive.home=${base.dir}" />
				<jvmarg value="-Dpa.scheduler.home=${base.dir}" />
				<jvmarg value="-Dpa.rm.home=${base.dir}" />
				<jvmarg value="-Dproactive.test.timeout=1800000" /> 
				<jvmarg value="${fork_mode}" />
				<jvmarg value="${runAsMe_mode}" />
				<jvmarg value="${userlogin}" />
				<jvmarg value="${userpassword}" />
				<jvmarg value="${adminlogin}" />
				<jvmarg value="${adminpassword}" />
				<jvmarg value="${forkas_method}" />

				<classpath>
					<additionalClasspath />
					<path refid="@{testclasspath}" />
				</classpath>

				<jvmarg value="@{log4jconfig}"/>
				<jvmarg value="-Djava.security.policy=${base.dir}/config/security.java.policy-server" />
				<jvmarg value="-Dproactive.http.jetty.xml=${base.dir}/config/rm/deployment/jetty.xml"/>
				<jvmargs />

				<!--
					Remote Debug:
					<jvmarg value="-Xdebug" />
					<jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000" />

					Yourkit (don't forget to set your LD_LIBRARY_PATH):
					<jvmarg value="-agentlib:yjpagent" />
				-->

				<formatter type="xml" />


				<batchtest fork="yes" todir="${junit.dir}">
					<fileset refid="@{testsuite}" />
				</batchtest>
			</junit>
		</sequential>
	</macrodef>

	<target name="with.clover">
		<taskdef resource="cloverlib.xml" classpath="${base.dir}/compile/lib/clover.jar" />
		<clover-setup initString="${compile.dir}/ProActiveCoverage.db" />
	</target>

	<macrodef name="eclipse_format_m">
		<attribute name="loglevel" default="WARN" />
		<element name="sourcefileset" optional="false" />

		<sequential>
			<taskdef name="javaformatter" classname="org.hibernate.tool.ant.JavaFormatterTask">
				<classpath>
					<fileset dir="${dev.dir}/lib">
						<include name="*.jar" />
					</fileset>
				</classpath>
			</taskdef>

			<copy file="${compile.dir}/eclipse_formatter_config.xml" tofile="${compile.dir}/eclipse_formatter_config.properties" />

			<replaceregexp file="${compile.dir}/eclipse_formatter_config.properties" match='^&lt;(.xml|/?profile).*' replace="" byline="true" />

			<replaceregexp file="${compile.dir}/eclipse_formatter_config.properties" match='.*\"(.*)\".*\"(.*)\".*' replace="\1=\2" byline="true" />

			<javaformatter configurationFile="eclipse_formatter_config.properties">
				<sourcefileset />
			</javaformatter>
		</sequential>
	</macrodef>

	<target name="format" description="hibernate's eclipse-based source code formatter">
		<eclipse_format_m>
			<sourcefileset>
				<fileset dir="${src.common}" includes="**/*.java" />
				<fileset dir="${src.scheduler.dir}" includes="**/*.java" />
				<fileset dir="${src.scheduler.tests.dir}" includes="**/*.java" />
				<fileset dir="${src.rm.dir}" includes="**/*.java" />
				<fileset dir="${src.rm.tests.dir}" includes="**/*.java" />
				<fileset dir="${rcp.scheduler.dir}" includes="**/*.java" />
				<fileset dir="${rcp.rm.dir}" includes="**/*.java" />
			</sourcefileset>
		</eclipse_format_m>
	</target>

	<!-- ************
		Misc
	-->

	<target name="clean" description="Remove all generated files">
		<delete dir="${classes.dir}" />
		<delete dir="${release.dir}" />
		<delete dir="${deploy.dir}" />
		<delete dir="${classlibs.dir}" />
		<delete dir="${test.classes.dir}" />
		<delete file="tests.log" />
		<delete dir="${junit.dir}" />
		<!-- Database generated classes -->
		<delete file="${base.dir}/.logs/derby.log" />
		<subant target="doc.clean" inheritall="true">
			<fileset dir="../doc/toolchain" includes="doc.xml"/>
		</subant>
	</target>


	<target name="-init">
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${classes.dir}" />
		<mkdir dir="${cl.examples.dir}" />
		<mkdir dir="${cl.extra.dir}" />
		<mkdir dir="${cl.extensions.dir}" />
		<mkdir dir="${cl.proactive.dir}" />
		<mkdir dir="${cl.test.dir}" />
		<mkdir dir="${cl.utils.dir}" />
		<mkdir dir="${cl.benchmarks.dir}" />

		<echo message="--- Debugging is ${debug} ---" />
	</target>

	<target name="-configurationCopy" depends="-init">
		<copy toDir="${cl.proactive.dir}">
			<fileset dir="${src.proactive.dir}">
				<include name="org/objectweb/proactive/core/config/proactive-log4j" />
				<include name="org/**/*.xml" />
				<include name="org/**/*.fractal" />
				<include name="org/**/*.properties" />
				<include name="org/**/*.xsd" />
				<include name="org/**/*.png" />
				<include name="org/objectweb/proactive/core/component/adl/xml/proactive.dtd" />
				<include name="common/**/jaas.config" />
			</fileset>
		</copy>
	</target>

	<target name="update_copyright_and_version" description="Update Copyright and Version in every text files">
		<java classname="sources.UpdateCopyrightAndVersion" fork="false">
			<classpath path="${lib.dir}/ProActive/ProActive_utils.jar" />
			<!--  base dir -->
			<arg value="${base.dir}" />
			<!--  exclude dirs -->
			<arg value="${docs.dir}" />
			<arg value="${dist.dir}" />
			<arg value="${classes.dir}" />
			<arg value="${test.classes.dir}" />
			<arg value="${lib.dir}" />
			<arg value="${dev.dir}" />
			<arg value="${extra.format.dir}"/>
		<sysproperty key="copyright.update" value="${copyright.update}"/>
		</java>
	</target>
	
	<target name="check_stubs" description="Check compatibility between current version stubs and an other version (specified using -DrootDirV2=...).">
		<!-- use -DrootDirV2=... to set the root directory of the other project version to be checked -->
		<echo>**** Checking compatibility between current version stubs and stubs in ${rootDirV2}</echo>
		<common_generateorcheck_stubs mode="check"/>
		<rm_generateorcheck_stubs mode="check"/>
		<scheduler_generateorcheck_stubs mode="check"/>
	</target>

	<target name="rcp.libCopy.scheduling.common" depends="deploy.all" description="Copy all required libraries to scheduler plugins">
		<copy todir="${rcp.scheduler.dir}/${scheduling.plugin.common.lib}/lib" flatten="true" includeemptydirs="yes">
			<fileset dir="${lib.dir}/common" excludes="wstx-lgpl-3.9.2.jar" />
		</copy>
		<copy todir="${rcp.scheduler.dir}/${scheduling.plugin.common.lib}/lib" includeemptydirs="yes">
			<fileset dir="${deploy.lib.dir}" includes="${srm.common.jar}, ${srm.common.client.jar}" />
		</copy>
	</target>

	<path id="rcps.classpath">
		<path refid="common.classpath"/>
		<pathelement path="${rcp.scheduler.dir}/org.ow2.proactive.scheduler/bin" />
		<pathelement path="${rcp.rm.dir}/org.ow2.proactive.resourcemanager/bin" />
		<pathelement path="${classes.dir}/scheduler"/>
		<pathelement path="${classes.dir}/scheduler"/>
		<pathelement path="${classes.dir}/resource-manager"/>
	</path>
	
	<target name="rcp.generateStubs" description="Generate Stubs for the RCP products, for better performance">
		<taskdef name="stubGenerator" classname="ant.AntStubGenerator" classpath="${proactive.utils.jar}" />
		<typedef name="class" classname="ant.AntStubGeneratorClass" classpath="${proactive.utils.jar}" />
		<stubGenerator srcDir="${rcp.scheduler.dir}/org.ow2.proactive.scheduler/bin" refclasspath="rcps.classpath">
			<class name="org.ow2.proactive.scheduler.gui.data.SchedulerProxy" />
			<class name="org.ow2.proactive.scheduler.gui.data.JobsController" />
		</stubGenerator>

		<stubGenerator srcDir="${rcp.rm.dir}/org.ow2.proactive.resourcemanager/bin" refclasspath="rcps.classpath">
			<class name="org.ow2.proactive.resourcemanager.gui.data.ResourceManagerProxy" />
			<class name="org.ow2.proactive.resourcemanager.gui.data.EventsReceiver"/>
		</stubGenerator>
	</target>
	

	<target name="rcp.libClean.scheduling.common">
		<delete failonerror="false" includeemptydirs="true">
		  <fileset dir="${rcp.scheduler.dir}/${scheduling.plugin.common.lib}/lib" includes="**/*" />
		</delete>
	</target>
</project>
