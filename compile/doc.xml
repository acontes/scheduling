<?xml version="1.0" encoding="UTF-8"?>
<project name="ProActive Documentation" basedir=".">
	
	<import file="common.xml" />
	
	<!-- ================================================================ -->
		<!--            Create docs, which is the javadoc + manual            -->
		<!--  =============================================================== -->
		<target name="docs" depends="javadoc.all, manual" description="Construct the javadoc and the manual" />


		<!-- ================================================================ -->
		<!--                     Create javadoc                               -->
		<!-- ================================================================ -->
		<target name="javadoc.all" depends="javadoc.published,javadoc.complete"/>


		<target name="javadoc.complete"  description="Make complete Javadoc">
			<mkdir dir="${docs.tmp.dir}" />
			<javadoc  
				destdir="${docs.api.complete.dir}" 
				author="true" 
				version="true" 
				source="${source}" 
				use="true" 
				windowtitle="Scheduler and Resource Manager Complete API" 
				breakiterator="yes" 
				additionalparam="-docfilessubdirs -excludedocfilessubdir CVS:test_documentation"> 

				<classpath>
						<path refid="scheduler.libs"/>
						<path refid="rm.libs"/>
						<pathelement path="${cl.scheduler.dir}"/>
						<pathelement path="${cl.rm.dir}"/>
				</classpath>

				<packageset dir="${src.scheduler.dir}" />
				<packageset dir="${src.rm.dir}" />


				<link href="http://fractal.objectweb.org/current/doc/javadoc/fractal/" />
				<link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
				<doctitle><![CDATA[Scheduler ${version}<br><a href='../html/index.html'>(documentation is here)</a><br>]]></doctitle>
				<bottom><![CDATA[<i>Copyright 1997-2008 INRIA All Rights Reserved.</i>]]></bottom>
	
				<group title="Scheduler">
					<package name="org.ow2.proactive.scheduler*" />
				</group>

				<group title="Resource Manager">
					<package name="org.ow2.proactive.resourcemanager*" />
				</group>
			</javadoc>			
		</target>
	
		<target name="javadoc.published" depends="compile.all" description="Make published Javadoc">
			<mkdir dir="${docs.tmp.dir}" />
			<javadoc source="${source}"	classpathref="scheduler.libs">
				<doclet name="doc.PublishedAPIDoclet" path="${proactive.jar}">
					<param name="-file" value="${docs.published.coreclasses}" />
				</doclet>
				<packageset dir="${src.scheduler.dir}"/>
				<packageset dir="${src.rm.dir}" />
			</javadoc>
			
					
			<javadoc  
				destdir="${docs.api.published.dir}" 
				author="true" 
				version="true" 
				source="${source}" 
				use="true" 
				windowtitle="Scheduler and Resource Manager User API" 
				breakiterator="yes" 
				additionalparam="-docfilessubdirs -excludedocfilessubdir CVS:test_documentation"> 

				<classpath>
						<path refid="scheduler.libs"/>
						<path refid="rm.libs"/>
						<pathelement path="${cl.scheduler.dir}"/>
						<pathelement path="${cl.rm.dir}"/>
				</classpath>

				
				<fileset dir="${src.scheduler.dir}" includesfile="${docs.published.coreclasses}"/>
				<link href="http://fractal.objectweb.org/current/doc/javadoc/fractal/" />
				<link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
				<doctitle><![CDATA[Scheduler ${version}<br><a href='../html/index.html'>(documentation is here)</a><br>]]></doctitle>
				<bottom><![CDATA[<i>Copyright 1997-2008 INRIA All Rights Reserved.</i>]]></bottom>
				
				<group title="Scheduler">
					<package name="org.ow2.proactive.scheduler*" />
				</group>

				<group title="Resource Manager">
					<package name="org.ow2.proactive.resourcemanager*" />
				</group>
								
			</javadoc>			
		</target>

	<!-- ==================================================================== -->
	<!--      The following docbook* are sub-tasks to build the Manual        -->
	<!-- ==================================================================== -->
	<!-- If a needed file doesn't exist, it will be fetched on the web -->	
	<xmlcatalog id="docbookcatalog">
			<!-- If a needed file doesn't exist, it will be fetched on the web -->

			<classpath>
				<!-- Here are some possible paths for the xsl stylesheets, which are contained in docbook-xsl-${docbook.version}.zip-->
				<pathelement location="${docs.docbook}docbook-xsl-${docbook.version}.zip" />
			</classpath>

			<dtd publicId="-//OASIS//DTD DocBook XML V5.0//EN" location="../doc-src/docbook.dtd" />
			<dtd publicId="http://www.oasis-open.org/docbook/xml/5.0b5/dtd/docbook.dtd"  location="../doc-src/docbook.dtd"/>

			<entity publicid="http://docbook.sourceforge.net/release/xsl/${docbook.version}/profiling/profile.xsl" location="docbook-xsl-${docbook.version}/profiling/profile.xsl" />
			<entity publicid="http://docbook.sourceforge.net/release/xsl/${docbook.version}/html/chunk.xsl" location="docbook-xsl-${docbook.version}/html/chunk.xsl" />
			<entity publicid="http://docbook.sourceforge.net/release/xsl/${docbook.version}/html/docbook.xsl" location="docbook-xsl-${docbook.version}/html/docbook.xsl" />
			<entity publicid="http://docbook.sourceforge.net/release/xsl/${docbook.version}/fo/docbook.xsl" location="docbook-xsl-${docbook.version}/fo/docbook.xsl" />
		</xmlcatalog>

	
	


	<!-- ==================================================================== -->
	<!--      Converts docbook xml into ??? - uses the trax processor         -->
	<!-- ==================================================================== -->
	<target name="-docbookTransform"	>
		<!-- Profiling step: keep only the tags which have the attribute os="${docbook.profile}" or no os attribute -->
		<xslt basedir="${doc.src}" processor="trax" in="${docs.tmp.dir}/${docbookInputFile}" out="${docs.tmp.dir}/profiled.xml" style="${docs.xsl.profiling}" force="yes">
			<param name="profile.os" expression="${docbook.profile}" />
			<param name="base.dir" expression="${docs.html.multiple.dir}"/>
			<!--docbook.profile can be html, pdf or empty-->
			<xmlcatalog refid="docbookcatalog" />
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${base.dir}/dev/lib">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</xslt>

		<!-- Do the real conversion, docbook to pdf or html -->
		<xslt basedir="${doc.src}" processor="trax" in="${docs.tmp.dir}/profiled.xml" out="${docbookOutputFile}" style="${docbookStyle}" force="yes">
			<xmlcatalog refid="docbookcatalog" />
			<param name="base.dir" expression="${docs.html.multiple.dir}"/>
			<param name="TODAY" expression="${TODAY}" />
			<!-- the date for the first page -->
			<param name="VERSION" expression="${version}" />
			<!-- the version number, for the first page -->
			
			<!-- Output dir for the chunked stylesheet-->
			<param name="base.dir" expression="${docs.html.multiple.dir}"/>
			<classpath>
				<fileset dir="${docs.docbook}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</xslt>
	</target>


	<!-- ==================================================================== -->
	<!--          Generic task to transform docbook xml into pdf              -->
	<!-- ==================================================================== -->
	<target name="-docbookToPdf">
		<property name="fo.output" value="${pdfOutputFile}.fo" />

		<!--   First translate into intermediate fo format -->
		<antcall target="-docbookTransform">
			<param name="docbookOutputFile" value="${fo.output}" />
			<param name="docbookStyle" value="${docs.xsl.pdf}" />
			<param name="docbook.profile" value="pdf" />
		</antcall>

		<!-- declare how to transform fo xml file in pdf through a new 'fop' task -->
		<taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop" description="Official way to translate .fo (result of xml docbook translation) into .pdf">
			<classpath>
				<fileset dir="${docs.docbook}">
					<include name="*.jar" />
				</fileset>
				
			</classpath>
		</taskdef>

		<!-- Then use the newly defined fop task to translate fo into pdf -->
		<fop format="application/pdf" fofile="${fo.output}" outfile="${pdfOutputFile}" basedir="${doc.src}" />

		<delete file="${fo.output}" />
	</target>


	<!-- ==================================================================== -->
	<!--          Create the snippets necessary for programlistings           -->
	<!-- ==================================================================== -->
	<target name="-snippetscreation" >
		<delete quiet="true">
			<fileset dir="${snippets.location}"/>
		</delete>
		<mkdir dir="${snippets.location}"/>
		<java classname="doc.snippets.Snippetizer" fork="true">
			<classpath refid="scheduler.libs"/>
			<!-- The root for parser start, it will check all the files in the dir and subdirs-->
			<arg value="${base.dir}" />
			<!-- The output path for snippets  -->
			<arg value="${snippets.location}" />
			
		</java>
		<eclipse_format_m>
				<sourcefileset>
					<fileset dir="${snippets.location}" includes="**/*.snip" />
				</sourcefileset>
		</eclipse_format_m>
	</target>
	
	
	
	<!-- ==================================================================== -->
	<!--    Add some highlighting information to the docbook source code      -->
	<!-- ==================================================================== -->
	<target name="-docbookBeautify" >
		
		<java classname="doc.DocBookize" fork="true">
			<classpath refid="scheduler.libs"/>
			<!-- The xml file to parse -->
			<arg value="${docs.tmp.dir}/${docbookInputFile}" />
			<!-- The path to find java files in html -->
			<arg value="Scheduler_src_html/${scheduler.path}/" />
			
			<!-- the path for java file inclusion -->
			<arg value="${src.scheduler.dir}/${scheduler.path}/" />
			<arg value="${src.examples.dir}/${scheduler.path}/" />
			
			<!-- the path for xml file inclusion -->
			<arg value="${descriptors.dir}/" />
			
		</java>

		<java classname="doc.Validate" fork="true">
			<classpath refid="scheduler.libs" />
			<classpath>
				<fileset dir="${docs.docbook}">
					<include name="*.jar" />
				</fileset>
			</classpath>
			<arg value="${docs.tmp.dir}/${docbookInputFile}" />
		</java>

	</target>


	<!-- ==================================================================== -->
	<!-- preprocessing for the manual: copy files and add tags to source code -->
	<!-- ==================================================================== -->
	<target name="-docbookPreProcess">

		<!-- Call the code for generating the snippets -->
		<antcall target="-snippetscreation"/>
		
		<!-- as this file gets edited, make sure it's a fresh copy-->
		<delete file="${docs.tmp.dir}/${docs.mainFile}" />

		<!-- Copy the files needed for the html files (pics and maybe others) -->
		<copy toDir="${html.docs.dir}" includeemptydirs="no">
			<fileset dir="${doc.src}">
				<include name="**/*.png" />
				<include name="**/*.jpg" />
				<include name="**/*.svg" />
				<include name="**/*.gif" />
				<include name="Scheduler.css" />
			</fileset>
		</copy>

		<!-- Copying xml files so they can be edited (beautify programlistings) -->
		<copy toDir="${docs.tmp.dir}" includeemptydirs="no">
			<fileset dir="${doc.src}">
				<include name="**/*" />
				<exclude name="**/.svn" />
				<exclude name="xsl" />
			</fileset>
		</copy>



		<!-- Decorate the code a bit (code examples in programlistings) -->
		<antcall target="-docbookBeautify">
			<param name="docbookInputFile" value="${docs.mainFile}" />
		</antcall>

	</target>


	<!-- ==================================================================== -->
	<!--          Make just the html files for the manual                     -->
	<!-- ==================================================================== -->
	<target name="manualHtml" description="Make only the html files in the manual">
		<antcall target="-docbookPreProcess">
				<param name="html.docs.dir"  value="${docs.html.multiple.dir}" />
		</antcall>
		<antcall target="-docbookTransform">
			<param name="docbookInputFile" value="${docs.mainFile}" />
			<param name="docbookOutputFile" value="${docs.html.multiple.output}" />
			<param name="docbookStyle" value="${docs.xsl.html.chunked}" />
			<param name="docbook.profile" value="html" />
		</antcall>
	</target>

	<!-- ==================================================================== -->
	<!--          Make a zipped archive of the html files for the manual      -->
	<!-- ==================================================================== -->
	<target name="manualHtmlZip" description="Make a zipped archive of the html files for the manual" depends="manualHtml">
		<zip destfile="${docs.multiple.html.zip}" basedir="${docs.html.multiple.dir}" excludes="SchedulerManual.html"/>
	</target>
	
	<!-- ==================================================================== -->
	<!--               Make just the pdf files for the manual                 -->
	<!-- ==================================================================== -->
	<target name="manualPdf" description="Make only the pdf files in the manual" >
		<antcall target="-docbookPreProcess">
			<param name="html.docs.dir"  value="${docs.pdf.dir}" />
		</antcall>
		<antcall target="-docbookToPdf">
			<param name="docbookInputFile" value="${docs.mainFile}" />
			<param name="pdfOutputFile" value="${docs.pdf.output}" />
		</antcall>
	</target>


	<!-- ==================================================================== -->
	<!--           Make only one huge html-file from the doc                  -->
	<!-- ==================================================================== -->
	<target name="manualSingleHtml" description="Make only the big html file in the manual">
		<antcall target="-docbookPreProcess">
			<param name="html.docs.dir"  value="${docs.html.single.dir}" />
		</antcall>
		<antcall target="-docbookTransform">
			<param name="docbookInputFile" value="${docs.mainFile}" />
			<param name="docbookOutputFile" value="${docs.single.html.output}" />
			<param name="docbookStyle" value="${docs.xsl.html.one}" />
			<param name="docbook.profile" value="html" />
		</antcall>
	</target>



	<!-- ==================================================================== -->
	<!--      Makes a zipped archive of one  html-file from the doc           -->
	<!-- ==================================================================== -->
	<target name="manualSingleHtmlZip" description="Makes a zipped archive of one file html manual" depends="manualSingleHtml">
		<zip destfile="${docs.single.html.zip}" basedir="${docs.single.html.dir}" includes="Scheduler.css SchedulerManual.html **/*.gif **/*.png **/*.jpg"/>
	</target>
	<!-- ==================================================================== -->
	<!-- Construct the manual from the XML files in {docs.src}                -->
	<!-- ==================================================================== -->
	<target name="manual" description="Build all the different manual version: html, pdf... " depends="manualSingleHtml,manualHtml,manualPdf">
		<!-- The generation of the files is done by the depends clause -->
		<!-- Once the doc files have been generated, do some cleaning up -->
		<delete dir="${docs.tmp.dir}" />
		<copy todir="${docs.dir}/examples">
			<!-- XML descriptor examples also available -->
			<fileset dir="${base.dir}/jobs_descriptors/" />
		</copy>
	</target>

	<!-- ==================================================================== -->
	<!--       XML Check by running everything up to the XSLT processor       -->
	<!-- ==================================================================== -->
	<target name="checkXML">

		<!-- Call the code for generating the snippets -->
		<antcall target="-snippetscreation"/>

		<!-- as this file gets edited, make sure it's a fresh copy-->
		<delete file="${docs.tmp.dir}/${docs.mainFile}" />

		<!-- Copy the files needed for the html files (pics and maybe others) -->
		<copy toDir="${docs.html.multiple.dir}">
			<fileset dir="${doc.src}">
				<include name="**/*.png" />
				<include name="**/*.jpg" />
				<include name="**/*.svg" />
				<include name="**/*.gif" />
				<include name="Scheduler.css" />
			</fileset>
		</copy>

		<!-- Copying xml files so they can be edited (beautify programlistings) -->
		<copy toDir="${docs.tmp.dir}" includeemptydirs="no">
			<fileset dir="${doc.src}">
				<include name="**/*" />
				<exclude name="**/.svn" />
				<exclude name="xsl" />
			</fileset>
		</copy>

		<!-- Decorate the code a bit (code examples in programlistings) -->
		<antcall target="-docbookBeautifyFailCheck">
			<param name="docbookInputFile" value="${docs.mainFile}" />
		</antcall>

	</target>

	<!-- ==================================================================== -->
	<!--   Checks if the XML is valid and if the manual can be built properly -->
	<!--   this should catch if the XML is malformed  or files are missing    -->
	<!-- ==================================================================== -->
	<target name="-docbookBeautifyFailCheck">
		
		<java classname="doc.DocBookize" fork="true" failonerror="true">
			<classpath refid="project.classpath"/>
			<!-- The xml file to parse -->
			<arg value="${docs.tmp.dir}/${docbookInputFile}" />
			<!-- The path to find java files in html -->
			<arg value="ProActive_src_html/${proactive.path}/" />
			
			<!-- the path for java file inclusion -->
			<arg value="${src.scheduler.dir}" />
			<arg value="${src.rm.dir}" />
			
			<!-- the path for xml file inclusion -->
			<arg value="${descriptors.dir}/" />
			
		</java>

		<java classname="doc.Validate" fork="true" failonerror="true">
			<classpath refid="project.classpath" />
			<classpath>
				<fileset dir="${docs.docbook}">
					<include name="*.jar" />
				</fileset>
			</classpath>
			<arg value="${docs.tmp.dir}/${docbookInputFile}" />
		</java>

	</target>		
</project>
